
build/head:     file format elf32-littlearm


Disassembly of section .text:

08020190 <__do_global_dtors_aux>:
 8020190:	b510      	push	{r4, lr}
 8020192:	4c05      	ldr	r4, [pc, #20]	; (80201a8 <__do_global_dtors_aux+0x18>)
 8020194:	7823      	ldrb	r3, [r4, #0]
 8020196:	b933      	cbnz	r3, 80201a6 <__do_global_dtors_aux+0x16>
 8020198:	4b04      	ldr	r3, [pc, #16]	; (80201ac <__do_global_dtors_aux+0x1c>)
 802019a:	b113      	cbz	r3, 80201a2 <__do_global_dtors_aux+0x12>
 802019c:	4804      	ldr	r0, [pc, #16]	; (80201b0 <__do_global_dtors_aux+0x20>)
 802019e:	f3af 8000 	nop.w
 80201a2:	2301      	movs	r3, #1
 80201a4:	7023      	strb	r3, [r4, #0]
 80201a6:	bd10      	pop	{r4, pc}
 80201a8:	200001fc 	.word	0x200001fc
 80201ac:	00000000 	.word	0x00000000
 80201b0:	08028380 	.word	0x08028380

080201b4 <frame_dummy>:
 80201b4:	4b0c      	ldr	r3, [pc, #48]	; (80201e8 <frame_dummy+0x34>)
 80201b6:	b143      	cbz	r3, 80201ca <frame_dummy+0x16>
 80201b8:	480c      	ldr	r0, [pc, #48]	; (80201ec <frame_dummy+0x38>)
 80201ba:	490d      	ldr	r1, [pc, #52]	; (80201f0 <frame_dummy+0x3c>)
 80201bc:	b510      	push	{r4, lr}
 80201be:	f3af 8000 	nop.w
 80201c2:	480c      	ldr	r0, [pc, #48]	; (80201f4 <frame_dummy+0x40>)
 80201c4:	6803      	ldr	r3, [r0, #0]
 80201c6:	b923      	cbnz	r3, 80201d2 <frame_dummy+0x1e>
 80201c8:	bd10      	pop	{r4, pc}
 80201ca:	480a      	ldr	r0, [pc, #40]	; (80201f4 <frame_dummy+0x40>)
 80201cc:	6803      	ldr	r3, [r0, #0]
 80201ce:	b933      	cbnz	r3, 80201de <frame_dummy+0x2a>
 80201d0:	4770      	bx	lr
 80201d2:	4b09      	ldr	r3, [pc, #36]	; (80201f8 <frame_dummy+0x44>)
 80201d4:	2b00      	cmp	r3, #0
 80201d6:	d0f7      	beq.n	80201c8 <frame_dummy+0x14>
 80201d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80201dc:	4718      	bx	r3
 80201de:	4b06      	ldr	r3, [pc, #24]	; (80201f8 <frame_dummy+0x44>)
 80201e0:	2b00      	cmp	r3, #0
 80201e2:	d0f5      	beq.n	80201d0 <frame_dummy+0x1c>
 80201e4:	4718      	bx	r3
 80201e6:	bf00      	nop
 80201e8:	00000000 	.word	0x00000000
 80201ec:	08028380 	.word	0x08028380
 80201f0:	20000200 	.word	0x20000200
 80201f4:	200001fc 	.word	0x200001fc
 80201f8:	00000000 	.word	0x00000000

080201fc <strlen>:
 80201fc:	4603      	mov	r3, r0
 80201fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8020202:	2a00      	cmp	r2, #0
 8020204:	d1fb      	bne.n	80201fe <strlen+0x2>
 8020206:	1a18      	subs	r0, r3, r0
 8020208:	3801      	subs	r0, #1
 802020a:	4770      	bx	lr
 802020c:	0000      	movs	r0, r0
	...

08020210 <memchr>:
 8020210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8020214:	2a10      	cmp	r2, #16
 8020216:	db2b      	blt.n	8020270 <memchr+0x60>
 8020218:	f010 0f07 	tst.w	r0, #7
 802021c:	d008      	beq.n	8020230 <memchr+0x20>
 802021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8020222:	3a01      	subs	r2, #1
 8020224:	428b      	cmp	r3, r1
 8020226:	d02d      	beq.n	8020284 <memchr+0x74>
 8020228:	f010 0f07 	tst.w	r0, #7
 802022c:	b342      	cbz	r2, 8020280 <memchr+0x70>
 802022e:	d1f6      	bne.n	802021e <memchr+0xe>
 8020230:	b4f0      	push	{r4, r5, r6, r7}
 8020232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8020236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 802023a:	f022 0407 	bic.w	r4, r2, #7
 802023e:	f07f 0700 	mvns.w	r7, #0
 8020242:	2300      	movs	r3, #0
 8020244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8020248:	3c08      	subs	r4, #8
 802024a:	ea85 0501 	eor.w	r5, r5, r1
 802024e:	ea86 0601 	eor.w	r6, r6, r1
 8020252:	fa85 f547 	uadd8	r5, r5, r7
 8020256:	faa3 f587 	sel	r5, r3, r7
 802025a:	fa86 f647 	uadd8	r6, r6, r7
 802025e:	faa5 f687 	sel	r6, r5, r7
 8020262:	b98e      	cbnz	r6, 8020288 <memchr+0x78>
 8020264:	d1ee      	bne.n	8020244 <memchr+0x34>
 8020266:	bcf0      	pop	{r4, r5, r6, r7}
 8020268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 802026c:	f002 0207 	and.w	r2, r2, #7
 8020270:	b132      	cbz	r2, 8020280 <memchr+0x70>
 8020272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8020276:	3a01      	subs	r2, #1
 8020278:	ea83 0301 	eor.w	r3, r3, r1
 802027c:	b113      	cbz	r3, 8020284 <memchr+0x74>
 802027e:	d1f8      	bne.n	8020272 <memchr+0x62>
 8020280:	2000      	movs	r0, #0
 8020282:	4770      	bx	lr
 8020284:	3801      	subs	r0, #1
 8020286:	4770      	bx	lr
 8020288:	2d00      	cmp	r5, #0
 802028a:	bf06      	itte	eq
 802028c:	4635      	moveq	r5, r6
 802028e:	3803      	subeq	r0, #3
 8020290:	3807      	subne	r0, #7
 8020292:	f015 0f01 	tst.w	r5, #1
 8020296:	d107      	bne.n	80202a8 <memchr+0x98>
 8020298:	3001      	adds	r0, #1
 802029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 802029e:	bf02      	ittt	eq
 80202a0:	3001      	addeq	r0, #1
 80202a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80202a6:	3001      	addeq	r0, #1
 80202a8:	bcf0      	pop	{r4, r5, r6, r7}
 80202aa:	3801      	subs	r0, #1
 80202ac:	4770      	bx	lr
 80202ae:	bf00      	nop

080202b0 <__aeabi_drsub>:
 80202b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80202b4:	e002      	b.n	80202bc <__adddf3>
 80202b6:	bf00      	nop

080202b8 <__aeabi_dsub>:
 80202b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080202bc <__adddf3>:
 80202bc:	b530      	push	{r4, r5, lr}
 80202be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80202c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80202c6:	ea94 0f05 	teq	r4, r5
 80202ca:	bf08      	it	eq
 80202cc:	ea90 0f02 	teqeq	r0, r2
 80202d0:	bf1f      	itttt	ne
 80202d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80202d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80202da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80202de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80202e2:	f000 80e2 	beq.w	80204aa <__adddf3+0x1ee>
 80202e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80202ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80202ee:	bfb8      	it	lt
 80202f0:	426d      	neglt	r5, r5
 80202f2:	dd0c      	ble.n	802030e <__adddf3+0x52>
 80202f4:	442c      	add	r4, r5
 80202f6:	ea80 0202 	eor.w	r2, r0, r2
 80202fa:	ea81 0303 	eor.w	r3, r1, r3
 80202fe:	ea82 0000 	eor.w	r0, r2, r0
 8020302:	ea83 0101 	eor.w	r1, r3, r1
 8020306:	ea80 0202 	eor.w	r2, r0, r2
 802030a:	ea81 0303 	eor.w	r3, r1, r3
 802030e:	2d36      	cmp	r5, #54	; 0x36
 8020310:	bf88      	it	hi
 8020312:	bd30      	pophi	{r4, r5, pc}
 8020314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8020318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 802031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8020320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8020324:	d002      	beq.n	802032c <__adddf3+0x70>
 8020326:	4240      	negs	r0, r0
 8020328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 802032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8020330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8020334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8020338:	d002      	beq.n	8020340 <__adddf3+0x84>
 802033a:	4252      	negs	r2, r2
 802033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8020340:	ea94 0f05 	teq	r4, r5
 8020344:	f000 80a7 	beq.w	8020496 <__adddf3+0x1da>
 8020348:	f1a4 0401 	sub.w	r4, r4, #1
 802034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8020350:	db0d      	blt.n	802036e <__adddf3+0xb2>
 8020352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8020356:	fa22 f205 	lsr.w	r2, r2, r5
 802035a:	1880      	adds	r0, r0, r2
 802035c:	f141 0100 	adc.w	r1, r1, #0
 8020360:	fa03 f20e 	lsl.w	r2, r3, lr
 8020364:	1880      	adds	r0, r0, r2
 8020366:	fa43 f305 	asr.w	r3, r3, r5
 802036a:	4159      	adcs	r1, r3
 802036c:	e00e      	b.n	802038c <__adddf3+0xd0>
 802036e:	f1a5 0520 	sub.w	r5, r5, #32
 8020372:	f10e 0e20 	add.w	lr, lr, #32
 8020376:	2a01      	cmp	r2, #1
 8020378:	fa03 fc0e 	lsl.w	ip, r3, lr
 802037c:	bf28      	it	cs
 802037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8020382:	fa43 f305 	asr.w	r3, r3, r5
 8020386:	18c0      	adds	r0, r0, r3
 8020388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 802038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8020390:	d507      	bpl.n	80203a2 <__adddf3+0xe6>
 8020392:	f04f 0e00 	mov.w	lr, #0
 8020396:	f1dc 0c00 	rsbs	ip, ip, #0
 802039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 802039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80203a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80203a6:	d31b      	bcc.n	80203e0 <__adddf3+0x124>
 80203a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80203ac:	d30c      	bcc.n	80203c8 <__adddf3+0x10c>
 80203ae:	0849      	lsrs	r1, r1, #1
 80203b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80203b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80203b8:	f104 0401 	add.w	r4, r4, #1
 80203bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80203c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80203c4:	f080 809a 	bcs.w	80204fc <__adddf3+0x240>
 80203c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80203cc:	bf08      	it	eq
 80203ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80203d2:	f150 0000 	adcs.w	r0, r0, #0
 80203d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80203da:	ea41 0105 	orr.w	r1, r1, r5
 80203de:	bd30      	pop	{r4, r5, pc}
 80203e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80203e4:	4140      	adcs	r0, r0
 80203e6:	eb41 0101 	adc.w	r1, r1, r1
 80203ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80203ee:	f1a4 0401 	sub.w	r4, r4, #1
 80203f2:	d1e9      	bne.n	80203c8 <__adddf3+0x10c>
 80203f4:	f091 0f00 	teq	r1, #0
 80203f8:	bf04      	itt	eq
 80203fa:	4601      	moveq	r1, r0
 80203fc:	2000      	moveq	r0, #0
 80203fe:	fab1 f381 	clz	r3, r1
 8020402:	bf08      	it	eq
 8020404:	3320      	addeq	r3, #32
 8020406:	f1a3 030b 	sub.w	r3, r3, #11
 802040a:	f1b3 0220 	subs.w	r2, r3, #32
 802040e:	da0c      	bge.n	802042a <__adddf3+0x16e>
 8020410:	320c      	adds	r2, #12
 8020412:	dd08      	ble.n	8020426 <__adddf3+0x16a>
 8020414:	f102 0c14 	add.w	ip, r2, #20
 8020418:	f1c2 020c 	rsb	r2, r2, #12
 802041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8020420:	fa21 f102 	lsr.w	r1, r1, r2
 8020424:	e00c      	b.n	8020440 <__adddf3+0x184>
 8020426:	f102 0214 	add.w	r2, r2, #20
 802042a:	bfd8      	it	le
 802042c:	f1c2 0c20 	rsble	ip, r2, #32
 8020430:	fa01 f102 	lsl.w	r1, r1, r2
 8020434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8020438:	bfdc      	itt	le
 802043a:	ea41 010c 	orrle.w	r1, r1, ip
 802043e:	4090      	lslle	r0, r2
 8020440:	1ae4      	subs	r4, r4, r3
 8020442:	bfa2      	ittt	ge
 8020444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8020448:	4329      	orrge	r1, r5
 802044a:	bd30      	popge	{r4, r5, pc}
 802044c:	ea6f 0404 	mvn.w	r4, r4
 8020450:	3c1f      	subs	r4, #31
 8020452:	da1c      	bge.n	802048e <__adddf3+0x1d2>
 8020454:	340c      	adds	r4, #12
 8020456:	dc0e      	bgt.n	8020476 <__adddf3+0x1ba>
 8020458:	f104 0414 	add.w	r4, r4, #20
 802045c:	f1c4 0220 	rsb	r2, r4, #32
 8020460:	fa20 f004 	lsr.w	r0, r0, r4
 8020464:	fa01 f302 	lsl.w	r3, r1, r2
 8020468:	ea40 0003 	orr.w	r0, r0, r3
 802046c:	fa21 f304 	lsr.w	r3, r1, r4
 8020470:	ea45 0103 	orr.w	r1, r5, r3
 8020474:	bd30      	pop	{r4, r5, pc}
 8020476:	f1c4 040c 	rsb	r4, r4, #12
 802047a:	f1c4 0220 	rsb	r2, r4, #32
 802047e:	fa20 f002 	lsr.w	r0, r0, r2
 8020482:	fa01 f304 	lsl.w	r3, r1, r4
 8020486:	ea40 0003 	orr.w	r0, r0, r3
 802048a:	4629      	mov	r1, r5
 802048c:	bd30      	pop	{r4, r5, pc}
 802048e:	fa21 f004 	lsr.w	r0, r1, r4
 8020492:	4629      	mov	r1, r5
 8020494:	bd30      	pop	{r4, r5, pc}
 8020496:	f094 0f00 	teq	r4, #0
 802049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 802049e:	bf06      	itte	eq
 80204a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80204a4:	3401      	addeq	r4, #1
 80204a6:	3d01      	subne	r5, #1
 80204a8:	e74e      	b.n	8020348 <__adddf3+0x8c>
 80204aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80204ae:	bf18      	it	ne
 80204b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80204b4:	d029      	beq.n	802050a <__adddf3+0x24e>
 80204b6:	ea94 0f05 	teq	r4, r5
 80204ba:	bf08      	it	eq
 80204bc:	ea90 0f02 	teqeq	r0, r2
 80204c0:	d005      	beq.n	80204ce <__adddf3+0x212>
 80204c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80204c6:	bf04      	itt	eq
 80204c8:	4619      	moveq	r1, r3
 80204ca:	4610      	moveq	r0, r2
 80204cc:	bd30      	pop	{r4, r5, pc}
 80204ce:	ea91 0f03 	teq	r1, r3
 80204d2:	bf1e      	ittt	ne
 80204d4:	2100      	movne	r1, #0
 80204d6:	2000      	movne	r0, #0
 80204d8:	bd30      	popne	{r4, r5, pc}
 80204da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80204de:	d105      	bne.n	80204ec <__adddf3+0x230>
 80204e0:	0040      	lsls	r0, r0, #1
 80204e2:	4149      	adcs	r1, r1
 80204e4:	bf28      	it	cs
 80204e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80204ea:	bd30      	pop	{r4, r5, pc}
 80204ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80204f0:	bf3c      	itt	cc
 80204f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80204f6:	bd30      	popcc	{r4, r5, pc}
 80204f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80204fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8020500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8020504:	f04f 0000 	mov.w	r0, #0
 8020508:	bd30      	pop	{r4, r5, pc}
 802050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 802050e:	bf1a      	itte	ne
 8020510:	4619      	movne	r1, r3
 8020512:	4610      	movne	r0, r2
 8020514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8020518:	bf1c      	itt	ne
 802051a:	460b      	movne	r3, r1
 802051c:	4602      	movne	r2, r0
 802051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8020522:	bf06      	itte	eq
 8020524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8020528:	ea91 0f03 	teqeq	r1, r3
 802052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8020530:	bd30      	pop	{r4, r5, pc}
 8020532:	bf00      	nop

08020534 <__aeabi_ui2d>:
 8020534:	f090 0f00 	teq	r0, #0
 8020538:	bf04      	itt	eq
 802053a:	2100      	moveq	r1, #0
 802053c:	4770      	bxeq	lr
 802053e:	b530      	push	{r4, r5, lr}
 8020540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8020544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8020548:	f04f 0500 	mov.w	r5, #0
 802054c:	f04f 0100 	mov.w	r1, #0
 8020550:	e750      	b.n	80203f4 <__adddf3+0x138>
 8020552:	bf00      	nop

08020554 <__aeabi_i2d>:
 8020554:	f090 0f00 	teq	r0, #0
 8020558:	bf04      	itt	eq
 802055a:	2100      	moveq	r1, #0
 802055c:	4770      	bxeq	lr
 802055e:	b530      	push	{r4, r5, lr}
 8020560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8020564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8020568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 802056c:	bf48      	it	mi
 802056e:	4240      	negmi	r0, r0
 8020570:	f04f 0100 	mov.w	r1, #0
 8020574:	e73e      	b.n	80203f4 <__adddf3+0x138>
 8020576:	bf00      	nop

08020578 <__aeabi_f2d>:
 8020578:	0042      	lsls	r2, r0, #1
 802057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 802057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8020582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8020586:	bf1f      	itttt	ne
 8020588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 802058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8020590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8020594:	4770      	bxne	lr
 8020596:	f092 0f00 	teq	r2, #0
 802059a:	bf14      	ite	ne
 802059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80205a0:	4770      	bxeq	lr
 80205a2:	b530      	push	{r4, r5, lr}
 80205a4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80205a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80205ac:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80205b0:	e720      	b.n	80203f4 <__adddf3+0x138>
 80205b2:	bf00      	nop

080205b4 <__aeabi_ul2d>:
 80205b4:	ea50 0201 	orrs.w	r2, r0, r1
 80205b8:	bf08      	it	eq
 80205ba:	4770      	bxeq	lr
 80205bc:	b530      	push	{r4, r5, lr}
 80205be:	f04f 0500 	mov.w	r5, #0
 80205c2:	e00a      	b.n	80205da <__aeabi_l2d+0x16>

080205c4 <__aeabi_l2d>:
 80205c4:	ea50 0201 	orrs.w	r2, r0, r1
 80205c8:	bf08      	it	eq
 80205ca:	4770      	bxeq	lr
 80205cc:	b530      	push	{r4, r5, lr}
 80205ce:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80205d2:	d502      	bpl.n	80205da <__aeabi_l2d+0x16>
 80205d4:	4240      	negs	r0, r0
 80205d6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80205da:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80205de:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80205e2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80205e6:	f43f aedc 	beq.w	80203a2 <__adddf3+0xe6>
 80205ea:	f04f 0203 	mov.w	r2, #3
 80205ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80205f2:	bf18      	it	ne
 80205f4:	3203      	addne	r2, #3
 80205f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80205fa:	bf18      	it	ne
 80205fc:	3203      	addne	r2, #3
 80205fe:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8020602:	f1c2 0320 	rsb	r3, r2, #32
 8020606:	fa00 fc03 	lsl.w	ip, r0, r3
 802060a:	fa20 f002 	lsr.w	r0, r0, r2
 802060e:	fa01 fe03 	lsl.w	lr, r1, r3
 8020612:	ea40 000e 	orr.w	r0, r0, lr
 8020616:	fa21 f102 	lsr.w	r1, r1, r2
 802061a:	4414      	add	r4, r2
 802061c:	e6c1      	b.n	80203a2 <__adddf3+0xe6>
 802061e:	bf00      	nop

08020620 <__aeabi_dmul>:
 8020620:	b570      	push	{r4, r5, r6, lr}
 8020622:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8020626:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 802062a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 802062e:	bf1d      	ittte	ne
 8020630:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8020634:	ea94 0f0c 	teqne	r4, ip
 8020638:	ea95 0f0c 	teqne	r5, ip
 802063c:	f000 f8de 	bleq	80207fc <__aeabi_dmul+0x1dc>
 8020640:	442c      	add	r4, r5
 8020642:	ea81 0603 	eor.w	r6, r1, r3
 8020646:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 802064a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 802064e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8020652:	bf18      	it	ne
 8020654:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8020658:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 802065c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8020660:	d038      	beq.n	80206d4 <__aeabi_dmul+0xb4>
 8020662:	fba0 ce02 	umull	ip, lr, r0, r2
 8020666:	f04f 0500 	mov.w	r5, #0
 802066a:	fbe1 e502 	umlal	lr, r5, r1, r2
 802066e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8020672:	fbe0 e503 	umlal	lr, r5, r0, r3
 8020676:	f04f 0600 	mov.w	r6, #0
 802067a:	fbe1 5603 	umlal	r5, r6, r1, r3
 802067e:	f09c 0f00 	teq	ip, #0
 8020682:	bf18      	it	ne
 8020684:	f04e 0e01 	orrne.w	lr, lr, #1
 8020688:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 802068c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8020690:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8020694:	d204      	bcs.n	80206a0 <__aeabi_dmul+0x80>
 8020696:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 802069a:	416d      	adcs	r5, r5
 802069c:	eb46 0606 	adc.w	r6, r6, r6
 80206a0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80206a4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80206a8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80206ac:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80206b0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80206b4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80206b8:	bf88      	it	hi
 80206ba:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80206be:	d81e      	bhi.n	80206fe <__aeabi_dmul+0xde>
 80206c0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80206c4:	bf08      	it	eq
 80206c6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80206ca:	f150 0000 	adcs.w	r0, r0, #0
 80206ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80206d2:	bd70      	pop	{r4, r5, r6, pc}
 80206d4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80206d8:	ea46 0101 	orr.w	r1, r6, r1
 80206dc:	ea40 0002 	orr.w	r0, r0, r2
 80206e0:	ea81 0103 	eor.w	r1, r1, r3
 80206e4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80206e8:	bfc2      	ittt	gt
 80206ea:	ebd4 050c 	rsbsgt	r5, r4, ip
 80206ee:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80206f2:	bd70      	popgt	{r4, r5, r6, pc}
 80206f4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80206f8:	f04f 0e00 	mov.w	lr, #0
 80206fc:	3c01      	subs	r4, #1
 80206fe:	f300 80ab 	bgt.w	8020858 <__aeabi_dmul+0x238>
 8020702:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8020706:	bfde      	ittt	le
 8020708:	2000      	movle	r0, #0
 802070a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 802070e:	bd70      	pople	{r4, r5, r6, pc}
 8020710:	f1c4 0400 	rsb	r4, r4, #0
 8020714:	3c20      	subs	r4, #32
 8020716:	da35      	bge.n	8020784 <__aeabi_dmul+0x164>
 8020718:	340c      	adds	r4, #12
 802071a:	dc1b      	bgt.n	8020754 <__aeabi_dmul+0x134>
 802071c:	f104 0414 	add.w	r4, r4, #20
 8020720:	f1c4 0520 	rsb	r5, r4, #32
 8020724:	fa00 f305 	lsl.w	r3, r0, r5
 8020728:	fa20 f004 	lsr.w	r0, r0, r4
 802072c:	fa01 f205 	lsl.w	r2, r1, r5
 8020730:	ea40 0002 	orr.w	r0, r0, r2
 8020734:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8020738:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 802073c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8020740:	fa21 f604 	lsr.w	r6, r1, r4
 8020744:	eb42 0106 	adc.w	r1, r2, r6
 8020748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 802074c:	bf08      	it	eq
 802074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8020752:	bd70      	pop	{r4, r5, r6, pc}
 8020754:	f1c4 040c 	rsb	r4, r4, #12
 8020758:	f1c4 0520 	rsb	r5, r4, #32
 802075c:	fa00 f304 	lsl.w	r3, r0, r4
 8020760:	fa20 f005 	lsr.w	r0, r0, r5
 8020764:	fa01 f204 	lsl.w	r2, r1, r4
 8020768:	ea40 0002 	orr.w	r0, r0, r2
 802076c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8020770:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8020774:	f141 0100 	adc.w	r1, r1, #0
 8020778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 802077c:	bf08      	it	eq
 802077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8020782:	bd70      	pop	{r4, r5, r6, pc}
 8020784:	f1c4 0520 	rsb	r5, r4, #32
 8020788:	fa00 f205 	lsl.w	r2, r0, r5
 802078c:	ea4e 0e02 	orr.w	lr, lr, r2
 8020790:	fa20 f304 	lsr.w	r3, r0, r4
 8020794:	fa01 f205 	lsl.w	r2, r1, r5
 8020798:	ea43 0302 	orr.w	r3, r3, r2
 802079c:	fa21 f004 	lsr.w	r0, r1, r4
 80207a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80207a4:	fa21 f204 	lsr.w	r2, r1, r4
 80207a8:	ea20 0002 	bic.w	r0, r0, r2
 80207ac:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80207b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80207b4:	bf08      	it	eq
 80207b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80207ba:	bd70      	pop	{r4, r5, r6, pc}
 80207bc:	f094 0f00 	teq	r4, #0
 80207c0:	d10f      	bne.n	80207e2 <__aeabi_dmul+0x1c2>
 80207c2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80207c6:	0040      	lsls	r0, r0, #1
 80207c8:	eb41 0101 	adc.w	r1, r1, r1
 80207cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80207d0:	bf08      	it	eq
 80207d2:	3c01      	subeq	r4, #1
 80207d4:	d0f7      	beq.n	80207c6 <__aeabi_dmul+0x1a6>
 80207d6:	ea41 0106 	orr.w	r1, r1, r6
 80207da:	f095 0f00 	teq	r5, #0
 80207de:	bf18      	it	ne
 80207e0:	4770      	bxne	lr
 80207e2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80207e6:	0052      	lsls	r2, r2, #1
 80207e8:	eb43 0303 	adc.w	r3, r3, r3
 80207ec:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80207f0:	bf08      	it	eq
 80207f2:	3d01      	subeq	r5, #1
 80207f4:	d0f7      	beq.n	80207e6 <__aeabi_dmul+0x1c6>
 80207f6:	ea43 0306 	orr.w	r3, r3, r6
 80207fa:	4770      	bx	lr
 80207fc:	ea94 0f0c 	teq	r4, ip
 8020800:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8020804:	bf18      	it	ne
 8020806:	ea95 0f0c 	teqne	r5, ip
 802080a:	d00c      	beq.n	8020826 <__aeabi_dmul+0x206>
 802080c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8020810:	bf18      	it	ne
 8020812:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8020816:	d1d1      	bne.n	80207bc <__aeabi_dmul+0x19c>
 8020818:	ea81 0103 	eor.w	r1, r1, r3
 802081c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8020820:	f04f 0000 	mov.w	r0, #0
 8020824:	bd70      	pop	{r4, r5, r6, pc}
 8020826:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 802082a:	bf06      	itte	eq
 802082c:	4610      	moveq	r0, r2
 802082e:	4619      	moveq	r1, r3
 8020830:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8020834:	d019      	beq.n	802086a <__aeabi_dmul+0x24a>
 8020836:	ea94 0f0c 	teq	r4, ip
 802083a:	d102      	bne.n	8020842 <__aeabi_dmul+0x222>
 802083c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8020840:	d113      	bne.n	802086a <__aeabi_dmul+0x24a>
 8020842:	ea95 0f0c 	teq	r5, ip
 8020846:	d105      	bne.n	8020854 <__aeabi_dmul+0x234>
 8020848:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 802084c:	bf1c      	itt	ne
 802084e:	4610      	movne	r0, r2
 8020850:	4619      	movne	r1, r3
 8020852:	d10a      	bne.n	802086a <__aeabi_dmul+0x24a>
 8020854:	ea81 0103 	eor.w	r1, r1, r3
 8020858:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 802085c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8020860:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8020864:	f04f 0000 	mov.w	r0, #0
 8020868:	bd70      	pop	{r4, r5, r6, pc}
 802086a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 802086e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8020872:	bd70      	pop	{r4, r5, r6, pc}

08020874 <__aeabi_ddiv>:
 8020874:	b570      	push	{r4, r5, r6, lr}
 8020876:	f04f 0cff 	mov.w	ip, #255	; 0xff
 802087a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 802087e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8020882:	bf1d      	ittte	ne
 8020884:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8020888:	ea94 0f0c 	teqne	r4, ip
 802088c:	ea95 0f0c 	teqne	r5, ip
 8020890:	f000 f8a7 	bleq	80209e2 <__aeabi_ddiv+0x16e>
 8020894:	eba4 0405 	sub.w	r4, r4, r5
 8020898:	ea81 0e03 	eor.w	lr, r1, r3
 802089c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80208a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80208a4:	f000 8088 	beq.w	80209b8 <__aeabi_ddiv+0x144>
 80208a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80208ac:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80208b0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80208b4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80208b8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80208bc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80208c0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80208c4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80208c8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80208cc:	429d      	cmp	r5, r3
 80208ce:	bf08      	it	eq
 80208d0:	4296      	cmpeq	r6, r2
 80208d2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80208d6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80208da:	d202      	bcs.n	80208e2 <__aeabi_ddiv+0x6e>
 80208dc:	085b      	lsrs	r3, r3, #1
 80208de:	ea4f 0232 	mov.w	r2, r2, rrx
 80208e2:	1ab6      	subs	r6, r6, r2
 80208e4:	eb65 0503 	sbc.w	r5, r5, r3
 80208e8:	085b      	lsrs	r3, r3, #1
 80208ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80208ee:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80208f2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80208f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80208fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80208fe:	bf22      	ittt	cs
 8020900:	1ab6      	subcs	r6, r6, r2
 8020902:	4675      	movcs	r5, lr
 8020904:	ea40 000c 	orrcs.w	r0, r0, ip
 8020908:	085b      	lsrs	r3, r3, #1
 802090a:	ea4f 0232 	mov.w	r2, r2, rrx
 802090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8020912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8020916:	bf22      	ittt	cs
 8020918:	1ab6      	subcs	r6, r6, r2
 802091a:	4675      	movcs	r5, lr
 802091c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8020920:	085b      	lsrs	r3, r3, #1
 8020922:	ea4f 0232 	mov.w	r2, r2, rrx
 8020926:	ebb6 0e02 	subs.w	lr, r6, r2
 802092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 802092e:	bf22      	ittt	cs
 8020930:	1ab6      	subcs	r6, r6, r2
 8020932:	4675      	movcs	r5, lr
 8020934:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8020938:	085b      	lsrs	r3, r3, #1
 802093a:	ea4f 0232 	mov.w	r2, r2, rrx
 802093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8020942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8020946:	bf22      	ittt	cs
 8020948:	1ab6      	subcs	r6, r6, r2
 802094a:	4675      	movcs	r5, lr
 802094c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8020950:	ea55 0e06 	orrs.w	lr, r5, r6
 8020954:	d018      	beq.n	8020988 <__aeabi_ddiv+0x114>
 8020956:	ea4f 1505 	mov.w	r5, r5, lsl #4
 802095a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 802095e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8020962:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8020966:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 802096a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 802096e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8020972:	d1c0      	bne.n	80208f6 <__aeabi_ddiv+0x82>
 8020974:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8020978:	d10b      	bne.n	8020992 <__aeabi_ddiv+0x11e>
 802097a:	ea41 0100 	orr.w	r1, r1, r0
 802097e:	f04f 0000 	mov.w	r0, #0
 8020982:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8020986:	e7b6      	b.n	80208f6 <__aeabi_ddiv+0x82>
 8020988:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 802098c:	bf04      	itt	eq
 802098e:	4301      	orreq	r1, r0
 8020990:	2000      	moveq	r0, #0
 8020992:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8020996:	bf88      	it	hi
 8020998:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 802099c:	f63f aeaf 	bhi.w	80206fe <__aeabi_dmul+0xde>
 80209a0:	ebb5 0c03 	subs.w	ip, r5, r3
 80209a4:	bf04      	itt	eq
 80209a6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80209aa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80209ae:	f150 0000 	adcs.w	r0, r0, #0
 80209b2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80209b6:	bd70      	pop	{r4, r5, r6, pc}
 80209b8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80209bc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80209c0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80209c4:	bfc2      	ittt	gt
 80209c6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80209ca:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80209ce:	bd70      	popgt	{r4, r5, r6, pc}
 80209d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80209d4:	f04f 0e00 	mov.w	lr, #0
 80209d8:	3c01      	subs	r4, #1
 80209da:	e690      	b.n	80206fe <__aeabi_dmul+0xde>
 80209dc:	ea45 0e06 	orr.w	lr, r5, r6
 80209e0:	e68d      	b.n	80206fe <__aeabi_dmul+0xde>
 80209e2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80209e6:	ea94 0f0c 	teq	r4, ip
 80209ea:	bf08      	it	eq
 80209ec:	ea95 0f0c 	teqeq	r5, ip
 80209f0:	f43f af3b 	beq.w	802086a <__aeabi_dmul+0x24a>
 80209f4:	ea94 0f0c 	teq	r4, ip
 80209f8:	d10a      	bne.n	8020a10 <__aeabi_ddiv+0x19c>
 80209fa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80209fe:	f47f af34 	bne.w	802086a <__aeabi_dmul+0x24a>
 8020a02:	ea95 0f0c 	teq	r5, ip
 8020a06:	f47f af25 	bne.w	8020854 <__aeabi_dmul+0x234>
 8020a0a:	4610      	mov	r0, r2
 8020a0c:	4619      	mov	r1, r3
 8020a0e:	e72c      	b.n	802086a <__aeabi_dmul+0x24a>
 8020a10:	ea95 0f0c 	teq	r5, ip
 8020a14:	d106      	bne.n	8020a24 <__aeabi_ddiv+0x1b0>
 8020a16:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8020a1a:	f43f aefd 	beq.w	8020818 <__aeabi_dmul+0x1f8>
 8020a1e:	4610      	mov	r0, r2
 8020a20:	4619      	mov	r1, r3
 8020a22:	e722      	b.n	802086a <__aeabi_dmul+0x24a>
 8020a24:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8020a28:	bf18      	it	ne
 8020a2a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8020a2e:	f47f aec5 	bne.w	80207bc <__aeabi_dmul+0x19c>
 8020a32:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8020a36:	f47f af0d 	bne.w	8020854 <__aeabi_dmul+0x234>
 8020a3a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8020a3e:	f47f aeeb 	bne.w	8020818 <__aeabi_dmul+0x1f8>
 8020a42:	e712      	b.n	802086a <__aeabi_dmul+0x24a>

08020a44 <__gedf2>:
 8020a44:	f04f 3cff 	mov.w	ip, #4294967295
 8020a48:	e006      	b.n	8020a58 <__cmpdf2+0x4>
 8020a4a:	bf00      	nop

08020a4c <__ledf2>:
 8020a4c:	f04f 0c01 	mov.w	ip, #1
 8020a50:	e002      	b.n	8020a58 <__cmpdf2+0x4>
 8020a52:	bf00      	nop

08020a54 <__cmpdf2>:
 8020a54:	f04f 0c01 	mov.w	ip, #1
 8020a58:	f84d cd04 	str.w	ip, [sp, #-4]!
 8020a5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8020a60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8020a64:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8020a68:	bf18      	it	ne
 8020a6a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8020a6e:	d01b      	beq.n	8020aa8 <__cmpdf2+0x54>
 8020a70:	b001      	add	sp, #4
 8020a72:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8020a76:	bf0c      	ite	eq
 8020a78:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8020a7c:	ea91 0f03 	teqne	r1, r3
 8020a80:	bf02      	ittt	eq
 8020a82:	ea90 0f02 	teqeq	r0, r2
 8020a86:	2000      	moveq	r0, #0
 8020a88:	4770      	bxeq	lr
 8020a8a:	f110 0f00 	cmn.w	r0, #0
 8020a8e:	ea91 0f03 	teq	r1, r3
 8020a92:	bf58      	it	pl
 8020a94:	4299      	cmppl	r1, r3
 8020a96:	bf08      	it	eq
 8020a98:	4290      	cmpeq	r0, r2
 8020a9a:	bf2c      	ite	cs
 8020a9c:	17d8      	asrcs	r0, r3, #31
 8020a9e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8020aa2:	f040 0001 	orr.w	r0, r0, #1
 8020aa6:	4770      	bx	lr
 8020aa8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8020aac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8020ab0:	d102      	bne.n	8020ab8 <__cmpdf2+0x64>
 8020ab2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8020ab6:	d107      	bne.n	8020ac8 <__cmpdf2+0x74>
 8020ab8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8020abc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8020ac0:	d1d6      	bne.n	8020a70 <__cmpdf2+0x1c>
 8020ac2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8020ac6:	d0d3      	beq.n	8020a70 <__cmpdf2+0x1c>
 8020ac8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8020acc:	4770      	bx	lr
 8020ace:	bf00      	nop

08020ad0 <__aeabi_cdrcmple>:
 8020ad0:	4684      	mov	ip, r0
 8020ad2:	4610      	mov	r0, r2
 8020ad4:	4662      	mov	r2, ip
 8020ad6:	468c      	mov	ip, r1
 8020ad8:	4619      	mov	r1, r3
 8020ada:	4663      	mov	r3, ip
 8020adc:	e000      	b.n	8020ae0 <__aeabi_cdcmpeq>
 8020ade:	bf00      	nop

08020ae0 <__aeabi_cdcmpeq>:
 8020ae0:	b501      	push	{r0, lr}
 8020ae2:	f7ff ffb7 	bl	8020a54 <__cmpdf2>
 8020ae6:	2800      	cmp	r0, #0
 8020ae8:	bf48      	it	mi
 8020aea:	f110 0f00 	cmnmi.w	r0, #0
 8020aee:	bd01      	pop	{r0, pc}

08020af0 <__aeabi_dcmpeq>:
 8020af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8020af4:	f7ff fff4 	bl	8020ae0 <__aeabi_cdcmpeq>
 8020af8:	bf0c      	ite	eq
 8020afa:	2001      	moveq	r0, #1
 8020afc:	2000      	movne	r0, #0
 8020afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8020b02:	bf00      	nop

08020b04 <__aeabi_dcmplt>:
 8020b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8020b08:	f7ff ffea 	bl	8020ae0 <__aeabi_cdcmpeq>
 8020b0c:	bf34      	ite	cc
 8020b0e:	2001      	movcc	r0, #1
 8020b10:	2000      	movcs	r0, #0
 8020b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8020b16:	bf00      	nop

08020b18 <__aeabi_dcmple>:
 8020b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8020b1c:	f7ff ffe0 	bl	8020ae0 <__aeabi_cdcmpeq>
 8020b20:	bf94      	ite	ls
 8020b22:	2001      	movls	r0, #1
 8020b24:	2000      	movhi	r0, #0
 8020b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8020b2a:	bf00      	nop

08020b2c <__aeabi_dcmpge>:
 8020b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8020b30:	f7ff ffce 	bl	8020ad0 <__aeabi_cdrcmple>
 8020b34:	bf94      	ite	ls
 8020b36:	2001      	movls	r0, #1
 8020b38:	2000      	movhi	r0, #0
 8020b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8020b3e:	bf00      	nop

08020b40 <__aeabi_dcmpgt>:
 8020b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8020b44:	f7ff ffc4 	bl	8020ad0 <__aeabi_cdrcmple>
 8020b48:	bf34      	ite	cc
 8020b4a:	2001      	movcc	r0, #1
 8020b4c:	2000      	movcs	r0, #0
 8020b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8020b52:	bf00      	nop

08020b54 <__aeabi_dcmpun>:
 8020b54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8020b58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8020b5c:	d102      	bne.n	8020b64 <__aeabi_dcmpun+0x10>
 8020b5e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8020b62:	d10a      	bne.n	8020b7a <__aeabi_dcmpun+0x26>
 8020b64:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8020b68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8020b6c:	d102      	bne.n	8020b74 <__aeabi_dcmpun+0x20>
 8020b6e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8020b72:	d102      	bne.n	8020b7a <__aeabi_dcmpun+0x26>
 8020b74:	f04f 0000 	mov.w	r0, #0
 8020b78:	4770      	bx	lr
 8020b7a:	f04f 0001 	mov.w	r0, #1
 8020b7e:	4770      	bx	lr

08020b80 <__aeabi_d2iz>:
 8020b80:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8020b84:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8020b88:	d215      	bcs.n	8020bb6 <__aeabi_d2iz+0x36>
 8020b8a:	d511      	bpl.n	8020bb0 <__aeabi_d2iz+0x30>
 8020b8c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8020b90:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8020b94:	d912      	bls.n	8020bbc <__aeabi_d2iz+0x3c>
 8020b96:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8020b9a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8020b9e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8020ba2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8020ba6:	fa23 f002 	lsr.w	r0, r3, r2
 8020baa:	bf18      	it	ne
 8020bac:	4240      	negne	r0, r0
 8020bae:	4770      	bx	lr
 8020bb0:	f04f 0000 	mov.w	r0, #0
 8020bb4:	4770      	bx	lr
 8020bb6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8020bba:	d105      	bne.n	8020bc8 <__aeabi_d2iz+0x48>
 8020bbc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8020bc0:	bf08      	it	eq
 8020bc2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8020bc6:	4770      	bx	lr
 8020bc8:	f04f 0000 	mov.w	r0, #0
 8020bcc:	4770      	bx	lr
 8020bce:	bf00      	nop

08020bd0 <__aeabi_d2f>:
 8020bd0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8020bd4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8020bd8:	bf24      	itt	cs
 8020bda:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8020bde:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8020be2:	d90d      	bls.n	8020c00 <__aeabi_d2f+0x30>
 8020be4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8020be8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8020bec:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8020bf0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8020bf4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8020bf8:	bf08      	it	eq
 8020bfa:	f020 0001 	biceq.w	r0, r0, #1
 8020bfe:	4770      	bx	lr
 8020c00:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8020c04:	d121      	bne.n	8020c4a <__aeabi_d2f+0x7a>
 8020c06:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8020c0a:	bfbc      	itt	lt
 8020c0c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8020c10:	4770      	bxlt	lr
 8020c12:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8020c16:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8020c1a:	f1c2 0218 	rsb	r2, r2, #24
 8020c1e:	f1c2 0c20 	rsb	ip, r2, #32
 8020c22:	fa10 f30c 	lsls.w	r3, r0, ip
 8020c26:	fa20 f002 	lsr.w	r0, r0, r2
 8020c2a:	bf18      	it	ne
 8020c2c:	f040 0001 	orrne.w	r0, r0, #1
 8020c30:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8020c34:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8020c38:	fa03 fc0c 	lsl.w	ip, r3, ip
 8020c3c:	ea40 000c 	orr.w	r0, r0, ip
 8020c40:	fa23 f302 	lsr.w	r3, r3, r2
 8020c44:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8020c48:	e7cc      	b.n	8020be4 <__aeabi_d2f+0x14>
 8020c4a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8020c4e:	d107      	bne.n	8020c60 <__aeabi_d2f+0x90>
 8020c50:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8020c54:	bf1e      	ittt	ne
 8020c56:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8020c5a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8020c5e:	4770      	bxne	lr
 8020c60:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8020c64:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8020c68:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8020c6c:	4770      	bx	lr
 8020c6e:	bf00      	nop

08020c70 <__aeabi_uldivmod>:
 8020c70:	b953      	cbnz	r3, 8020c88 <__aeabi_uldivmod+0x18>
 8020c72:	b94a      	cbnz	r2, 8020c88 <__aeabi_uldivmod+0x18>
 8020c74:	2900      	cmp	r1, #0
 8020c76:	bf08      	it	eq
 8020c78:	2800      	cmpeq	r0, #0
 8020c7a:	bf1c      	itt	ne
 8020c7c:	f04f 31ff 	movne.w	r1, #4294967295
 8020c80:	f04f 30ff 	movne.w	r0, #4294967295
 8020c84:	f000 b97a 	b.w	8020f7c <__aeabi_idiv0>
 8020c88:	f1ad 0c08 	sub.w	ip, sp, #8
 8020c8c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8020c90:	f000 f806 	bl	8020ca0 <__udivmoddi4>
 8020c94:	f8dd e004 	ldr.w	lr, [sp, #4]
 8020c98:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8020c9c:	b004      	add	sp, #16
 8020c9e:	4770      	bx	lr

08020ca0 <__udivmoddi4>:
 8020ca0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020ca4:	468c      	mov	ip, r1
 8020ca6:	460d      	mov	r5, r1
 8020ca8:	4604      	mov	r4, r0
 8020caa:	9e08      	ldr	r6, [sp, #32]
 8020cac:	2b00      	cmp	r3, #0
 8020cae:	d151      	bne.n	8020d54 <__udivmoddi4+0xb4>
 8020cb0:	428a      	cmp	r2, r1
 8020cb2:	4617      	mov	r7, r2
 8020cb4:	d96d      	bls.n	8020d92 <__udivmoddi4+0xf2>
 8020cb6:	fab2 fe82 	clz	lr, r2
 8020cba:	f1be 0f00 	cmp.w	lr, #0
 8020cbe:	d00b      	beq.n	8020cd8 <__udivmoddi4+0x38>
 8020cc0:	f1ce 0c20 	rsb	ip, lr, #32
 8020cc4:	fa01 f50e 	lsl.w	r5, r1, lr
 8020cc8:	fa20 fc0c 	lsr.w	ip, r0, ip
 8020ccc:	fa02 f70e 	lsl.w	r7, r2, lr
 8020cd0:	ea4c 0c05 	orr.w	ip, ip, r5
 8020cd4:	fa00 f40e 	lsl.w	r4, r0, lr
 8020cd8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8020cdc:	0c25      	lsrs	r5, r4, #16
 8020cde:	fbbc f8fa 	udiv	r8, ip, sl
 8020ce2:	fa1f f987 	uxth.w	r9, r7
 8020ce6:	fb0a cc18 	mls	ip, sl, r8, ip
 8020cea:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8020cee:	fb08 f309 	mul.w	r3, r8, r9
 8020cf2:	42ab      	cmp	r3, r5
 8020cf4:	d90a      	bls.n	8020d0c <__udivmoddi4+0x6c>
 8020cf6:	19ed      	adds	r5, r5, r7
 8020cf8:	f108 32ff 	add.w	r2, r8, #4294967295
 8020cfc:	f080 8123 	bcs.w	8020f46 <__udivmoddi4+0x2a6>
 8020d00:	42ab      	cmp	r3, r5
 8020d02:	f240 8120 	bls.w	8020f46 <__udivmoddi4+0x2a6>
 8020d06:	f1a8 0802 	sub.w	r8, r8, #2
 8020d0a:	443d      	add	r5, r7
 8020d0c:	1aed      	subs	r5, r5, r3
 8020d0e:	b2a4      	uxth	r4, r4
 8020d10:	fbb5 f0fa 	udiv	r0, r5, sl
 8020d14:	fb0a 5510 	mls	r5, sl, r0, r5
 8020d18:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8020d1c:	fb00 f909 	mul.w	r9, r0, r9
 8020d20:	45a1      	cmp	r9, r4
 8020d22:	d909      	bls.n	8020d38 <__udivmoddi4+0x98>
 8020d24:	19e4      	adds	r4, r4, r7
 8020d26:	f100 33ff 	add.w	r3, r0, #4294967295
 8020d2a:	f080 810a 	bcs.w	8020f42 <__udivmoddi4+0x2a2>
 8020d2e:	45a1      	cmp	r9, r4
 8020d30:	f240 8107 	bls.w	8020f42 <__udivmoddi4+0x2a2>
 8020d34:	3802      	subs	r0, #2
 8020d36:	443c      	add	r4, r7
 8020d38:	eba4 0409 	sub.w	r4, r4, r9
 8020d3c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8020d40:	2100      	movs	r1, #0
 8020d42:	2e00      	cmp	r6, #0
 8020d44:	d061      	beq.n	8020e0a <__udivmoddi4+0x16a>
 8020d46:	fa24 f40e 	lsr.w	r4, r4, lr
 8020d4a:	2300      	movs	r3, #0
 8020d4c:	6034      	str	r4, [r6, #0]
 8020d4e:	6073      	str	r3, [r6, #4]
 8020d50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020d54:	428b      	cmp	r3, r1
 8020d56:	d907      	bls.n	8020d68 <__udivmoddi4+0xc8>
 8020d58:	2e00      	cmp	r6, #0
 8020d5a:	d054      	beq.n	8020e06 <__udivmoddi4+0x166>
 8020d5c:	2100      	movs	r1, #0
 8020d5e:	e886 0021 	stmia.w	r6, {r0, r5}
 8020d62:	4608      	mov	r0, r1
 8020d64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020d68:	fab3 f183 	clz	r1, r3
 8020d6c:	2900      	cmp	r1, #0
 8020d6e:	f040 808e 	bne.w	8020e8e <__udivmoddi4+0x1ee>
 8020d72:	42ab      	cmp	r3, r5
 8020d74:	d302      	bcc.n	8020d7c <__udivmoddi4+0xdc>
 8020d76:	4282      	cmp	r2, r0
 8020d78:	f200 80fa 	bhi.w	8020f70 <__udivmoddi4+0x2d0>
 8020d7c:	1a84      	subs	r4, r0, r2
 8020d7e:	eb65 0503 	sbc.w	r5, r5, r3
 8020d82:	2001      	movs	r0, #1
 8020d84:	46ac      	mov	ip, r5
 8020d86:	2e00      	cmp	r6, #0
 8020d88:	d03f      	beq.n	8020e0a <__udivmoddi4+0x16a>
 8020d8a:	e886 1010 	stmia.w	r6, {r4, ip}
 8020d8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020d92:	b912      	cbnz	r2, 8020d9a <__udivmoddi4+0xfa>
 8020d94:	2701      	movs	r7, #1
 8020d96:	fbb7 f7f2 	udiv	r7, r7, r2
 8020d9a:	fab7 fe87 	clz	lr, r7
 8020d9e:	f1be 0f00 	cmp.w	lr, #0
 8020da2:	d134      	bne.n	8020e0e <__udivmoddi4+0x16e>
 8020da4:	1beb      	subs	r3, r5, r7
 8020da6:	0c3a      	lsrs	r2, r7, #16
 8020da8:	fa1f fc87 	uxth.w	ip, r7
 8020dac:	2101      	movs	r1, #1
 8020dae:	fbb3 f8f2 	udiv	r8, r3, r2
 8020db2:	0c25      	lsrs	r5, r4, #16
 8020db4:	fb02 3318 	mls	r3, r2, r8, r3
 8020db8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8020dbc:	fb0c f308 	mul.w	r3, ip, r8
 8020dc0:	42ab      	cmp	r3, r5
 8020dc2:	d907      	bls.n	8020dd4 <__udivmoddi4+0x134>
 8020dc4:	19ed      	adds	r5, r5, r7
 8020dc6:	f108 30ff 	add.w	r0, r8, #4294967295
 8020dca:	d202      	bcs.n	8020dd2 <__udivmoddi4+0x132>
 8020dcc:	42ab      	cmp	r3, r5
 8020dce:	f200 80d1 	bhi.w	8020f74 <__udivmoddi4+0x2d4>
 8020dd2:	4680      	mov	r8, r0
 8020dd4:	1aed      	subs	r5, r5, r3
 8020dd6:	b2a3      	uxth	r3, r4
 8020dd8:	fbb5 f0f2 	udiv	r0, r5, r2
 8020ddc:	fb02 5510 	mls	r5, r2, r0, r5
 8020de0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8020de4:	fb0c fc00 	mul.w	ip, ip, r0
 8020de8:	45a4      	cmp	ip, r4
 8020dea:	d907      	bls.n	8020dfc <__udivmoddi4+0x15c>
 8020dec:	19e4      	adds	r4, r4, r7
 8020dee:	f100 33ff 	add.w	r3, r0, #4294967295
 8020df2:	d202      	bcs.n	8020dfa <__udivmoddi4+0x15a>
 8020df4:	45a4      	cmp	ip, r4
 8020df6:	f200 80b8 	bhi.w	8020f6a <__udivmoddi4+0x2ca>
 8020dfa:	4618      	mov	r0, r3
 8020dfc:	eba4 040c 	sub.w	r4, r4, ip
 8020e00:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8020e04:	e79d      	b.n	8020d42 <__udivmoddi4+0xa2>
 8020e06:	4631      	mov	r1, r6
 8020e08:	4630      	mov	r0, r6
 8020e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020e0e:	f1ce 0420 	rsb	r4, lr, #32
 8020e12:	fa05 f30e 	lsl.w	r3, r5, lr
 8020e16:	fa07 f70e 	lsl.w	r7, r7, lr
 8020e1a:	fa20 f804 	lsr.w	r8, r0, r4
 8020e1e:	0c3a      	lsrs	r2, r7, #16
 8020e20:	fa25 f404 	lsr.w	r4, r5, r4
 8020e24:	ea48 0803 	orr.w	r8, r8, r3
 8020e28:	fbb4 f1f2 	udiv	r1, r4, r2
 8020e2c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8020e30:	fb02 4411 	mls	r4, r2, r1, r4
 8020e34:	fa1f fc87 	uxth.w	ip, r7
 8020e38:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8020e3c:	fb01 f30c 	mul.w	r3, r1, ip
 8020e40:	42ab      	cmp	r3, r5
 8020e42:	fa00 f40e 	lsl.w	r4, r0, lr
 8020e46:	d909      	bls.n	8020e5c <__udivmoddi4+0x1bc>
 8020e48:	19ed      	adds	r5, r5, r7
 8020e4a:	f101 30ff 	add.w	r0, r1, #4294967295
 8020e4e:	f080 808a 	bcs.w	8020f66 <__udivmoddi4+0x2c6>
 8020e52:	42ab      	cmp	r3, r5
 8020e54:	f240 8087 	bls.w	8020f66 <__udivmoddi4+0x2c6>
 8020e58:	3902      	subs	r1, #2
 8020e5a:	443d      	add	r5, r7
 8020e5c:	1aeb      	subs	r3, r5, r3
 8020e5e:	fa1f f588 	uxth.w	r5, r8
 8020e62:	fbb3 f0f2 	udiv	r0, r3, r2
 8020e66:	fb02 3310 	mls	r3, r2, r0, r3
 8020e6a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8020e6e:	fb00 f30c 	mul.w	r3, r0, ip
 8020e72:	42ab      	cmp	r3, r5
 8020e74:	d907      	bls.n	8020e86 <__udivmoddi4+0x1e6>
 8020e76:	19ed      	adds	r5, r5, r7
 8020e78:	f100 38ff 	add.w	r8, r0, #4294967295
 8020e7c:	d26f      	bcs.n	8020f5e <__udivmoddi4+0x2be>
 8020e7e:	42ab      	cmp	r3, r5
 8020e80:	d96d      	bls.n	8020f5e <__udivmoddi4+0x2be>
 8020e82:	3802      	subs	r0, #2
 8020e84:	443d      	add	r5, r7
 8020e86:	1aeb      	subs	r3, r5, r3
 8020e88:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8020e8c:	e78f      	b.n	8020dae <__udivmoddi4+0x10e>
 8020e8e:	f1c1 0720 	rsb	r7, r1, #32
 8020e92:	fa22 f807 	lsr.w	r8, r2, r7
 8020e96:	408b      	lsls	r3, r1
 8020e98:	fa05 f401 	lsl.w	r4, r5, r1
 8020e9c:	ea48 0303 	orr.w	r3, r8, r3
 8020ea0:	fa20 fe07 	lsr.w	lr, r0, r7
 8020ea4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8020ea8:	40fd      	lsrs	r5, r7
 8020eaa:	ea4e 0e04 	orr.w	lr, lr, r4
 8020eae:	fbb5 f9fc 	udiv	r9, r5, ip
 8020eb2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8020eb6:	fb0c 5519 	mls	r5, ip, r9, r5
 8020eba:	fa1f f883 	uxth.w	r8, r3
 8020ebe:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8020ec2:	fb09 f408 	mul.w	r4, r9, r8
 8020ec6:	42ac      	cmp	r4, r5
 8020ec8:	fa02 f201 	lsl.w	r2, r2, r1
 8020ecc:	fa00 fa01 	lsl.w	sl, r0, r1
 8020ed0:	d908      	bls.n	8020ee4 <__udivmoddi4+0x244>
 8020ed2:	18ed      	adds	r5, r5, r3
 8020ed4:	f109 30ff 	add.w	r0, r9, #4294967295
 8020ed8:	d243      	bcs.n	8020f62 <__udivmoddi4+0x2c2>
 8020eda:	42ac      	cmp	r4, r5
 8020edc:	d941      	bls.n	8020f62 <__udivmoddi4+0x2c2>
 8020ede:	f1a9 0902 	sub.w	r9, r9, #2
 8020ee2:	441d      	add	r5, r3
 8020ee4:	1b2d      	subs	r5, r5, r4
 8020ee6:	fa1f fe8e 	uxth.w	lr, lr
 8020eea:	fbb5 f0fc 	udiv	r0, r5, ip
 8020eee:	fb0c 5510 	mls	r5, ip, r0, r5
 8020ef2:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8020ef6:	fb00 f808 	mul.w	r8, r0, r8
 8020efa:	45a0      	cmp	r8, r4
 8020efc:	d907      	bls.n	8020f0e <__udivmoddi4+0x26e>
 8020efe:	18e4      	adds	r4, r4, r3
 8020f00:	f100 35ff 	add.w	r5, r0, #4294967295
 8020f04:	d229      	bcs.n	8020f5a <__udivmoddi4+0x2ba>
 8020f06:	45a0      	cmp	r8, r4
 8020f08:	d927      	bls.n	8020f5a <__udivmoddi4+0x2ba>
 8020f0a:	3802      	subs	r0, #2
 8020f0c:	441c      	add	r4, r3
 8020f0e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8020f12:	eba4 0408 	sub.w	r4, r4, r8
 8020f16:	fba0 8902 	umull	r8, r9, r0, r2
 8020f1a:	454c      	cmp	r4, r9
 8020f1c:	46c6      	mov	lr, r8
 8020f1e:	464d      	mov	r5, r9
 8020f20:	d315      	bcc.n	8020f4e <__udivmoddi4+0x2ae>
 8020f22:	d012      	beq.n	8020f4a <__udivmoddi4+0x2aa>
 8020f24:	b156      	cbz	r6, 8020f3c <__udivmoddi4+0x29c>
 8020f26:	ebba 030e 	subs.w	r3, sl, lr
 8020f2a:	eb64 0405 	sbc.w	r4, r4, r5
 8020f2e:	fa04 f707 	lsl.w	r7, r4, r7
 8020f32:	40cb      	lsrs	r3, r1
 8020f34:	431f      	orrs	r7, r3
 8020f36:	40cc      	lsrs	r4, r1
 8020f38:	6037      	str	r7, [r6, #0]
 8020f3a:	6074      	str	r4, [r6, #4]
 8020f3c:	2100      	movs	r1, #0
 8020f3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020f42:	4618      	mov	r0, r3
 8020f44:	e6f8      	b.n	8020d38 <__udivmoddi4+0x98>
 8020f46:	4690      	mov	r8, r2
 8020f48:	e6e0      	b.n	8020d0c <__udivmoddi4+0x6c>
 8020f4a:	45c2      	cmp	sl, r8
 8020f4c:	d2ea      	bcs.n	8020f24 <__udivmoddi4+0x284>
 8020f4e:	ebb8 0e02 	subs.w	lr, r8, r2
 8020f52:	eb69 0503 	sbc.w	r5, r9, r3
 8020f56:	3801      	subs	r0, #1
 8020f58:	e7e4      	b.n	8020f24 <__udivmoddi4+0x284>
 8020f5a:	4628      	mov	r0, r5
 8020f5c:	e7d7      	b.n	8020f0e <__udivmoddi4+0x26e>
 8020f5e:	4640      	mov	r0, r8
 8020f60:	e791      	b.n	8020e86 <__udivmoddi4+0x1e6>
 8020f62:	4681      	mov	r9, r0
 8020f64:	e7be      	b.n	8020ee4 <__udivmoddi4+0x244>
 8020f66:	4601      	mov	r1, r0
 8020f68:	e778      	b.n	8020e5c <__udivmoddi4+0x1bc>
 8020f6a:	3802      	subs	r0, #2
 8020f6c:	443c      	add	r4, r7
 8020f6e:	e745      	b.n	8020dfc <__udivmoddi4+0x15c>
 8020f70:	4608      	mov	r0, r1
 8020f72:	e708      	b.n	8020d86 <__udivmoddi4+0xe6>
 8020f74:	f1a8 0802 	sub.w	r8, r8, #2
 8020f78:	443d      	add	r5, r7
 8020f7a:	e72b      	b.n	8020dd4 <__udivmoddi4+0x134>

08020f7c <__aeabi_idiv0>:
 8020f7c:	4770      	bx	lr
 8020f7e:	bf00      	nop

08020f80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8020f80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8020fb8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8020f84:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8020f86:	e003      	b.n	8020f90 <LoopCopyDataInit>

08020f88 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8020f88:	4b0c      	ldr	r3, [pc, #48]	; (8020fbc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8020f8a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8020f8c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8020f8e:	3104      	adds	r1, #4

08020f90 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8020f90:	480b      	ldr	r0, [pc, #44]	; (8020fc0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8020f92:	4b0c      	ldr	r3, [pc, #48]	; (8020fc4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8020f94:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8020f96:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8020f98:	d3f6      	bcc.n	8020f88 <CopyDataInit>
  ldr  r2, =_sbss
 8020f9a:	4a0b      	ldr	r2, [pc, #44]	; (8020fc8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8020f9c:	e002      	b.n	8020fa4 <LoopFillZerobss>

08020f9e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8020f9e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8020fa0:	f842 3b04 	str.w	r3, [r2], #4

08020fa4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8020fa4:	4b09      	ldr	r3, [pc, #36]	; (8020fcc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8020fa6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8020fa8:	d3f9      	bcc.n	8020f9e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8020faa:	f002 fc43 	bl	8023834 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8020fae:	f004 facd 	bl	802554c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8020fb2:	f002 f965 	bl	8023280 <main>
  bx  lr    
 8020fb6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8020fb8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8020fbc:	08028834 	.word	0x08028834
  ldr  r0, =_sdata
 8020fc0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8020fc4:	200001fc 	.word	0x200001fc
  ldr  r2, =_sbss
 8020fc8:	200001fc 	.word	0x200001fc
  ldr  r3, = _ebss
 8020fcc:	20000a14 	.word	0x20000a14

08020fd0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8020fd0:	e7fe      	b.n	8020fd0 <ADC_IRQHandler>
	...

08020fd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8020fd4:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8020fd6:	4a0e      	ldr	r2, [pc, #56]	; (8021010 <HAL_InitTick+0x3c>)
 8020fd8:	4b0e      	ldr	r3, [pc, #56]	; (8021014 <HAL_InitTick+0x40>)
 8020fda:	7812      	ldrb	r2, [r2, #0]
 8020fdc:	681b      	ldr	r3, [r3, #0]
{
 8020fde:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8020fe0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8020fe4:	fbb0 f0f2 	udiv	r0, r0, r2
 8020fe8:	fbb3 f0f0 	udiv	r0, r3, r0
 8020fec:	f000 fb64 	bl	80216b8 <HAL_SYSTICK_Config>
 8020ff0:	b908      	cbnz	r0, 8020ff6 <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8020ff2:	2d0f      	cmp	r5, #15
 8020ff4:	d901      	bls.n	8020ffa <HAL_InitTick+0x26>
    return HAL_ERROR;
 8020ff6:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8020ff8:	bd38      	pop	{r3, r4, r5, pc}
 8020ffa:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8020ffc:	4602      	mov	r2, r0
 8020ffe:	4629      	mov	r1, r5
 8021000:	f04f 30ff 	mov.w	r0, #4294967295
 8021004:	f000 fb00 	bl	8021608 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8021008:	4b03      	ldr	r3, [pc, #12]	; (8021018 <HAL_InitTick+0x44>)
 802100a:	4620      	mov	r0, r4
 802100c:	601d      	str	r5, [r3, #0]
 802100e:	bd38      	pop	{r3, r4, r5, pc}
 8021010:	20000000 	.word	0x20000000
 8021014:	20000008 	.word	0x20000008
 8021018:	20000004 	.word	0x20000004

0802101c <HAL_Init>:
{
 802101c:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 802101e:	4b0b      	ldr	r3, [pc, #44]	; (802104c <HAL_Init+0x30>)
 8021020:	681a      	ldr	r2, [r3, #0]
 8021022:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8021026:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8021028:	681a      	ldr	r2, [r3, #0]
 802102a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 802102e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8021030:	681a      	ldr	r2, [r3, #0]
 8021032:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8021036:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8021038:	2003      	movs	r0, #3
 802103a:	f000 fad3 	bl	80215e4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 802103e:	2000      	movs	r0, #0
 8021040:	f7ff ffc8 	bl	8020fd4 <HAL_InitTick>
  HAL_MspInit();
 8021044:	f002 fc54 	bl	80238f0 <HAL_MspInit>
}
 8021048:	2000      	movs	r0, #0
 802104a:	bd08      	pop	{r3, pc}
 802104c:	40023c00 	.word	0x40023c00

08021050 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8021050:	4a03      	ldr	r2, [pc, #12]	; (8021060 <HAL_IncTick+0x10>)
 8021052:	4b04      	ldr	r3, [pc, #16]	; (8021064 <HAL_IncTick+0x14>)
 8021054:	6811      	ldr	r1, [r2, #0]
 8021056:	781b      	ldrb	r3, [r3, #0]
 8021058:	440b      	add	r3, r1
 802105a:	6013      	str	r3, [r2, #0]
 802105c:	4770      	bx	lr
 802105e:	bf00      	nop
 8021060:	20000530 	.word	0x20000530
 8021064:	20000000 	.word	0x20000000

08021068 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8021068:	4b01      	ldr	r3, [pc, #4]	; (8021070 <HAL_GetTick+0x8>)
 802106a:	6818      	ldr	r0, [r3, #0]
}
 802106c:	4770      	bx	lr
 802106e:	bf00      	nop
 8021070:	20000530 	.word	0x20000530

08021074 <HAL_ADC_Init>:
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8021074:	2800      	cmp	r0, #0
 8021076:	f000 80a6 	beq.w	80211c6 <HAL_ADC_Init+0x152>
{
 802107a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 802107c:	6c05      	ldr	r5, [r0, #64]	; 0x40
 802107e:	4604      	mov	r4, r0
 8021080:	b13d      	cbz	r5, 8021092 <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8021082:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8021084:	06db      	lsls	r3, r3, #27
 8021086:	d50c      	bpl.n	80210a2 <HAL_ADC_Init+0x2e>
  {
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8021088:	2300      	movs	r3, #0
    tmp_hal_status = HAL_ERROR;
 802108a:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 802108c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8021090:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    HAL_ADC_MspInit(hadc);
 8021092:	f002 fc49 	bl	8023928 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8021096:	6465      	str	r5, [r4, #68]	; 0x44
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8021098:	6c23      	ldr	r3, [r4, #64]	; 0x40
    hadc->Lock = HAL_UNLOCKED;
 802109a:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 802109e:	06db      	lsls	r3, r3, #27
 80210a0:	d4f2      	bmi.n	8021088 <HAL_ADC_Init+0x14>
    ADC_STATE_CLR_SET(hadc->State,
 80210a2:	6c22      	ldr	r2, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80210a4:	4949      	ldr	r1, [pc, #292]	; (80211cc <HAL_ADC_Init+0x158>)
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80210a6:	6823      	ldr	r3, [r4, #0]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80210a8:	4d49      	ldr	r5, [pc, #292]	; (80211d0 <HAL_ADC_Init+0x15c>)
    ADC_STATE_CLR_SET(hadc->State,
 80210aa:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 80210ae:	f022 0202 	bic.w	r2, r2, #2
 80210b2:	f042 0202 	orr.w	r2, r2, #2
 80210b6:	6422      	str	r2, [r4, #64]	; 0x40
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80210b8:	684a      	ldr	r2, [r1, #4]
 80210ba:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80210be:	604a      	str	r2, [r1, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80210c0:	684a      	ldr	r2, [r1, #4]
 80210c2:	6860      	ldr	r0, [r4, #4]
 80210c4:	4302      	orrs	r2, r0
 80210c6:	604a      	str	r2, [r1, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80210c8:	6859      	ldr	r1, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80210ca:	6920      	ldr	r0, [r4, #16]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80210cc:	f8d4 e008 	ldr.w	lr, [r4, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80210d0:	68e7      	ldr	r7, [r4, #12]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80210d2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80210d4:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 80210d8:	6059      	str	r1, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80210da:	685e      	ldr	r6, [r3, #4]
 80210dc:	ea46 2600 	orr.w	r6, r6, r0, lsl #8
 80210e0:	605e      	str	r6, [r3, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80210e2:	685e      	ldr	r6, [r3, #4]
 80210e4:	f026 7640 	bic.w	r6, r6, #50331648	; 0x3000000
 80210e8:	605e      	str	r6, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80210ea:	6858      	ldr	r0, [r3, #4]
 80210ec:	ea40 000e 	orr.w	r0, r0, lr
 80210f0:	6058      	str	r0, [r3, #4]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80210f2:	6898      	ldr	r0, [r3, #8]
 80210f4:	f420 6000 	bic.w	r0, r0, #2048	; 0x800
 80210f8:	6098      	str	r0, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80210fa:	6899      	ldr	r1, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80210fc:	42aa      	cmp	r2, r5
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80210fe:	ea41 0107 	orr.w	r1, r1, r7
 8021102:	6099      	str	r1, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8021104:	d048      	beq.n	8021198 <HAL_ADC_Init+0x124>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8021106:	6899      	ldr	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8021108:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 802110a:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 802110e:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8021110:	6899      	ldr	r1, [r3, #8]
 8021112:	430a      	orrs	r2, r1
 8021114:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8021116:	6899      	ldr	r1, [r3, #8]
 8021118:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
 802111c:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 802111e:	689a      	ldr	r2, [r3, #8]
 8021120:	4302      	orrs	r2, r0
 8021122:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8021124:	6899      	ldr	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8021126:	7e25      	ldrb	r5, [r4, #24]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8021128:	f894 0020 	ldrb.w	r0, [r4, #32]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 802112c:	f021 0102 	bic.w	r1, r1, #2
 8021130:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8021132:	689a      	ldr	r2, [r3, #8]
 8021134:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
 8021138:	609a      	str	r2, [r3, #8]
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 802113a:	685a      	ldr	r2, [r3, #4]
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 802113c:	2800      	cmp	r0, #0
 802113e:	d134      	bne.n	80211aa <HAL_ADC_Init+0x136>
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8021140:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8021144:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8021146:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8021148:	69e5      	ldr	r5, [r4, #28]
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 802114a:	f894 7030 	ldrb.w	r7, [r4, #48]	; 0x30
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 802114e:	6966      	ldr	r6, [r4, #20]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8021150:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8021154:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8021156:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8021158:	3d01      	subs	r5, #1
 802115a:	ea40 5005 	orr.w	r0, r0, r5, lsl #20
 802115e:	62d8      	str	r0, [r3, #44]	; 0x2c
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8021160:	6898      	ldr	r0, [r3, #8]
 8021162:	f420 7000 	bic.w	r0, r0, #512	; 0x200
 8021166:	6098      	str	r0, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8021168:	6899      	ldr	r1, [r3, #8]
 802116a:	ea41 2147 	orr.w	r1, r1, r7, lsl #9
 802116e:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8021170:	6899      	ldr	r1, [r3, #8]
 8021172:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8021176:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8021178:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 802117a:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 802117c:	ea42 2286 	orr.w	r2, r2, r6, lsl #10
 8021180:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8021182:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8021184:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8021186:	f023 0303 	bic.w	r3, r3, #3
 802118a:	f043 0301 	orr.w	r3, r3, #1
 802118e:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8021190:	2300      	movs	r3, #0
 8021192:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  return tmp_hal_status;
 8021196:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8021198:	689a      	ldr	r2, [r3, #8]
 802119a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 802119e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80211a0:	689a      	ldr	r2, [r3, #8]
 80211a2:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80211a6:	609a      	str	r2, [r3, #8]
 80211a8:	e7bc      	b.n	8021124 <HAL_ADC_Init+0xb0>
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80211aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80211ae:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80211b0:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80211b2:	685a      	ldr	r2, [r3, #4]
 80211b4:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80211b8:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80211ba:	685a      	ldr	r2, [r3, #4]
 80211bc:	3901      	subs	r1, #1
 80211be:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 80211c2:	605a      	str	r2, [r3, #4]
 80211c4:	e7bf      	b.n	8021146 <HAL_ADC_Init+0xd2>
    return HAL_ERROR;
 80211c6:	2001      	movs	r0, #1
 80211c8:	4770      	bx	lr
 80211ca:	bf00      	nop
 80211cc:	40012300 	.word	0x40012300
 80211d0:	0f000001 	.word	0x0f000001

080211d4 <HAL_ADC_Start>:
{
 80211d4:	b410      	push	{r4}
  __HAL_LOCK(hadc);
 80211d6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80211da:	b083      	sub	sp, #12
  __IO uint32_t counter = 0U;
 80211dc:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 80211de:	2b01      	cmp	r3, #1
  __IO uint32_t counter = 0U;
 80211e0:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 80211e2:	d050      	beq.n	8021286 <HAL_ADC_Start+0xb2>
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80211e4:	6802      	ldr	r2, [r0, #0]
 80211e6:	6893      	ldr	r3, [r2, #8]
  __HAL_LOCK(hadc);
 80211e8:	2101      	movs	r1, #1
 80211ea:	f880 103c 	strb.w	r1, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80211ee:	07d9      	lsls	r1, r3, #31
 80211f0:	d414      	bmi.n	802121c <HAL_ADC_Start+0x48>
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80211f2:	4b32      	ldr	r3, [pc, #200]	; (80212bc <HAL_ADC_Start+0xe8>)
 80211f4:	4c32      	ldr	r4, [pc, #200]	; (80212c0 <HAL_ADC_Start+0xec>)
 80211f6:	681b      	ldr	r3, [r3, #0]
    __HAL_ADC_ENABLE(hadc);
 80211f8:	6891      	ldr	r1, [r2, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80211fa:	fba4 4303 	umull	r4, r3, r4, r3
 80211fe:	0c9b      	lsrs	r3, r3, #18
 8021200:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    __HAL_ADC_ENABLE(hadc);
 8021204:	f041 0101 	orr.w	r1, r1, #1
 8021208:	6091      	str	r1, [r2, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 802120a:	9301      	str	r3, [sp, #4]
    while(counter != 0U)
 802120c:	9b01      	ldr	r3, [sp, #4]
 802120e:	b12b      	cbz	r3, 802121c <HAL_ADC_Start+0x48>
      counter--;
 8021210:	9b01      	ldr	r3, [sp, #4]
 8021212:	3b01      	subs	r3, #1
 8021214:	9301      	str	r3, [sp, #4]
    while(counter != 0U)
 8021216:	9b01      	ldr	r3, [sp, #4]
 8021218:	2b00      	cmp	r3, #0
 802121a:	d1f9      	bne.n	8021210 <HAL_ADC_Start+0x3c>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 802121c:	6893      	ldr	r3, [r2, #8]
 802121e:	07db      	lsls	r3, r3, #31
 8021220:	d52c      	bpl.n	802127c <HAL_ADC_Start+0xa8>
    ADC_STATE_CLR_SET(hadc->State,
 8021222:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8021224:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8021228:	f023 0301 	bic.w	r3, r3, #1
 802122c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8021230:	6403      	str	r3, [r0, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8021232:	6853      	ldr	r3, [r2, #4]
 8021234:	055c      	lsls	r4, r3, #21
 8021236:	d505      	bpl.n	8021244 <HAL_ADC_Start+0x70>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8021238:	6c03      	ldr	r3, [r0, #64]	; 0x40
 802123a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 802123e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8021242:	6403      	str	r3, [r0, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8021244:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8021246:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 802124a:	bf1c      	itt	ne
 802124c:	6c43      	ldrne	r3, [r0, #68]	; 0x44
 802124e:	f023 0306 	bicne.w	r3, r3, #6
      ADC_CLEAR_ERRORCODE(hadc);
 8021252:	6443      	str	r3, [r0, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8021254:	f06f 0122 	mvn.w	r1, #34	; 0x22
    __HAL_UNLOCK(hadc);
 8021258:	2400      	movs	r4, #0
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 802125a:	4b1a      	ldr	r3, [pc, #104]	; (80212c4 <HAL_ADC_Start+0xf0>)
    __HAL_UNLOCK(hadc);
 802125c:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8021260:	6011      	str	r1, [r2, #0]
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8021262:	6859      	ldr	r1, [r3, #4]
 8021264:	06c9      	lsls	r1, r1, #27
 8021266:	d113      	bne.n	8021290 <HAL_ADC_Start+0xbc>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8021268:	4917      	ldr	r1, [pc, #92]	; (80212c8 <HAL_ADC_Start+0xf4>)
 802126a:	428a      	cmp	r2, r1
 802126c:	d013      	beq.n	8021296 <HAL_ADC_Start+0xc2>
 802126e:	f501 7180 	add.w	r1, r1, #256	; 0x100
 8021272:	428a      	cmp	r2, r1
 8021274:	d01e      	beq.n	80212b4 <HAL_ADC_Start+0xe0>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8021276:	4915      	ldr	r1, [pc, #84]	; (80212cc <HAL_ADC_Start+0xf8>)
 8021278:	428a      	cmp	r2, r1
 802127a:	d015      	beq.n	80212a8 <HAL_ADC_Start+0xd4>
  return HAL_OK;
 802127c:	2000      	movs	r0, #0
}
 802127e:	b003      	add	sp, #12
 8021280:	f85d 4b04 	ldr.w	r4, [sp], #4
 8021284:	4770      	bx	lr
  __HAL_LOCK(hadc);
 8021286:	2002      	movs	r0, #2
}
 8021288:	b003      	add	sp, #12
 802128a:	f85d 4b04 	ldr.w	r4, [sp], #4
 802128e:	4770      	bx	lr
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8021290:	4b0d      	ldr	r3, [pc, #52]	; (80212c8 <HAL_ADC_Start+0xf4>)
 8021292:	429a      	cmp	r2, r3
 8021294:	d1f2      	bne.n	802127c <HAL_ADC_Start+0xa8>
 8021296:	6890      	ldr	r0, [r2, #8]
 8021298:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 802129c:	d1ee      	bne.n	802127c <HAL_ADC_Start+0xa8>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 802129e:	6893      	ldr	r3, [r2, #8]
 80212a0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80212a4:	6093      	str	r3, [r2, #8]
 80212a6:	e7ea      	b.n	802127e <HAL_ADC_Start+0xaa>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80212a8:	685b      	ldr	r3, [r3, #4]
 80212aa:	f003 031f 	and.w	r3, r3, #31
 80212ae:	2b0f      	cmp	r3, #15
 80212b0:	d9f1      	bls.n	8021296 <HAL_ADC_Start+0xc2>
 80212b2:	e7e3      	b.n	802127c <HAL_ADC_Start+0xa8>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80212b4:	685b      	ldr	r3, [r3, #4]
 80212b6:	06db      	lsls	r3, r3, #27
 80212b8:	d0ed      	beq.n	8021296 <HAL_ADC_Start+0xc2>
 80212ba:	e7df      	b.n	802127c <HAL_ADC_Start+0xa8>
 80212bc:	20000008 	.word	0x20000008
 80212c0:	431bde83 	.word	0x431bde83
 80212c4:	40012300 	.word	0x40012300
 80212c8:	40012000 	.word	0x40012000
 80212cc:	40012200 	.word	0x40012200

080212d0 <HAL_ADC_Start_DMA>:
{
 80212d0:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hadc);
 80212d2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80212d6:	b083      	sub	sp, #12
  __IO uint32_t counter = 0U;
 80212d8:	2400      	movs	r4, #0
  __HAL_LOCK(hadc);
 80212da:	2b01      	cmp	r3, #1
  __IO uint32_t counter = 0U;
 80212dc:	9401      	str	r4, [sp, #4]
  __HAL_LOCK(hadc);
 80212de:	d067      	beq.n	80213b0 <HAL_ADC_Start_DMA+0xe0>
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80212e0:	6805      	ldr	r5, [r0, #0]
 80212e2:	68ab      	ldr	r3, [r5, #8]
  __HAL_LOCK(hadc);
 80212e4:	2401      	movs	r4, #1
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80212e6:	07df      	lsls	r7, r3, #31
  __HAL_LOCK(hadc);
 80212e8:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80212ec:	d414      	bmi.n	8021318 <HAL_ADC_Start_DMA+0x48>
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80212ee:	4b3d      	ldr	r3, [pc, #244]	; (80213e4 <HAL_ADC_Start_DMA+0x114>)
 80212f0:	4e3d      	ldr	r6, [pc, #244]	; (80213e8 <HAL_ADC_Start_DMA+0x118>)
 80212f2:	681c      	ldr	r4, [r3, #0]
    __HAL_ADC_ENABLE(hadc);
 80212f4:	68ab      	ldr	r3, [r5, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80212f6:	fba6 6404 	umull	r6, r4, r6, r4
 80212fa:	0ca4      	lsrs	r4, r4, #18
    __HAL_ADC_ENABLE(hadc);
 80212fc:	f043 0301 	orr.w	r3, r3, #1
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8021300:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    __HAL_ADC_ENABLE(hadc);
 8021304:	60ab      	str	r3, [r5, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8021306:	9401      	str	r4, [sp, #4]
    while(counter != 0U)
 8021308:	9b01      	ldr	r3, [sp, #4]
 802130a:	b12b      	cbz	r3, 8021318 <HAL_ADC_Start_DMA+0x48>
      counter--;
 802130c:	9c01      	ldr	r4, [sp, #4]
 802130e:	3c01      	subs	r4, #1
 8021310:	9401      	str	r4, [sp, #4]
    while(counter != 0U)
 8021312:	9c01      	ldr	r4, [sp, #4]
 8021314:	2c00      	cmp	r4, #0
 8021316:	d1f9      	bne.n	802130c <HAL_ADC_Start_DMA+0x3c>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8021318:	68ab      	ldr	r3, [r5, #8]
 802131a:	07de      	lsls	r6, r3, #31
 802131c:	d545      	bpl.n	80213aa <HAL_ADC_Start_DMA+0xda>
    ADC_STATE_CLR_SET(hadc->State,
 802131e:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8021320:	f424 64e0 	bic.w	r4, r4, #1792	; 0x700
 8021324:	f024 0401 	bic.w	r4, r4, #1
 8021328:	f444 7480 	orr.w	r4, r4, #256	; 0x100
 802132c:	6404      	str	r4, [r0, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 802132e:	686b      	ldr	r3, [r5, #4]
 8021330:	055c      	lsls	r4, r3, #21
 8021332:	d505      	bpl.n	8021340 <HAL_ADC_Start_DMA+0x70>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8021334:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8021336:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 802133a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 802133e:	6403      	str	r3, [r0, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8021340:	6c03      	ldr	r3, [r0, #64]	; 0x40
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8021342:	4c2a      	ldr	r4, [pc, #168]	; (80213ec <HAL_ADC_Start_DMA+0x11c>)
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8021344:	4f2a      	ldr	r7, [pc, #168]	; (80213f0 <HAL_ADC_Start_DMA+0x120>)
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8021346:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 802134a:	bf1c      	itt	ne
 802134c:	6c43      	ldrne	r3, [r0, #68]	; 0x44
 802134e:	f023 0306 	bicne.w	r3, r3, #6
      ADC_CLEAR_ERRORCODE(hadc);
 8021352:	6443      	str	r3, [r0, #68]	; 0x44
 8021354:	4606      	mov	r6, r0
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8021356:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8021358:	4613      	mov	r3, r2
    __HAL_UNLOCK(hadc);   
 802135a:	f04f 0e00 	mov.w	lr, #0
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 802135e:	4a25      	ldr	r2, [pc, #148]	; (80213f4 <HAL_ADC_Start_DMA+0x124>)
    __HAL_UNLOCK(hadc);   
 8021360:	f886 e03c 	strb.w	lr, [r6, #60]	; 0x3c
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8021364:	63c2      	str	r2, [r0, #60]	; 0x3c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8021366:	f06f 0222 	mvn.w	r2, #34	; 0x22
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 802136a:	64c4      	str	r4, [r0, #76]	; 0x4c
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 802136c:	6407      	str	r7, [r0, #64]	; 0x40
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 802136e:	602a      	str	r2, [r5, #0]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8021370:	686c      	ldr	r4, [r5, #4]
 8021372:	f044 6480 	orr.w	r4, r4, #67108864	; 0x4000000
 8021376:	606c      	str	r4, [r5, #4]
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8021378:	68ac      	ldr	r4, [r5, #8]
 802137a:	f444 7480 	orr.w	r4, r4, #256	; 0x100
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 802137e:	460a      	mov	r2, r1
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8021380:	60ac      	str	r4, [r5, #8]
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8021382:	f105 014c 	add.w	r1, r5, #76	; 0x4c
 8021386:	f000 fa5f 	bl	8021848 <HAL_DMA_Start_IT>
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 802138a:	4b1b      	ldr	r3, [pc, #108]	; (80213f8 <HAL_ADC_Start_DMA+0x128>)
 802138c:	685a      	ldr	r2, [r3, #4]
 802138e:	f012 0f1f 	tst.w	r2, #31
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8021392:	6832      	ldr	r2, [r6, #0]
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8021394:	d10f      	bne.n	80213b6 <HAL_ADC_Start_DMA+0xe6>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8021396:	4919      	ldr	r1, [pc, #100]	; (80213fc <HAL_ADC_Start_DMA+0x12c>)
 8021398:	428a      	cmp	r2, r1
 802139a:	d00f      	beq.n	80213bc <HAL_ADC_Start_DMA+0xec>
 802139c:	f501 7180 	add.w	r1, r1, #256	; 0x100
 80213a0:	428a      	cmp	r2, r1
 80213a2:	d01a      	beq.n	80213da <HAL_ADC_Start_DMA+0x10a>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80213a4:	4916      	ldr	r1, [pc, #88]	; (8021400 <HAL_ADC_Start_DMA+0x130>)
 80213a6:	428a      	cmp	r2, r1
 80213a8:	d011      	beq.n	80213ce <HAL_ADC_Start_DMA+0xfe>
  return HAL_OK;
 80213aa:	2000      	movs	r0, #0
}
 80213ac:	b003      	add	sp, #12
 80213ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(hadc);
 80213b0:	2002      	movs	r0, #2
}
 80213b2:	b003      	add	sp, #12
 80213b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80213b6:	4b11      	ldr	r3, [pc, #68]	; (80213fc <HAL_ADC_Start_DMA+0x12c>)
 80213b8:	429a      	cmp	r2, r3
 80213ba:	d1f6      	bne.n	80213aa <HAL_ADC_Start_DMA+0xda>
 80213bc:	6890      	ldr	r0, [r2, #8]
 80213be:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 80213c2:	d1f2      	bne.n	80213aa <HAL_ADC_Start_DMA+0xda>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80213c4:	6893      	ldr	r3, [r2, #8]
 80213c6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80213ca:	6093      	str	r3, [r2, #8]
 80213cc:	e7ee      	b.n	80213ac <HAL_ADC_Start_DMA+0xdc>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80213ce:	685b      	ldr	r3, [r3, #4]
 80213d0:	f003 031f 	and.w	r3, r3, #31
 80213d4:	2b0f      	cmp	r3, #15
 80213d6:	d9f1      	bls.n	80213bc <HAL_ADC_Start_DMA+0xec>
 80213d8:	e7e7      	b.n	80213aa <HAL_ADC_Start_DMA+0xda>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80213da:	685b      	ldr	r3, [r3, #4]
 80213dc:	06db      	lsls	r3, r3, #27
 80213de:	d0ed      	beq.n	80213bc <HAL_ADC_Start_DMA+0xec>
 80213e0:	e7e3      	b.n	80213aa <HAL_ADC_Start_DMA+0xda>
 80213e2:	bf00      	nop
 80213e4:	20000008 	.word	0x20000008
 80213e8:	431bde83 	.word	0x431bde83
 80213ec:	0802141d 	.word	0x0802141d
 80213f0:	0802140d 	.word	0x0802140d
 80213f4:	08021435 	.word	0x08021435
 80213f8:	40012300 	.word	0x40012300
 80213fc:	40012000 	.word	0x40012000
 8021400:	40012200 	.word	0x40012200

08021404 <HAL_ADC_ConvCpltCallback>:
 8021404:	4770      	bx	lr
 8021406:	bf00      	nop

08021408 <HAL_ADC_ConvHalfCpltCallback>:
 8021408:	4770      	bx	lr
 802140a:	bf00      	nop

0802140c <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 802140c:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 802140e:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8021410:	f7ff fffa 	bl	8021408 <HAL_ADC_ConvHalfCpltCallback>
 8021414:	bd08      	pop	{r3, pc}
 8021416:	bf00      	nop

08021418 <HAL_ADC_ErrorCallback>:
{
 8021418:	4770      	bx	lr
 802141a:	bf00      	nop

0802141c <ADC_DMAError>:
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 802141c:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 802141e:	b508      	push	{r3, lr}
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8021420:	2340      	movs	r3, #64	; 0x40
 8021422:	6403      	str	r3, [r0, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8021424:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8021426:	f043 0304 	orr.w	r3, r3, #4
 802142a:	6443      	str	r3, [r0, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 802142c:	f7ff fff4 	bl	8021418 <HAL_ADC_ErrorCallback>
 8021430:	bd08      	pop	{r3, pc}
 8021432:	bf00      	nop

08021434 <ADC_DMAConvCplt>:
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8021434:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8021436:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8021438:	f012 0f50 	tst.w	r2, #80	; 0x50
{
 802143c:	b510      	push	{r4, lr}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 802143e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8021440:	d123      	bne.n	802148a <ADC_DMAConvCplt+0x56>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8021442:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8021446:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8021448:	641a      	str	r2, [r3, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 802144a:	688a      	ldr	r2, [r1, #8]
 802144c:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8021450:	d117      	bne.n	8021482 <ADC_DMAConvCplt+0x4e>
 8021452:	7e1a      	ldrb	r2, [r3, #24]
 8021454:	b9aa      	cbnz	r2, 8021482 <ADC_DMAConvCplt+0x4e>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8021456:	6aca      	ldr	r2, [r1, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8021458:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 802145c:	d002      	beq.n	8021464 <ADC_DMAConvCplt+0x30>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 802145e:	688a      	ldr	r2, [r1, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8021460:	0550      	lsls	r0, r2, #21
 8021462:	d40e      	bmi.n	8021482 <ADC_DMAConvCplt+0x4e>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8021464:	684a      	ldr	r2, [r1, #4]
 8021466:	f022 0220 	bic.w	r2, r2, #32
 802146a:	604a      	str	r2, [r1, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 802146c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 802146e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8021472:	641a      	str	r2, [r3, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8021474:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8021476:	04d1      	lsls	r1, r2, #19
 8021478:	d403      	bmi.n	8021482 <ADC_DMAConvCplt+0x4e>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 802147a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 802147c:	f042 0201 	orr.w	r2, r2, #1
 8021480:	641a      	str	r2, [r3, #64]	; 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 8021482:	4618      	mov	r0, r3
 8021484:	f7ff ffbe 	bl	8021404 <HAL_ADC_ConvCpltCallback>
 8021488:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 802148a:	06d2      	lsls	r2, r2, #27
 802148c:	d404      	bmi.n	8021498 <ADC_DMAConvCplt+0x64>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 802148e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 8021490:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8021494:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8021496:	4718      	bx	r3
      HAL_ADC_ErrorCallback(hadc);
 8021498:	4618      	mov	r0, r3
 802149a:	f7ff ffbd 	bl	8021418 <HAL_ADC_ErrorCallback>
 802149e:	bd10      	pop	{r4, pc}

080214a0 <HAL_ADC_ConfigChannel>:
{
 80214a0:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hadc);
 80214a2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80214a6:	b083      	sub	sp, #12
  __IO uint32_t counter = 0U;
 80214a8:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 80214aa:	2b01      	cmp	r3, #1
  __IO uint32_t counter = 0U;
 80214ac:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 80214ae:	d055      	beq.n	802155c <HAL_ADC_ConfigChannel+0xbc>
  if (sConfig->Channel > ADC_CHANNEL_9)
 80214b0:	680d      	ldr	r5, [r1, #0]
  __HAL_LOCK(hadc);
 80214b2:	2301      	movs	r3, #1
  if (sConfig->Channel > ADC_CHANNEL_9)
 80214b4:	2d09      	cmp	r5, #9
  __HAL_LOCK(hadc);
 80214b6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 80214ba:	d828      	bhi.n	802150e <HAL_ADC_ConfigChannel+0x6e>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80214bc:	6804      	ldr	r4, [r0, #0]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80214be:	688b      	ldr	r3, [r1, #8]
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80214c0:	6922      	ldr	r2, [r4, #16]
 80214c2:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 80214c6:	2607      	movs	r6, #7
 80214c8:	40be      	lsls	r6, r7
 80214ca:	ea22 0206 	bic.w	r2, r2, r6
 80214ce:	6122      	str	r2, [r4, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80214d0:	6922      	ldr	r2, [r4, #16]
 80214d2:	40bb      	lsls	r3, r7
 80214d4:	4313      	orrs	r3, r2
 80214d6:	6123      	str	r3, [r4, #16]
  if (sConfig->Rank < 7U)
 80214d8:	684b      	ldr	r3, [r1, #4]
 80214da:	2b06      	cmp	r3, #6
 80214dc:	462e      	mov	r6, r5
 80214de:	d82b      	bhi.n	8021538 <HAL_ADC_ConfigChannel+0x98>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80214e0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80214e4:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80214e6:	3b05      	subs	r3, #5
 80214e8:	211f      	movs	r1, #31
 80214ea:	4099      	lsls	r1, r3
 80214ec:	ea22 0201 	bic.w	r2, r2, r1
 80214f0:	6362      	str	r2, [r4, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80214f2:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80214f4:	fa06 f303 	lsl.w	r3, r6, r3
 80214f8:	4313      	orrs	r3, r2
 80214fa:	6363      	str	r3, [r4, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80214fc:	4b36      	ldr	r3, [pc, #216]	; (80215d8 <HAL_ADC_ConfigChannel+0x138>)
 80214fe:	429c      	cmp	r4, r3
 8021500:	d03e      	beq.n	8021580 <HAL_ADC_ConfigChannel+0xe0>
  __HAL_UNLOCK(hadc);
 8021502:	2300      	movs	r3, #0
 8021504:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8021508:	4618      	mov	r0, r3
}
 802150a:	b003      	add	sp, #12
 802150c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 802150e:	6804      	ldr	r4, [r0, #0]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8021510:	688b      	ldr	r3, [r1, #8]
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8021512:	68e7      	ldr	r7, [r4, #12]
 8021514:	b2ae      	uxth	r6, r5
 8021516:	eb06 0246 	add.w	r2, r6, r6, lsl #1
 802151a:	3a1e      	subs	r2, #30
 802151c:	f04f 0e07 	mov.w	lr, #7
 8021520:	fa0e fe02 	lsl.w	lr, lr, r2
 8021524:	ea27 070e 	bic.w	r7, r7, lr
 8021528:	60e7      	str	r7, [r4, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 802152a:	68e7      	ldr	r7, [r4, #12]
 802152c:	4093      	lsls	r3, r2
 802152e:	433b      	orrs	r3, r7
 8021530:	60e3      	str	r3, [r4, #12]
  if (sConfig->Rank < 7U)
 8021532:	684b      	ldr	r3, [r1, #4]
 8021534:	2b06      	cmp	r3, #6
 8021536:	d9d3      	bls.n	80214e0 <HAL_ADC_ConfigChannel+0x40>
  else if (sConfig->Rank < 13U)
 8021538:	2b0c      	cmp	r3, #12
 802153a:	d812      	bhi.n	8021562 <HAL_ADC_ConfigChannel+0xc2>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 802153c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8021540:	f1a3 0123 	sub.w	r1, r3, #35	; 0x23
 8021544:	221f      	movs	r2, #31
 8021546:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8021548:	408a      	lsls	r2, r1
 802154a:	ea23 0302 	bic.w	r3, r3, r2
 802154e:	6323      	str	r3, [r4, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8021550:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8021552:	fa06 f101 	lsl.w	r1, r6, r1
 8021556:	4319      	orrs	r1, r3
 8021558:	6321      	str	r1, [r4, #48]	; 0x30
 802155a:	e7cf      	b.n	80214fc <HAL_ADC_ConfigChannel+0x5c>
  __HAL_LOCK(hadc);
 802155c:	2002      	movs	r0, #2
}
 802155e:	b003      	add	sp, #12
 8021560:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8021562:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8021566:	3a41      	subs	r2, #65	; 0x41
 8021568:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 802156a:	211f      	movs	r1, #31
 802156c:	4091      	lsls	r1, r2
 802156e:	ea23 0301 	bic.w	r3, r3, r1
 8021572:	62e3      	str	r3, [r4, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8021574:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8021576:	fa06 f102 	lsl.w	r1, r6, r2
 802157a:	4319      	orrs	r1, r3
 802157c:	62e1      	str	r1, [r4, #44]	; 0x2c
 802157e:	e7bd      	b.n	80214fc <HAL_ADC_ConfigChannel+0x5c>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8021580:	2d12      	cmp	r5, #18
 8021582:	d023      	beq.n	80215cc <HAL_ADC_ConfigChannel+0x12c>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8021584:	f1a5 0310 	sub.w	r3, r5, #16
 8021588:	2b01      	cmp	r3, #1
 802158a:	d8ba      	bhi.n	8021502 <HAL_ADC_ConfigChannel+0x62>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 802158c:	4a13      	ldr	r2, [pc, #76]	; (80215dc <HAL_ADC_ConfigChannel+0x13c>)
 802158e:	6853      	ldr	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8021590:	2d10      	cmp	r5, #16
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8021592:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8021596:	6053      	str	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8021598:	d1b3      	bne.n	8021502 <HAL_ADC_ConfigChannel+0x62>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 802159a:	4b11      	ldr	r3, [pc, #68]	; (80215e0 <HAL_ADC_ConfigChannel+0x140>)
 802159c:	f102 7246 	add.w	r2, r2, #51904512	; 0x3180000
 80215a0:	f502 322e 	add.w	r2, r2, #178176	; 0x2b800
 80215a4:	681b      	ldr	r3, [r3, #0]
 80215a6:	f202 3283 	addw	r2, r2, #899	; 0x383
 80215aa:	fba2 2303 	umull	r2, r3, r2, r3
 80215ae:	0c9b      	lsrs	r3, r3, #18
 80215b0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80215b4:	005b      	lsls	r3, r3, #1
 80215b6:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 80215b8:	9b01      	ldr	r3, [sp, #4]
 80215ba:	2b00      	cmp	r3, #0
 80215bc:	d0a1      	beq.n	8021502 <HAL_ADC_ConfigChannel+0x62>
        counter--;
 80215be:	9b01      	ldr	r3, [sp, #4]
 80215c0:	3b01      	subs	r3, #1
 80215c2:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 80215c4:	9b01      	ldr	r3, [sp, #4]
 80215c6:	2b00      	cmp	r3, #0
 80215c8:	d1f9      	bne.n	80215be <HAL_ADC_ConfigChannel+0x11e>
 80215ca:	e79a      	b.n	8021502 <HAL_ADC_ConfigChannel+0x62>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80215cc:	4a03      	ldr	r2, [pc, #12]	; (80215dc <HAL_ADC_ConfigChannel+0x13c>)
 80215ce:	6853      	ldr	r3, [r2, #4]
 80215d0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80215d4:	6053      	str	r3, [r2, #4]
 80215d6:	e794      	b.n	8021502 <HAL_ADC_ConfigChannel+0x62>
 80215d8:	40012000 	.word	0x40012000
 80215dc:	40012300 	.word	0x40012300
 80215e0:	20000008 	.word	0x20000008

080215e4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80215e4:	4a07      	ldr	r2, [pc, #28]	; (8021604 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80215e6:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80215e8:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
 80215ec:	400b      	ands	r3, r1
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80215ee:	0200      	lsls	r0, r0, #8
 80215f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80215f4:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 80215f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80215fc:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80215fe:	60d3      	str	r3, [r2, #12]
 8021600:	4770      	bx	lr
 8021602:	bf00      	nop
 8021604:	e000ed00 	.word	0xe000ed00

08021608 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8021608:	4b18      	ldr	r3, [pc, #96]	; (802166c <HAL_NVIC_SetPriority+0x64>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 802160a:	b470      	push	{r4, r5, r6}
 802160c:	68dc      	ldr	r4, [r3, #12]
 802160e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8021612:	f1c4 0607 	rsb	r6, r4, #7
 8021616:	2e04      	cmp	r6, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8021618:	f104 0304 	add.w	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 802161c:	bf28      	it	cs
 802161e:	2604      	movcs	r6, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8021620:	2b06      	cmp	r3, #6
 8021622:	d917      	bls.n	8021654 <HAL_NVIC_SetPriority+0x4c>
 8021624:	3c03      	subs	r4, #3
 8021626:	2501      	movs	r5, #1
 8021628:	40a5      	lsls	r5, r4
 802162a:	3d01      	subs	r5, #1
 802162c:	402a      	ands	r2, r5

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 802162e:	2301      	movs	r3, #1
 8021630:	40b3      	lsls	r3, r6
 8021632:	3b01      	subs	r3, #1
 8021634:	4019      	ands	r1, r3
 8021636:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) >= 0)
 8021638:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 802163a:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 802163e:	db0c      	blt.n	802165a <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8021640:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8021644:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8021648:	0109      	lsls	r1, r1, #4
 802164a:	b2c9      	uxtb	r1, r1
 802164c:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8021650:	bc70      	pop	{r4, r5, r6}
 8021652:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8021654:	2200      	movs	r2, #0
 8021656:	4614      	mov	r4, r2
 8021658:	e7e9      	b.n	802162e <HAL_NVIC_SetPriority+0x26>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 802165a:	4b05      	ldr	r3, [pc, #20]	; (8021670 <HAL_NVIC_SetPriority+0x68>)
 802165c:	f000 000f 	and.w	r0, r0, #15
 8021660:	0109      	lsls	r1, r1, #4
 8021662:	4403      	add	r3, r0
 8021664:	b2c9      	uxtb	r1, r1
 8021666:	7619      	strb	r1, [r3, #24]
 8021668:	bc70      	pop	{r4, r5, r6}
 802166a:	4770      	bx	lr
 802166c:	e000ed00 	.word	0xe000ed00
 8021670:	e000ecfc 	.word	0xe000ecfc

08021674 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8021674:	2800      	cmp	r0, #0
 8021676:	db07      	blt.n	8021688 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8021678:	f000 011f 	and.w	r1, r0, #31
 802167c:	2301      	movs	r3, #1
 802167e:	0940      	lsrs	r0, r0, #5
 8021680:	4a02      	ldr	r2, [pc, #8]	; (802168c <HAL_NVIC_EnableIRQ+0x18>)
 8021682:	408b      	lsls	r3, r1
 8021684:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8021688:	4770      	bx	lr
 802168a:	bf00      	nop
 802168c:	e000e100 	.word	0xe000e100

08021690 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8021690:	2800      	cmp	r0, #0
 8021692:	db0d      	blt.n	80216b0 <HAL_NVIC_DisableIRQ+0x20>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8021694:	0943      	lsrs	r3, r0, #5
 8021696:	3320      	adds	r3, #32
 8021698:	2201      	movs	r2, #1
 802169a:	4906      	ldr	r1, [pc, #24]	; (80216b4 <HAL_NVIC_DisableIRQ+0x24>)
 802169c:	f000 001f 	and.w	r0, r0, #31
 80216a0:	fa02 f000 	lsl.w	r0, r2, r0
 80216a4:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80216a8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80216ac:	f3bf 8f6f 	isb	sy
 80216b0:	4770      	bx	lr
 80216b2:	bf00      	nop
 80216b4:	e000e100 	.word	0xe000e100

080216b8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80216b8:	3801      	subs	r0, #1
 80216ba:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80216be:	d20e      	bcs.n	80216de <HAL_SYSTICK_Config+0x26>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80216c0:	4b08      	ldr	r3, [pc, #32]	; (80216e4 <HAL_SYSTICK_Config+0x2c>)
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80216c2:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80216c4:	4c08      	ldr	r4, [pc, #32]	; (80216e8 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80216c6:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80216c8:	20f0      	movs	r0, #240	; 0xf0
 80216ca:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80216ce:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80216d0:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80216d2:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80216d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80216d6:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 80216d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80216dc:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80216de:	2001      	movs	r0, #1
   return SysTick_Config(TicksNumb);
 80216e0:	4770      	bx	lr
 80216e2:	bf00      	nop
 80216e4:	e000e010 	.word	0xe000e010
 80216e8:	e000ed00 	.word	0xe000ed00

080216ec <HAL_CRC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80216ec:	b180      	cbz	r0, 8021710 <HAL_CRC_Init+0x24>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80216ee:	7943      	ldrb	r3, [r0, #5]
{
 80216f0:	b510      	push	{r4, lr}
  if (hcrc->State == HAL_CRC_STATE_RESET)
 80216f2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80216f6:	4604      	mov	r4, r0
 80216f8:	b11b      	cbz	r3, 8021702 <HAL_CRC_Init+0x16>
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80216fa:	2301      	movs	r3, #1
 80216fc:	7163      	strb	r3, [r4, #5]

  /* Return function status */
  return HAL_OK;
 80216fe:	2000      	movs	r0, #0
 8021700:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 8021702:	7102      	strb	r2, [r0, #4]
    HAL_CRC_MspInit(hcrc);
 8021704:	f002 f97a 	bl	80239fc <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_READY;
 8021708:	2301      	movs	r3, #1
 802170a:	7163      	strb	r3, [r4, #5]
  return HAL_OK;
 802170c:	2000      	movs	r0, #0
 802170e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8021710:	2001      	movs	r0, #1
 8021712:	4770      	bx	lr

08021714 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8021714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021716:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 8021718:	f7ff fca6 	bl	8021068 <HAL_GetTick>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 802171c:	2c00      	cmp	r4, #0
 802171e:	d073      	beq.n	8021808 <HAL_DMA_Init+0xf4>
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8021720:	2202      	movs	r2, #2
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8021722:	6823      	ldr	r3, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 8021724:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8021728:	681a      	ldr	r2, [r3, #0]
  __HAL_UNLOCK(hdma);
 802172a:	2100      	movs	r1, #0
  __HAL_DMA_DISABLE(hdma);
 802172c:	f022 0201 	bic.w	r2, r2, #1
  __HAL_UNLOCK(hdma);
 8021730:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
 8021734:	4605      	mov	r5, r0
  __HAL_DMA_DISABLE(hdma);
 8021736:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8021738:	e005      	b.n	8021746 <HAL_DMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 802173a:	f7ff fc95 	bl	8021068 <HAL_GetTick>
 802173e:	1b40      	subs	r0, r0, r5
 8021740:	2805      	cmp	r0, #5
 8021742:	d83b      	bhi.n	80217bc <HAL_DMA_Init+0xa8>
 8021744:	6823      	ldr	r3, [r4, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8021746:	681a      	ldr	r2, [r3, #0]
 8021748:	07d1      	lsls	r1, r2, #31
 802174a:	d4f6      	bmi.n	802173a <HAL_DMA_Init+0x26>
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 802174c:	68a7      	ldr	r7, [r4, #8]
 802174e:	6862      	ldr	r2, [r4, #4]
 8021750:	68e6      	ldr	r6, [r4, #12]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8021752:	6925      	ldr	r5, [r4, #16]
 8021754:	6961      	ldr	r1, [r4, #20]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8021756:	69a0      	ldr	r0, [r4, #24]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8021758:	433a      	orrs	r2, r7
 802175a:	4332      	orrs	r2, r6
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 802175c:	432a      	orrs	r2, r5
 802175e:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8021760:	69e1      	ldr	r1, [r4, #28]
          hdma->Init.Mode                | hdma->Init.Priority;
 8021762:	6a25      	ldr	r5, [r4, #32]
  tmp = hdma->Instance->CR;
 8021764:	681f      	ldr	r7, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8021766:	4e35      	ldr	r6, [pc, #212]	; (802183c <HAL_DMA_Init+0x128>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8021768:	4302      	orrs	r2, r0
 802176a:	430a      	orrs	r2, r1

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 802176c:	6a61      	ldr	r1, [r4, #36]	; 0x24
          hdma->Init.Mode                | hdma->Init.Priority;
 802176e:	432a      	orrs	r2, r5
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8021770:	403e      	ands	r6, r7
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8021772:	2904      	cmp	r1, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8021774:	ea42 0206 	orr.w	r2, r2, r6
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8021778:	d027      	beq.n	80217ca <HAL_DMA_Init+0xb6>
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 802177a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 802177c:	695a      	ldr	r2, [r3, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 802177e:	f022 0207 	bic.w	r2, r2, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8021782:	4311      	orrs	r1, r2
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8021784:	b2da      	uxtb	r2, r3
 8021786:	4d2e      	ldr	r5, [pc, #184]	; (8021840 <HAL_DMA_Init+0x12c>)
  hdma->Instance->FCR = tmp;
 8021788:	6159      	str	r1, [r3, #20]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 802178a:	3a10      	subs	r2, #16
 802178c:	fba5 1202 	umull	r1, r2, r5, r2
 8021790:	0912      	lsrs	r2, r2, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8021792:	482c      	ldr	r0, [pc, #176]	; (8021844 <HAL_DMA_Init+0x130>)
  
  if (stream_number > 3U)
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8021794:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8021798:	5c81      	ldrb	r1, [r0, r2]
 802179a:	65e1      	str	r1, [r4, #92]	; 0x5c
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 802179c:	f023 0303 	bic.w	r3, r3, #3
  if (stream_number > 3U)
 80217a0:	2a03      	cmp	r2, #3
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80217a2:	bf88      	it	hi
 80217a4:	3304      	addhi	r3, #4
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80217a6:	223f      	movs	r2, #63	; 0x3f
 80217a8:	408a      	lsls	r2, r1
  hdma->State = HAL_DMA_STATE_READY;
 80217aa:	2501      	movs	r5, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80217ac:	2100      	movs	r1, #0
 80217ae:	65a3      	str	r3, [r4, #88]	; 0x58
  return HAL_OK;
 80217b0:	4608      	mov	r0, r1
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80217b2:	609a      	str	r2, [r3, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80217b4:	6561      	str	r1, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 80217b6:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
  return HAL_OK;
 80217ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80217bc:	2303      	movs	r3, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80217be:	2220      	movs	r2, #32
 80217c0:	6562      	str	r2, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 80217c2:	4618      	mov	r0, r3
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80217c4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      return HAL_TIMEOUT;
 80217c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80217ca:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 80217cc:	6b21      	ldr	r1, [r4, #48]	; 0x30
    tmp |= hdma->Init.FIFOThreshold;
 80217ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80217d0:	4329      	orrs	r1, r5
 80217d2:	430a      	orrs	r2, r1
  hdma->Instance->CR = tmp;  
 80217d4:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 80217d6:	695a      	ldr	r2, [r3, #20]
    tmp |= hdma->Init.FIFOThreshold;
 80217d8:	f046 0104 	orr.w	r1, r6, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80217dc:	f022 0207 	bic.w	r2, r2, #7
    tmp |= hdma->Init.FIFOThreshold;
 80217e0:	4311      	orrs	r1, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80217e2:	2d00      	cmp	r5, #0
 80217e4:	d0ce      	beq.n	8021784 <HAL_DMA_Init+0x70>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80217e6:	b188      	cbz	r0, 802180c <HAL_DMA_Init+0xf8>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80217e8:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 80217ec:	d018      	beq.n	8021820 <HAL_DMA_Init+0x10c>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80217ee:	2e02      	cmp	r6, #2
 80217f0:	d903      	bls.n	80217fa <HAL_DMA_Init+0xe6>
 80217f2:	2e03      	cmp	r6, #3
 80217f4:	d1c6      	bne.n	8021784 <HAL_DMA_Init+0x70>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80217f6:	01ea      	lsls	r2, r5, #7
 80217f8:	d5c4      	bpl.n	8021784 <HAL_DMA_Init+0x70>
        hdma->State = HAL_DMA_STATE_READY;
 80217fa:	2301      	movs	r3, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80217fc:	2240      	movs	r2, #64	; 0x40
 80217fe:	6562      	str	r2, [r4, #84]	; 0x54
        return HAL_ERROR; 
 8021800:	4618      	mov	r0, r3
        hdma->State = HAL_DMA_STATE_READY;
 8021802:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8021806:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8021808:	2001      	movs	r0, #1
 802180a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch (tmp)
 802180c:	2e01      	cmp	r6, #1
 802180e:	d003      	beq.n	8021818 <HAL_DMA_Init+0x104>
 8021810:	d3f1      	bcc.n	80217f6 <HAL_DMA_Init+0xe2>
 8021812:	2e02      	cmp	r6, #2
 8021814:	d1b6      	bne.n	8021784 <HAL_DMA_Init+0x70>
 8021816:	e7ee      	b.n	80217f6 <HAL_DMA_Init+0xe2>
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8021818:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 802181c:	d1b2      	bne.n	8021784 <HAL_DMA_Init+0x70>
 802181e:	e7ec      	b.n	80217fa <HAL_DMA_Init+0xe6>
    switch (tmp)
 8021820:	2e03      	cmp	r6, #3
 8021822:	d8af      	bhi.n	8021784 <HAL_DMA_Init+0x70>
 8021824:	a201      	add	r2, pc, #4	; (adr r2, 802182c <HAL_DMA_Init+0x118>)
 8021826:	f852 f026 	ldr.w	pc, [r2, r6, lsl #2]
 802182a:	bf00      	nop
 802182c:	080217fb 	.word	0x080217fb
 8021830:	080217f7 	.word	0x080217f7
 8021834:	080217fb 	.word	0x080217fb
 8021838:	08021819 	.word	0x08021819
 802183c:	f010803f 	.word	0xf010803f
 8021840:	aaaaaaab 	.word	0xaaaaaaab
 8021844:	080283cc 	.word	0x080283cc

08021848 <HAL_DMA_Start_IT>:
{
 8021848:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(hdma);
 802184a:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 802184e:	2c01      	cmp	r4, #1
 8021850:	d00d      	beq.n	802186e <HAL_DMA_Start_IT+0x26>
  if(HAL_DMA_STATE_READY == hdma->State)
 8021852:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8021856:	6d86      	ldr	r6, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 8021858:	2501      	movs	r5, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 802185a:	42ac      	cmp	r4, r5
  __HAL_LOCK(hdma);
 802185c:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8021860:	d008      	beq.n	8021874 <HAL_DMA_Start_IT+0x2c>
    __HAL_UNLOCK(hdma);	  
 8021862:	2300      	movs	r3, #0
 8021864:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    status = HAL_BUSY;
 8021868:	2002      	movs	r0, #2
}
 802186a:	bcf0      	pop	{r4, r5, r6, r7}
 802186c:	4770      	bx	lr
  __HAL_LOCK(hdma);
 802186e:	2002      	movs	r0, #2
}
 8021870:	bcf0      	pop	{r4, r5, r6, r7}
 8021872:	4770      	bx	lr
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8021874:	6804      	ldr	r4, [r0, #0]
    hdma->State = HAL_DMA_STATE_BUSY;
 8021876:	2702      	movs	r7, #2
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8021878:	2500      	movs	r5, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 802187a:	f880 7035 	strb.w	r7, [r0, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 802187e:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8021880:	6825      	ldr	r5, [r4, #0]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8021882:	6887      	ldr	r7, [r0, #8]
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8021884:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8021888:	2f40      	cmp	r7, #64	; 0x40
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 802188a:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 802188c:	6063      	str	r3, [r4, #4]
    hdma->Instance->PAR = DstAddress;
 802188e:	bf0a      	itet	eq
 8021890:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->PAR = SrcAddress;
 8021892:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->M0AR = SrcAddress;
 8021894:	60e1      	streq	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8021896:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
    hdma->Instance->M0AR = DstAddress;
 8021898:	bf18      	it	ne
 802189a:	60e2      	strne	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 802189c:	233f      	movs	r3, #63	; 0x3f
 802189e:	408b      	lsls	r3, r1
    if(hdma->XferHalfCpltCallback != NULL)
 80218a0:	6c02      	ldr	r2, [r0, #64]	; 0x40
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80218a2:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80218a4:	6823      	ldr	r3, [r4, #0]
 80218a6:	f043 0316 	orr.w	r3, r3, #22
 80218aa:	6023      	str	r3, [r4, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 80218ac:	b11a      	cbz	r2, 80218b6 <HAL_DMA_Start_IT+0x6e>
      hdma->Instance->CR  |= DMA_IT_HT;
 80218ae:	6823      	ldr	r3, [r4, #0]
 80218b0:	f043 0308 	orr.w	r3, r3, #8
 80218b4:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 80218b6:	6823      	ldr	r3, [r4, #0]
 80218b8:	f043 0301 	orr.w	r3, r3, #1
 80218bc:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80218be:	2000      	movs	r0, #0
 80218c0:	e7d3      	b.n	802186a <HAL_DMA_Start_IT+0x22>
 80218c2:	bf00      	nop

080218c4 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80218c4:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80218c8:	2b02      	cmp	r3, #2
 80218ca:	d003      	beq.n	80218d4 <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80218cc:	2380      	movs	r3, #128	; 0x80
 80218ce:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 80218d0:	2001      	movs	r0, #1
 80218d2:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 80218d4:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 80218d6:	2305      	movs	r3, #5
 80218d8:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 80218dc:	6813      	ldr	r3, [r2, #0]
 80218de:	f023 0301 	bic.w	r3, r3, #1
 80218e2:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 80218e4:	2000      	movs	r0, #0
}
 80218e6:	4770      	bx	lr

080218e8 <HAL_DMA_IRQHandler>:
{
 80218e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80218ea:	b083      	sub	sp, #12
  __IO uint32_t count = 0U;
 80218ec:	2300      	movs	r3, #0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80218ee:	6d87      	ldr	r7, [r0, #88]	; 0x58
  __IO uint32_t count = 0U;
 80218f0:	9301      	str	r3, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80218f2:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 80218f4:	683d      	ldr	r5, [r7, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 80218f6:	4962      	ldr	r1, [pc, #392]	; (8021a80 <HAL_DMA_IRQHandler+0x198>)
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80218f8:	2208      	movs	r2, #8
 80218fa:	409a      	lsls	r2, r3
 80218fc:	4215      	tst	r5, r2
{
 80218fe:	4604      	mov	r4, r0
  uint32_t timeout = SystemCoreClock / 9600U;
 8021900:	680e      	ldr	r6, [r1, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8021902:	d003      	beq.n	802190c <HAL_DMA_IRQHandler+0x24>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8021904:	6801      	ldr	r1, [r0, #0]
 8021906:	6808      	ldr	r0, [r1, #0]
 8021908:	0740      	lsls	r0, r0, #29
 802190a:	d476      	bmi.n	80219fa <HAL_DMA_IRQHandler+0x112>
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 802190c:	2201      	movs	r2, #1
 802190e:	409a      	lsls	r2, r3
 8021910:	4215      	tst	r5, r2
 8021912:	d003      	beq.n	802191c <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8021914:	6821      	ldr	r1, [r4, #0]
 8021916:	6949      	ldr	r1, [r1, #20]
 8021918:	0608      	lsls	r0, r1, #24
 802191a:	d468      	bmi.n	80219ee <HAL_DMA_IRQHandler+0x106>
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 802191c:	2204      	movs	r2, #4
 802191e:	409a      	lsls	r2, r3
 8021920:	4215      	tst	r5, r2
 8021922:	d003      	beq.n	802192c <HAL_DMA_IRQHandler+0x44>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8021924:	6821      	ldr	r1, [r4, #0]
 8021926:	6809      	ldr	r1, [r1, #0]
 8021928:	0789      	lsls	r1, r1, #30
 802192a:	d45a      	bmi.n	80219e2 <HAL_DMA_IRQHandler+0xfa>
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 802192c:	2210      	movs	r2, #16
 802192e:	409a      	lsls	r2, r3
 8021930:	4215      	tst	r5, r2
 8021932:	d003      	beq.n	802193c <HAL_DMA_IRQHandler+0x54>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8021934:	6821      	ldr	r1, [r4, #0]
 8021936:	6808      	ldr	r0, [r1, #0]
 8021938:	0700      	lsls	r0, r0, #28
 802193a:	d43f      	bmi.n	80219bc <HAL_DMA_IRQHandler+0xd4>
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 802193c:	2220      	movs	r2, #32
 802193e:	409a      	lsls	r2, r3
 8021940:	4215      	tst	r5, r2
 8021942:	d003      	beq.n	802194c <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8021944:	6821      	ldr	r1, [r4, #0]
 8021946:	6808      	ldr	r0, [r1, #0]
 8021948:	06c0      	lsls	r0, r0, #27
 802194a:	d425      	bmi.n	8021998 <HAL_DMA_IRQHandler+0xb0>
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 802194c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 802194e:	b30b      	cbz	r3, 8021994 <HAL_DMA_IRQHandler+0xac>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8021950:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8021952:	07da      	lsls	r2, r3, #31
 8021954:	d51a      	bpl.n	802198c <HAL_DMA_IRQHandler+0xa4>
      hdma->State = HAL_DMA_STATE_ABORT;
 8021956:	2305      	movs	r3, #5
      __HAL_DMA_DISABLE(hdma);
 8021958:	6821      	ldr	r1, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 802195a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 802195e:	680b      	ldr	r3, [r1, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8021960:	4a48      	ldr	r2, [pc, #288]	; (8021a84 <HAL_DMA_IRQHandler+0x19c>)
      __HAL_DMA_DISABLE(hdma);
 8021962:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 8021966:	fba2 0206 	umull	r0, r2, r2, r6
      __HAL_DMA_DISABLE(hdma);
 802196a:	600b      	str	r3, [r1, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 802196c:	0a92      	lsrs	r2, r2, #10
 802196e:	e002      	b.n	8021976 <HAL_DMA_IRQHandler+0x8e>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8021970:	680b      	ldr	r3, [r1, #0]
 8021972:	07db      	lsls	r3, r3, #31
 8021974:	d504      	bpl.n	8021980 <HAL_DMA_IRQHandler+0x98>
        if (++count > timeout)
 8021976:	9b01      	ldr	r3, [sp, #4]
 8021978:	3301      	adds	r3, #1
 802197a:	429a      	cmp	r2, r3
 802197c:	9301      	str	r3, [sp, #4]
 802197e:	d2f7      	bcs.n	8021970 <HAL_DMA_IRQHandler+0x88>
      __HAL_UNLOCK(hdma);
 8021980:	2200      	movs	r2, #0
      hdma->State = HAL_DMA_STATE_READY;
 8021982:	2301      	movs	r3, #1
      __HAL_UNLOCK(hdma);
 8021984:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8021988:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 802198c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 802198e:	b10b      	cbz	r3, 8021994 <HAL_DMA_IRQHandler+0xac>
      hdma->XferErrorCallback(hdma);
 8021990:	4620      	mov	r0, r4
 8021992:	4798      	blx	r3
}
 8021994:	b003      	add	sp, #12
 8021996:	bdf0      	pop	{r4, r5, r6, r7, pc}
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8021998:	60ba      	str	r2, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 802199a:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 802199e:	2a05      	cmp	r2, #5
 80219a0:	d03b      	beq.n	8021a1a <HAL_DMA_IRQHandler+0x132>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80219a2:	680b      	ldr	r3, [r1, #0]
 80219a4:	f413 2f80 	tst.w	r3, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80219a8:	680b      	ldr	r3, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80219aa:	d054      	beq.n	8021a56 <HAL_DMA_IRQHandler+0x16e>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80219ac:	0319      	lsls	r1, r3, #12
 80219ae:	d55f      	bpl.n	8021a70 <HAL_DMA_IRQHandler+0x188>
        if(hdma->XferCpltCallback != NULL)
 80219b0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80219b2:	2b00      	cmp	r3, #0
 80219b4:	d0ca      	beq.n	802194c <HAL_DMA_IRQHandler+0x64>
          hdma->XferCpltCallback(hdma);
 80219b6:	4620      	mov	r0, r4
 80219b8:	4798      	blx	r3
 80219ba:	e7c7      	b.n	802194c <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80219bc:	60ba      	str	r2, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80219be:	680a      	ldr	r2, [r1, #0]
 80219c0:	f412 2f80 	tst.w	r2, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80219c4:	680a      	ldr	r2, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80219c6:	d122      	bne.n	8021a0e <HAL_DMA_IRQHandler+0x126>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80219c8:	05d2      	lsls	r2, r2, #23
 80219ca:	d403      	bmi.n	80219d4 <HAL_DMA_IRQHandler+0xec>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80219cc:	680a      	ldr	r2, [r1, #0]
 80219ce:	f022 0208 	bic.w	r2, r2, #8
 80219d2:	600a      	str	r2, [r1, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 80219d4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80219d6:	2a00      	cmp	r2, #0
 80219d8:	d0b0      	beq.n	802193c <HAL_DMA_IRQHandler+0x54>
          hdma->XferHalfCpltCallback(hdma);
 80219da:	4620      	mov	r0, r4
 80219dc:	4790      	blx	r2
 80219de:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80219e0:	e7ac      	b.n	802193c <HAL_DMA_IRQHandler+0x54>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80219e2:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80219e4:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80219e6:	f042 0204 	orr.w	r2, r2, #4
 80219ea:	6562      	str	r2, [r4, #84]	; 0x54
 80219ec:	e79e      	b.n	802192c <HAL_DMA_IRQHandler+0x44>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80219ee:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80219f0:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80219f2:	f042 0202 	orr.w	r2, r2, #2
 80219f6:	6562      	str	r2, [r4, #84]	; 0x54
 80219f8:	e790      	b.n	802191c <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80219fa:	6808      	ldr	r0, [r1, #0]
 80219fc:	f020 0004 	bic.w	r0, r0, #4
 8021a00:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8021a02:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8021a04:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8021a06:	f042 0201 	orr.w	r2, r2, #1
 8021a0a:	6562      	str	r2, [r4, #84]	; 0x54
 8021a0c:	e77e      	b.n	802190c <HAL_DMA_IRQHandler+0x24>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8021a0e:	0311      	lsls	r1, r2, #12
 8021a10:	d5e0      	bpl.n	80219d4 <HAL_DMA_IRQHandler+0xec>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8021a12:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8021a14:	2a00      	cmp	r2, #0
 8021a16:	d1e0      	bne.n	80219da <HAL_DMA_IRQHandler+0xf2>
 8021a18:	e790      	b.n	802193c <HAL_DMA_IRQHandler+0x54>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8021a1a:	680a      	ldr	r2, [r1, #0]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8021a1c:	6c20      	ldr	r0, [r4, #64]	; 0x40
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8021a1e:	f022 0216 	bic.w	r2, r2, #22
 8021a22:	600a      	str	r2, [r1, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8021a24:	694a      	ldr	r2, [r1, #20]
 8021a26:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8021a2a:	614a      	str	r2, [r1, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8021a2c:	b320      	cbz	r0, 8021a78 <HAL_DMA_IRQHandler+0x190>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8021a2e:	680a      	ldr	r2, [r1, #0]
 8021a30:	f022 0208 	bic.w	r2, r2, #8
 8021a34:	600a      	str	r2, [r1, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8021a36:	223f      	movs	r2, #63	; 0x3f
        if(hdma->XferAbortCallback != NULL)
 8021a38:	6d21      	ldr	r1, [r4, #80]	; 0x50
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8021a3a:	fa02 f303 	lsl.w	r3, r2, r3
        __HAL_UNLOCK(hdma);
 8021a3e:	2000      	movs	r0, #0
        hdma->State = HAL_DMA_STATE_READY;
 8021a40:	2201      	movs	r2, #1
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8021a42:	60bb      	str	r3, [r7, #8]
        __HAL_UNLOCK(hdma);
 8021a44:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8021a48:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8021a4c:	2900      	cmp	r1, #0
 8021a4e:	d0a1      	beq.n	8021994 <HAL_DMA_IRQHandler+0xac>
          hdma->XferAbortCallback(hdma);
 8021a50:	4620      	mov	r0, r4
 8021a52:	4788      	blx	r1
 8021a54:	e79e      	b.n	8021994 <HAL_DMA_IRQHandler+0xac>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8021a56:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 8021a5a:	d1a9      	bne.n	80219b0 <HAL_DMA_IRQHandler+0xc8>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8021a5c:	680a      	ldr	r2, [r1, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8021a5e:	2001      	movs	r0, #1
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8021a60:	f022 0210 	bic.w	r2, r2, #16
 8021a64:	600a      	str	r2, [r1, #0]
          __HAL_UNLOCK(hdma);
 8021a66:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8021a6a:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
 8021a6e:	e79f      	b.n	80219b0 <HAL_DMA_IRQHandler+0xc8>
          if(hdma->XferM1CpltCallback != NULL)
 8021a70:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8021a72:	2b00      	cmp	r3, #0
 8021a74:	d19f      	bne.n	80219b6 <HAL_DMA_IRQHandler+0xce>
 8021a76:	e769      	b.n	802194c <HAL_DMA_IRQHandler+0x64>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8021a78:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8021a7a:	2a00      	cmp	r2, #0
 8021a7c:	d1d7      	bne.n	8021a2e <HAL_DMA_IRQHandler+0x146>
 8021a7e:	e7da      	b.n	8021a36 <HAL_DMA_IRQHandler+0x14e>
 8021a80:	20000008 	.word	0x20000008
 8021a84:	1b4e81b5 	.word	0x1b4e81b5

08021a88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8021a88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8021a8c:	2400      	movs	r4, #0
{
 8021a8e:	b082      	sub	sp, #8
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8021a90:	680f      	ldr	r7, [r1, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8021a92:	4622      	mov	r2, r4
 8021a94:	e005      	b.n	8021aa2 <HAL_GPIO_Init+0x1a>
 8021a96:	3201      	adds	r2, #1
 8021a98:	2a10      	cmp	r2, #16
 8021a9a:	f104 0402 	add.w	r4, r4, #2
 8021a9e:	f000 80af 	beq.w	8021c00 <HAL_GPIO_Init+0x178>
    ioposition = 0x01U << position;
 8021aa2:	2301      	movs	r3, #1
 8021aa4:	4093      	lsls	r3, r2
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8021aa6:	ea03 0507 	and.w	r5, r3, r7

    if(iocurrent == ioposition)
 8021aaa:	42ab      	cmp	r3, r5
 8021aac:	d1f3      	bne.n	8021a96 <HAL_GPIO_Init+0xe>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8021aae:	f8d1 e004 	ldr.w	lr, [r1, #4]
 8021ab2:	f02e 0810 	bic.w	r8, lr, #16
 8021ab6:	f108 33ff 	add.w	r3, r8, #4294967295
 8021aba:	2b01      	cmp	r3, #1
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8021abc:	f04f 0303 	mov.w	r3, #3
 8021ac0:	fa03 f304 	lsl.w	r3, r3, r4
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8021ac4:	f240 809f 	bls.w	8021c06 <HAL_GPIO_Init+0x17e>
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
        GPIOx->OTYPER = temp;
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8021ac8:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8021aca:	43db      	mvns	r3, r3
 8021acc:	ea06 0c03 	and.w	ip, r6, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8021ad0:	688e      	ldr	r6, [r1, #8]
 8021ad2:	40a6      	lsls	r6, r4
 8021ad4:	ea46 060c 	orr.w	r6, r6, ip
      GPIOx->PUPDR = temp;
 8021ad8:	60c6      	str	r6, [r0, #12]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
        GPIOx->AFR[position >> 3U] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8021ada:	f8d0 c000 	ldr.w	ip, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8021ade:	f00e 0603 	and.w	r6, lr, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8021ae2:	ea0c 0c03 	and.w	ip, ip, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8021ae6:	4633      	mov	r3, r6
 8021ae8:	40a3      	lsls	r3, r4
 8021aea:	ea43 030c 	orr.w	r3, r3, ip
      GPIOx->MODER = temp;

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8021aee:	f01e 5f80 	tst.w	lr, #268435456	; 0x10000000
      GPIOx->MODER = temp;
 8021af2:	6003      	str	r3, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8021af4:	d0cf      	beq.n	8021a96 <HAL_GPIO_Init+0xe>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8021af6:	4b6f      	ldr	r3, [pc, #444]	; (8021cb4 <HAL_GPIO_Init+0x22c>)

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8021af8:	f8df 91c0 	ldr.w	r9, [pc, #448]	; 8021cbc <HAL_GPIO_Init+0x234>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8021afc:	f04f 0800 	mov.w	r8, #0
 8021b00:	f8cd 8004 	str.w	r8, [sp, #4]
 8021b04:	6c5e      	ldr	r6, [r3, #68]	; 0x44
 8021b06:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 8021b0a:	645e      	str	r6, [r3, #68]	; 0x44
 8021b0c:	6c5e      	ldr	r6, [r3, #68]	; 0x44
 8021b0e:	f022 0303 	bic.w	r3, r2, #3
 8021b12:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8021b16:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 8021b1a:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 8021b1e:	9601      	str	r6, [sp, #4]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8021b20:	f002 0603 	and.w	r6, r2, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8021b24:	f8dd c004 	ldr.w	ip, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8021b28:	f8d3 a008 	ldr.w	sl, [r3, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8021b2c:	00b6      	lsls	r6, r6, #2
 8021b2e:	f04f 0c0f 	mov.w	ip, #15
 8021b32:	fa0c fc06 	lsl.w	ip, ip, r6
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8021b36:	4548      	cmp	r0, r9
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8021b38:	ea2a 0c0c 	bic.w	ip, sl, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8021b3c:	d029      	beq.n	8021b92 <HAL_GPIO_Init+0x10a>
 8021b3e:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8021b42:	f508 3801 	add.w	r8, r8, #132096	; 0x20400
 8021b46:	4540      	cmp	r0, r8
 8021b48:	f000 8095 	beq.w	8021c76 <HAL_GPIO_Init+0x1ee>
 8021b4c:	f8df 8170 	ldr.w	r8, [pc, #368]	; 8021cc0 <HAL_GPIO_Init+0x238>
 8021b50:	4540      	cmp	r0, r8
 8021b52:	f000 8095 	beq.w	8021c80 <HAL_GPIO_Init+0x1f8>
 8021b56:	f8df 816c 	ldr.w	r8, [pc, #364]	; 8021cc4 <HAL_GPIO_Init+0x23c>
 8021b5a:	4540      	cmp	r0, r8
 8021b5c:	f000 8095 	beq.w	8021c8a <HAL_GPIO_Init+0x202>
 8021b60:	f8df 8164 	ldr.w	r8, [pc, #356]	; 8021cc8 <HAL_GPIO_Init+0x240>
 8021b64:	4540      	cmp	r0, r8
 8021b66:	f000 8095 	beq.w	8021c94 <HAL_GPIO_Init+0x20c>
 8021b6a:	f8df 8160 	ldr.w	r8, [pc, #352]	; 8021ccc <HAL_GPIO_Init+0x244>
 8021b6e:	4540      	cmp	r0, r8
 8021b70:	f000 8095 	beq.w	8021c9e <HAL_GPIO_Init+0x216>
 8021b74:	f8df 8158 	ldr.w	r8, [pc, #344]	; 8021cd0 <HAL_GPIO_Init+0x248>
 8021b78:	4540      	cmp	r0, r8
 8021b7a:	f000 8095 	beq.w	8021ca8 <HAL_GPIO_Init+0x220>
 8021b7e:	f8df 8154 	ldr.w	r8, [pc, #340]	; 8021cd4 <HAL_GPIO_Init+0x24c>
 8021b82:	4540      	cmp	r0, r8
 8021b84:	bf0c      	ite	eq
 8021b86:	f04f 0807 	moveq.w	r8, #7
 8021b8a:	f04f 0808 	movne.w	r8, #8
 8021b8e:	fa08 f806 	lsl.w	r8, r8, r6
 8021b92:	ea4c 0608 	orr.w	r6, ip, r8
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8021b96:	f8df c120 	ldr.w	ip, [pc, #288]	; 8021cb8 <HAL_GPIO_Init+0x230>
        SYSCFG->EXTICR[position >> 2U] = temp;
 8021b9a:	609e      	str	r6, [r3, #8]
        temp = EXTI->IMR;
 8021b9c:	f8dc 3000 	ldr.w	r3, [ip]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 8021ba0:	f8df c114 	ldr.w	ip, [pc, #276]	; 8021cb8 <HAL_GPIO_Init+0x230>
        temp &= ~((uint32_t)iocurrent);
 8021ba4:	43ee      	mvns	r6, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8021ba6:	f41e 3f80 	tst.w	lr, #65536	; 0x10000
          temp |= iocurrent;
 8021baa:	bf14      	ite	ne
 8021bac:	432b      	orrne	r3, r5
        temp &= ~((uint32_t)iocurrent);
 8021bae:	4033      	andeq	r3, r6
        EXTI->IMR = temp;
 8021bb0:	f8cc 3000 	str.w	r3, [ip]

        temp = EXTI->EMR;
 8021bb4:	f8dc 3004 	ldr.w	r3, [ip, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 8021bb8:	f8df c0fc 	ldr.w	ip, [pc, #252]	; 8021cb8 <HAL_GPIO_Init+0x230>
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8021bbc:	f41e 3f00 	tst.w	lr, #131072	; 0x20000
          temp |= iocurrent;
 8021bc0:	bf14      	ite	ne
 8021bc2:	432b      	orrne	r3, r5
        temp &= ~((uint32_t)iocurrent);
 8021bc4:	4033      	andeq	r3, r6
        EXTI->EMR = temp;
 8021bc6:	f8cc 3004 	str.w	r3, [ip, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8021bca:	f8dc 3008 	ldr.w	r3, [ip, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 8021bce:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 8021cb8 <HAL_GPIO_Init+0x230>
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8021bd2:	f41e 1f80 	tst.w	lr, #1048576	; 0x100000
          temp |= iocurrent;
 8021bd6:	bf14      	ite	ne
 8021bd8:	432b      	orrne	r3, r5
        temp &= ~((uint32_t)iocurrent);
 8021bda:	4033      	andeq	r3, r6
        EXTI->RTSR = temp;
 8021bdc:	f8cc 3008 	str.w	r3, [ip, #8]

        temp = EXTI->FTSR;
 8021be0:	f8dc 300c 	ldr.w	r3, [ip, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8021be4:	f41e 1f00 	tst.w	lr, #2097152	; 0x200000
        temp &= ~((uint32_t)iocurrent);
 8021be8:	bf0c      	ite	eq
 8021bea:	ea06 0503 	andeq.w	r5, r6, r3
        {
          temp |= iocurrent;
 8021bee:	431d      	orrne	r5, r3
  for(position = 0U; position < GPIO_NUMBER; position++)
 8021bf0:	3201      	adds	r2, #1
        }
        EXTI->FTSR = temp;
 8021bf2:	4b31      	ldr	r3, [pc, #196]	; (8021cb8 <HAL_GPIO_Init+0x230>)
  for(position = 0U; position < GPIO_NUMBER; position++)
 8021bf4:	2a10      	cmp	r2, #16
        EXTI->FTSR = temp;
 8021bf6:	60dd      	str	r5, [r3, #12]
 8021bf8:	f104 0402 	add.w	r4, r4, #2
  for(position = 0U; position < GPIO_NUMBER; position++)
 8021bfc:	f47f af51 	bne.w	8021aa2 <HAL_GPIO_Init+0x1a>
      }
    }
  }
}
 8021c00:	b002      	add	sp, #8
 8021c02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        temp = GPIOx->OSPEEDR; 
 8021c06:	6886      	ldr	r6, [r0, #8]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8021c08:	f8d1 c008 	ldr.w	ip, [r1, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8021c0c:	43db      	mvns	r3, r3
 8021c0e:	ea06 0903 	and.w	r9, r6, r3
        temp |= (GPIO_Init->Speed << (position * 2U));
 8021c12:	68ce      	ldr	r6, [r1, #12]
 8021c14:	40a6      	lsls	r6, r4
 8021c16:	ea46 0609 	orr.w	r6, r6, r9
        GPIOx->OSPEEDR = temp;
 8021c1a:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8021c1c:	f8d0 9004 	ldr.w	r9, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8021c20:	f3ce 1600 	ubfx	r6, lr, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8021c24:	ea29 0905 	bic.w	r9, r9, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8021c28:	4096      	lsls	r6, r2
 8021c2a:	ea46 0609 	orr.w	r6, r6, r9
        GPIOx->OTYPER = temp;
 8021c2e:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 8021c30:	68c6      	ldr	r6, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8021c32:	fa0c fc04 	lsl.w	ip, ip, r4
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8021c36:	401e      	ands	r6, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8021c38:	ea4c 0606 	orr.w	r6, ip, r6
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8021c3c:	f1b8 0f02 	cmp.w	r8, #2
      GPIOx->PUPDR = temp;
 8021c40:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8021c42:	f47f af4a 	bne.w	8021ada <HAL_GPIO_Init+0x52>
        temp = GPIOx->AFR[position >> 3U];
 8021c46:	ea4f 08d2 	mov.w	r8, r2, lsr #3
 8021c4a:	eb00 0888 	add.w	r8, r0, r8, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8021c4e:	f002 0c07 	and.w	ip, r2, #7
        temp = GPIOx->AFR[position >> 3U];
 8021c52:	f8d8 6020 	ldr.w	r6, [r8, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8021c56:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8021c5a:	f04f 0a0f 	mov.w	sl, #15
 8021c5e:	fa0a fa0c 	lsl.w	sl, sl, ip
 8021c62:	ea26 090a 	bic.w	r9, r6, sl
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8021c66:	690e      	ldr	r6, [r1, #16]
 8021c68:	fa06 f60c 	lsl.w	r6, r6, ip
 8021c6c:	ea46 0609 	orr.w	r6, r6, r9
        GPIOx->AFR[position >> 3U] = temp;
 8021c70:	f8c8 6020 	str.w	r6, [r8, #32]
 8021c74:	e731      	b.n	8021ada <HAL_GPIO_Init+0x52>
 8021c76:	f04f 0801 	mov.w	r8, #1
 8021c7a:	fa08 f806 	lsl.w	r8, r8, r6
 8021c7e:	e788      	b.n	8021b92 <HAL_GPIO_Init+0x10a>
 8021c80:	f04f 0802 	mov.w	r8, #2
 8021c84:	fa08 f806 	lsl.w	r8, r8, r6
 8021c88:	e783      	b.n	8021b92 <HAL_GPIO_Init+0x10a>
 8021c8a:	f04f 0803 	mov.w	r8, #3
 8021c8e:	fa08 f806 	lsl.w	r8, r8, r6
 8021c92:	e77e      	b.n	8021b92 <HAL_GPIO_Init+0x10a>
 8021c94:	f04f 0804 	mov.w	r8, #4
 8021c98:	fa08 f806 	lsl.w	r8, r8, r6
 8021c9c:	e779      	b.n	8021b92 <HAL_GPIO_Init+0x10a>
 8021c9e:	f04f 0805 	mov.w	r8, #5
 8021ca2:	fa08 f806 	lsl.w	r8, r8, r6
 8021ca6:	e774      	b.n	8021b92 <HAL_GPIO_Init+0x10a>
 8021ca8:	f04f 0806 	mov.w	r8, #6
 8021cac:	fa08 f806 	lsl.w	r8, r8, r6
 8021cb0:	e76f      	b.n	8021b92 <HAL_GPIO_Init+0x10a>
 8021cb2:	bf00      	nop
 8021cb4:	40023800 	.word	0x40023800
 8021cb8:	40013c00 	.word	0x40013c00
 8021cbc:	40020000 	.word	0x40020000
 8021cc0:	40020800 	.word	0x40020800
 8021cc4:	40020c00 	.word	0x40020c00
 8021cc8:	40021000 	.word	0x40021000
 8021ccc:	40021400 	.word	0x40021400
 8021cd0:	40021800 	.word	0x40021800
 8021cd4:	40021c00 	.word	0x40021c00

08021cd8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8021cd8:	b902      	cbnz	r2, 8021cdc <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8021cda:	0409      	lsls	r1, r1, #16
 8021cdc:	6181      	str	r1, [r0, #24]
 8021cde:	4770      	bx	lr

08021ce0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8021ce0:	4770      	bx	lr
 8021ce2:	bf00      	nop

08021ce4 <HAL_GPIO_EXTI_IRQHandler>:
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8021ce4:	4a04      	ldr	r2, [pc, #16]	; (8021cf8 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8021ce6:	6951      	ldr	r1, [r2, #20]
 8021ce8:	4201      	tst	r1, r0
 8021cea:	d100      	bne.n	8021cee <HAL_GPIO_EXTI_IRQHandler+0xa>
 8021cec:	4770      	bx	lr
{
 8021cee:	b508      	push	{r3, lr}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8021cf0:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8021cf2:	f7ff fff5 	bl	8021ce0 <HAL_GPIO_EXTI_Callback>
 8021cf6:	bd08      	pop	{r3, pc}
 8021cf8:	40013c00 	.word	0x40013c00

08021cfc <HAL_SPI_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8021cfc:	2800      	cmp	r0, #0
 8021cfe:	d03a      	beq.n	8021d76 <HAL_SPI_Init+0x7a>
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8021d00:	f890 2051 	ldrb.w	r2, [r0, #81]	; 0x51
{
 8021d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8021d06:	2500      	movs	r5, #0
 8021d08:	4604      	mov	r4, r0
  if (hspi->State == HAL_SPI_STATE_RESET)
 8021d0a:	f002 01ff 	and.w	r1, r2, #255	; 0xff
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8021d0e:	6285      	str	r5, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8021d10:	b35a      	cbz	r2, 8021d6a <HAL_SPI_Init+0x6e>
  __HAL_SPI_DISABLE(hspi);

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8021d12:	68a7      	ldr	r7, [r4, #8]
 8021d14:	6863      	ldr	r3, [r4, #4]
 8021d16:	68e6      	ldr	r6, [r4, #12]
 8021d18:	6920      	ldr	r0, [r4, #16]
 8021d1a:	6962      	ldr	r2, [r4, #20]
 8021d1c:	69e1      	ldr	r1, [r4, #28]
 8021d1e:	433b      	orrs	r3, r7
 8021d20:	4333      	orrs	r3, r6
 8021d22:	4303      	orrs	r3, r0
 8021d24:	4313      	orrs	r3, r2
 8021d26:	6a26      	ldr	r6, [r4, #32]
 8021d28:	69a0      	ldr	r0, [r4, #24]
  __HAL_SPI_DISABLE(hspi);
 8021d2a:	6827      	ldr	r7, [r4, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8021d2c:	6a62      	ldr	r2, [r4, #36]	; 0x24
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8021d2e:	430b      	orrs	r3, r1
  hspi->State = HAL_SPI_STATE_BUSY;
 8021d30:	2102      	movs	r1, #2
 8021d32:	f884 1051 	strb.w	r1, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8021d36:	6839      	ldr	r1, [r7, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8021d38:	4333      	orrs	r3, r6
 8021d3a:	f400 7600 	and.w	r6, r0, #512	; 0x200
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8021d3e:	0c00      	lsrs	r0, r0, #16
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8021d40:	4333      	orrs	r3, r6
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8021d42:	f000 0004 	and.w	r0, r0, #4
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8021d46:	432b      	orrs	r3, r5
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8021d48:	4302      	orrs	r2, r0
  __HAL_SPI_DISABLE(hspi);
 8021d4a:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8021d4e:	6039      	str	r1, [r7, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8021d50:	603b      	str	r3, [r7, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8021d52:	607a      	str	r2, [r7, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8021d54:	69fb      	ldr	r3, [r7, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8021d56:	2200      	movs	r2, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8021d58:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  hspi->State     = HAL_SPI_STATE_READY;
 8021d5c:	2101      	movs	r1, #1
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8021d5e:	61fb      	str	r3, [r7, #28]

  return HAL_OK;
 8021d60:	4610      	mov	r0, r2
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8021d62:	6562      	str	r2, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8021d64:	f884 1051 	strb.w	r1, [r4, #81]	; 0x51
  return HAL_OK;
 8021d68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hspi->Lock = HAL_UNLOCKED;
 8021d6a:	f880 1050 	strb.w	r1, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8021d6e:	f001 fe77 	bl	8023a60 <HAL_SPI_MspInit>
 8021d72:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8021d74:	e7cd      	b.n	8021d12 <HAL_SPI_Init+0x16>
    return HAL_ERROR;
 8021d76:	2001      	movs	r0, #1
 8021d78:	4770      	bx	lr
 8021d7a:	bf00      	nop

08021d7c <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8021d7c:	2800      	cmp	r0, #0
 8021d7e:	f000 81d5 	beq.w	802212c <HAL_RCC_OscConfig+0x3b0>
{
 8021d82:	b570      	push	{r4, r5, r6, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8021d84:	6803      	ldr	r3, [r0, #0]
 8021d86:	07da      	lsls	r2, r3, #31
{
 8021d88:	b082      	sub	sp, #8
 8021d8a:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8021d8c:	d530      	bpl.n	8021df0 <HAL_RCC_OscConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8021d8e:	49aa      	ldr	r1, [pc, #680]	; (8022038 <HAL_RCC_OscConfig+0x2bc>)
 8021d90:	688a      	ldr	r2, [r1, #8]
 8021d92:	f002 020c 	and.w	r2, r2, #12
 8021d96:	2a04      	cmp	r2, #4
 8021d98:	f000 8122 	beq.w	8021fe0 <HAL_RCC_OscConfig+0x264>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8021d9c:	688a      	ldr	r2, [r1, #8]
 8021d9e:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8021da2:	2a08      	cmp	r2, #8
 8021da4:	f000 8118 	beq.w	8021fd8 <HAL_RCC_OscConfig+0x25c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8021da8:	6863      	ldr	r3, [r4, #4]
 8021daa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8021dae:	f000 8158 	beq.w	8022062 <HAL_RCC_OscConfig+0x2e6>
 8021db2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8021db6:	f000 80e4 	beq.w	8021f82 <HAL_RCC_OscConfig+0x206>
 8021dba:	4a9f      	ldr	r2, [pc, #636]	; (8022038 <HAL_RCC_OscConfig+0x2bc>)
 8021dbc:	6811      	ldr	r1, [r2, #0]
 8021dbe:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8021dc2:	6011      	str	r1, [r2, #0]
 8021dc4:	6811      	ldr	r1, [r2, #0]
 8021dc6:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8021dca:	6011      	str	r1, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8021dcc:	2b00      	cmp	r3, #0
 8021dce:	f040 80e1 	bne.w	8021f94 <HAL_RCC_OscConfig+0x218>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8021dd2:	f7ff f949 	bl	8021068 <HAL_GetTick>
 8021dd6:	4605      	mov	r5, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8021dd8:	e005      	b.n	8021de6 <HAL_RCC_OscConfig+0x6a>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8021dda:	f7ff f945 	bl	8021068 <HAL_GetTick>
 8021dde:	1b40      	subs	r0, r0, r5
 8021de0:	2864      	cmp	r0, #100	; 0x64
 8021de2:	f200 80f6 	bhi.w	8021fd2 <HAL_RCC_OscConfig+0x256>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8021de6:	4b94      	ldr	r3, [pc, #592]	; (8022038 <HAL_RCC_OscConfig+0x2bc>)
 8021de8:	681b      	ldr	r3, [r3, #0]
 8021dea:	0399      	lsls	r1, r3, #14
 8021dec:	d4f5      	bmi.n	8021dda <HAL_RCC_OscConfig+0x5e>
 8021dee:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8021df0:	079a      	lsls	r2, r3, #30
 8021df2:	d528      	bpl.n	8021e46 <HAL_RCC_OscConfig+0xca>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8021df4:	4a90      	ldr	r2, [pc, #576]	; (8022038 <HAL_RCC_OscConfig+0x2bc>)
 8021df6:	6891      	ldr	r1, [r2, #8]
 8021df8:	f011 0f0c 	tst.w	r1, #12
 8021dfc:	f000 808f 	beq.w	8021f1e <HAL_RCC_OscConfig+0x1a2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8021e00:	6891      	ldr	r1, [r2, #8]
 8021e02:	f001 010c 	and.w	r1, r1, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8021e06:	2908      	cmp	r1, #8
 8021e08:	f000 8085 	beq.w	8021f16 <HAL_RCC_OscConfig+0x19a>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8021e0c:	68e3      	ldr	r3, [r4, #12]
 8021e0e:	2b00      	cmp	r3, #0
 8021e10:	f000 810c 	beq.w	802202c <HAL_RCC_OscConfig+0x2b0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8021e14:	4b89      	ldr	r3, [pc, #548]	; (802203c <HAL_RCC_OscConfig+0x2c0>)
 8021e16:	2201      	movs	r2, #1
 8021e18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8021e1a:	f7ff f925 	bl	8021068 <HAL_GetTick>
 8021e1e:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8021e20:	e005      	b.n	8021e2e <HAL_RCC_OscConfig+0xb2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8021e22:	f7ff f921 	bl	8021068 <HAL_GetTick>
 8021e26:	1b40      	subs	r0, r0, r5
 8021e28:	2802      	cmp	r0, #2
 8021e2a:	f200 80d2 	bhi.w	8021fd2 <HAL_RCC_OscConfig+0x256>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8021e2e:	4b82      	ldr	r3, [pc, #520]	; (8022038 <HAL_RCC_OscConfig+0x2bc>)
 8021e30:	681a      	ldr	r2, [r3, #0]
 8021e32:	0790      	lsls	r0, r2, #30
 8021e34:	d5f5      	bpl.n	8021e22 <HAL_RCC_OscConfig+0xa6>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8021e36:	681a      	ldr	r2, [r3, #0]
 8021e38:	6921      	ldr	r1, [r4, #16]
 8021e3a:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8021e3e:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8021e42:	601a      	str	r2, [r3, #0]
 8021e44:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8021e46:	071a      	lsls	r2, r3, #28
 8021e48:	d451      	bmi.n	8021eee <HAL_RCC_OscConfig+0x172>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8021e4a:	0758      	lsls	r0, r3, #29
 8021e4c:	d530      	bpl.n	8021eb0 <HAL_RCC_OscConfig+0x134>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8021e4e:	4a7a      	ldr	r2, [pc, #488]	; (8022038 <HAL_RCC_OscConfig+0x2bc>)
 8021e50:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8021e52:	f013 5380 	ands.w	r3, r3, #268435456	; 0x10000000
 8021e56:	d07c      	beq.n	8021f52 <HAL_RCC_OscConfig+0x1d6>
    FlagStatus       pwrclkchanged = RESET;
 8021e58:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8021e5a:	4b79      	ldr	r3, [pc, #484]	; (8022040 <HAL_RCC_OscConfig+0x2c4>)
 8021e5c:	681a      	ldr	r2, [r3, #0]
 8021e5e:	05d1      	lsls	r1, r2, #23
 8021e60:	f140 80a6 	bpl.w	8021fb0 <HAL_RCC_OscConfig+0x234>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8021e64:	68a3      	ldr	r3, [r4, #8]
 8021e66:	2b01      	cmp	r3, #1
 8021e68:	f000 8125 	beq.w	80220b6 <HAL_RCC_OscConfig+0x33a>
 8021e6c:	2b05      	cmp	r3, #5
 8021e6e:	f000 80c1 	beq.w	8021ff4 <HAL_RCC_OscConfig+0x278>
 8021e72:	4a71      	ldr	r2, [pc, #452]	; (8022038 <HAL_RCC_OscConfig+0x2bc>)
 8021e74:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8021e76:	f021 0101 	bic.w	r1, r1, #1
 8021e7a:	6711      	str	r1, [r2, #112]	; 0x70
 8021e7c:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8021e7e:	f021 0104 	bic.w	r1, r1, #4
 8021e82:	6711      	str	r1, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8021e84:	2b00      	cmp	r3, #0
 8021e86:	f040 80be 	bne.w	8022006 <HAL_RCC_OscConfig+0x28a>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8021e8a:	f7ff f8ed 	bl	8021068 <HAL_GetTick>
 8021e8e:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8021e90:	e007      	b.n	8021ea2 <HAL_RCC_OscConfig+0x126>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8021e92:	f7ff f8e9 	bl	8021068 <HAL_GetTick>
 8021e96:	f241 3388 	movw	r3, #5000	; 0x1388
 8021e9a:	1b80      	subs	r0, r0, r6
 8021e9c:	4298      	cmp	r0, r3
 8021e9e:	f200 8098 	bhi.w	8021fd2 <HAL_RCC_OscConfig+0x256>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8021ea2:	4b65      	ldr	r3, [pc, #404]	; (8022038 <HAL_RCC_OscConfig+0x2bc>)
 8021ea4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8021ea6:	0798      	lsls	r0, r3, #30
 8021ea8:	d4f3      	bmi.n	8021e92 <HAL_RCC_OscConfig+0x116>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8021eaa:	2d00      	cmp	r5, #0
 8021eac:	f040 8109 	bne.w	80220c2 <HAL_RCC_OscConfig+0x346>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8021eb0:	69a0      	ldr	r0, [r4, #24]
 8021eb2:	b1c8      	cbz	r0, 8021ee8 <HAL_RCC_OscConfig+0x16c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8021eb4:	4a60      	ldr	r2, [pc, #384]	; (8022038 <HAL_RCC_OscConfig+0x2bc>)
 8021eb6:	6893      	ldr	r3, [r2, #8]
 8021eb8:	f003 030c 	and.w	r3, r3, #12
 8021ebc:	2b08      	cmp	r3, #8
 8021ebe:	f000 80d6 	beq.w	802206e <HAL_RCC_OscConfig+0x2f2>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8021ec2:	4b60      	ldr	r3, [pc, #384]	; (8022044 <HAL_RCC_OscConfig+0x2c8>)
 8021ec4:	2200      	movs	r2, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8021ec6:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8021ec8:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8021eca:	f000 8100 	beq.w	80220ce <HAL_RCC_OscConfig+0x352>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8021ece:	f7ff f8cb 	bl	8021068 <HAL_GetTick>
 8021ed2:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8021ed4:	e004      	b.n	8021ee0 <HAL_RCC_OscConfig+0x164>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8021ed6:	f7ff f8c7 	bl	8021068 <HAL_GetTick>
 8021eda:	1b00      	subs	r0, r0, r4
 8021edc:	2802      	cmp	r0, #2
 8021ede:	d878      	bhi.n	8021fd2 <HAL_RCC_OscConfig+0x256>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8021ee0:	4b55      	ldr	r3, [pc, #340]	; (8022038 <HAL_RCC_OscConfig+0x2bc>)
 8021ee2:	681b      	ldr	r3, [r3, #0]
 8021ee4:	019b      	lsls	r3, r3, #6
 8021ee6:	d4f6      	bmi.n	8021ed6 <HAL_RCC_OscConfig+0x15a>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8021ee8:	2000      	movs	r0, #0
}
 8021eea:	b002      	add	sp, #8
 8021eec:	bd70      	pop	{r4, r5, r6, pc}
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8021eee:	6963      	ldr	r3, [r4, #20]
 8021ef0:	b1fb      	cbz	r3, 8021f32 <HAL_RCC_OscConfig+0x1b6>
      __HAL_RCC_LSI_ENABLE();
 8021ef2:	4b55      	ldr	r3, [pc, #340]	; (8022048 <HAL_RCC_OscConfig+0x2cc>)
 8021ef4:	2201      	movs	r2, #1
 8021ef6:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8021ef8:	f7ff f8b6 	bl	8021068 <HAL_GetTick>
 8021efc:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8021efe:	e004      	b.n	8021f0a <HAL_RCC_OscConfig+0x18e>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8021f00:	f7ff f8b2 	bl	8021068 <HAL_GetTick>
 8021f04:	1b40      	subs	r0, r0, r5
 8021f06:	2802      	cmp	r0, #2
 8021f08:	d863      	bhi.n	8021fd2 <HAL_RCC_OscConfig+0x256>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8021f0a:	4b4b      	ldr	r3, [pc, #300]	; (8022038 <HAL_RCC_OscConfig+0x2bc>)
 8021f0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8021f0e:	079b      	lsls	r3, r3, #30
 8021f10:	d5f6      	bpl.n	8021f00 <HAL_RCC_OscConfig+0x184>
 8021f12:	6823      	ldr	r3, [r4, #0]
 8021f14:	e799      	b.n	8021e4a <HAL_RCC_OscConfig+0xce>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8021f16:	6852      	ldr	r2, [r2, #4]
 8021f18:	0256      	lsls	r6, r2, #9
 8021f1a:	f53f af77 	bmi.w	8021e0c <HAL_RCC_OscConfig+0x90>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8021f1e:	4a46      	ldr	r2, [pc, #280]	; (8022038 <HAL_RCC_OscConfig+0x2bc>)
 8021f20:	6812      	ldr	r2, [r2, #0]
 8021f22:	0795      	lsls	r5, r2, #30
 8021f24:	d521      	bpl.n	8021f6a <HAL_RCC_OscConfig+0x1ee>
 8021f26:	68e2      	ldr	r2, [r4, #12]
 8021f28:	2a01      	cmp	r2, #1
 8021f2a:	d01e      	beq.n	8021f6a <HAL_RCC_OscConfig+0x1ee>
        return HAL_ERROR;
 8021f2c:	2001      	movs	r0, #1
}
 8021f2e:	b002      	add	sp, #8
 8021f30:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_RCC_LSI_DISABLE();
 8021f32:	4a45      	ldr	r2, [pc, #276]	; (8022048 <HAL_RCC_OscConfig+0x2cc>)
 8021f34:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8021f36:	f7ff f897 	bl	8021068 <HAL_GetTick>
 8021f3a:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8021f3c:	e004      	b.n	8021f48 <HAL_RCC_OscConfig+0x1cc>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8021f3e:	f7ff f893 	bl	8021068 <HAL_GetTick>
 8021f42:	1b40      	subs	r0, r0, r5
 8021f44:	2802      	cmp	r0, #2
 8021f46:	d844      	bhi.n	8021fd2 <HAL_RCC_OscConfig+0x256>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8021f48:	4b3b      	ldr	r3, [pc, #236]	; (8022038 <HAL_RCC_OscConfig+0x2bc>)
 8021f4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8021f4c:	079e      	lsls	r6, r3, #30
 8021f4e:	d4f6      	bmi.n	8021f3e <HAL_RCC_OscConfig+0x1c2>
 8021f50:	e7df      	b.n	8021f12 <HAL_RCC_OscConfig+0x196>
      __HAL_RCC_PWR_CLK_ENABLE();
 8021f52:	9301      	str	r3, [sp, #4]
 8021f54:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8021f56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8021f5a:	6413      	str	r3, [r2, #64]	; 0x40
 8021f5c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8021f5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8021f62:	9301      	str	r3, [sp, #4]
 8021f64:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8021f66:	2501      	movs	r5, #1
 8021f68:	e777      	b.n	8021e5a <HAL_RCC_OscConfig+0xde>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8021f6a:	4933      	ldr	r1, [pc, #204]	; (8022038 <HAL_RCC_OscConfig+0x2bc>)
 8021f6c:	6920      	ldr	r0, [r4, #16]
 8021f6e:	680a      	ldr	r2, [r1, #0]
 8021f70:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8021f74:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8021f78:	600a      	str	r2, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8021f7a:	071a      	lsls	r2, r3, #28
 8021f7c:	f57f af65 	bpl.w	8021e4a <HAL_RCC_OscConfig+0xce>
 8021f80:	e7b5      	b.n	8021eee <HAL_RCC_OscConfig+0x172>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8021f82:	4b2d      	ldr	r3, [pc, #180]	; (8022038 <HAL_RCC_OscConfig+0x2bc>)
 8021f84:	681a      	ldr	r2, [r3, #0]
 8021f86:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8021f8a:	601a      	str	r2, [r3, #0]
 8021f8c:	681a      	ldr	r2, [r3, #0]
 8021f8e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8021f92:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8021f94:	f7ff f868 	bl	8021068 <HAL_GetTick>
 8021f98:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8021f9a:	e004      	b.n	8021fa6 <HAL_RCC_OscConfig+0x22a>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8021f9c:	f7ff f864 	bl	8021068 <HAL_GetTick>
 8021fa0:	1b40      	subs	r0, r0, r5
 8021fa2:	2864      	cmp	r0, #100	; 0x64
 8021fa4:	d815      	bhi.n	8021fd2 <HAL_RCC_OscConfig+0x256>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8021fa6:	4b24      	ldr	r3, [pc, #144]	; (8022038 <HAL_RCC_OscConfig+0x2bc>)
 8021fa8:	681b      	ldr	r3, [r3, #0]
 8021faa:	0398      	lsls	r0, r3, #14
 8021fac:	d5f6      	bpl.n	8021f9c <HAL_RCC_OscConfig+0x220>
 8021fae:	e71e      	b.n	8021dee <HAL_RCC_OscConfig+0x72>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8021fb0:	681a      	ldr	r2, [r3, #0]
 8021fb2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8021fb6:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8021fb8:	f7ff f856 	bl	8021068 <HAL_GetTick>
 8021fbc:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8021fbe:	4b20      	ldr	r3, [pc, #128]	; (8022040 <HAL_RCC_OscConfig+0x2c4>)
 8021fc0:	681b      	ldr	r3, [r3, #0]
 8021fc2:	05da      	lsls	r2, r3, #23
 8021fc4:	f53f af4e 	bmi.w	8021e64 <HAL_RCC_OscConfig+0xe8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8021fc8:	f7ff f84e 	bl	8021068 <HAL_GetTick>
 8021fcc:	1b80      	subs	r0, r0, r6
 8021fce:	2802      	cmp	r0, #2
 8021fd0:	d9f5      	bls.n	8021fbe <HAL_RCC_OscConfig+0x242>
            return HAL_TIMEOUT;
 8021fd2:	2003      	movs	r0, #3
}
 8021fd4:	b002      	add	sp, #8
 8021fd6:	bd70      	pop	{r4, r5, r6, pc}
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8021fd8:	684a      	ldr	r2, [r1, #4]
 8021fda:	0256      	lsls	r6, r2, #9
 8021fdc:	f57f aee4 	bpl.w	8021da8 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8021fe0:	4a15      	ldr	r2, [pc, #84]	; (8022038 <HAL_RCC_OscConfig+0x2bc>)
 8021fe2:	6812      	ldr	r2, [r2, #0]
 8021fe4:	0395      	lsls	r5, r2, #14
 8021fe6:	f57f af03 	bpl.w	8021df0 <HAL_RCC_OscConfig+0x74>
 8021fea:	6862      	ldr	r2, [r4, #4]
 8021fec:	2a00      	cmp	r2, #0
 8021fee:	f47f aeff 	bne.w	8021df0 <HAL_RCC_OscConfig+0x74>
 8021ff2:	e79b      	b.n	8021f2c <HAL_RCC_OscConfig+0x1b0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8021ff4:	4b10      	ldr	r3, [pc, #64]	; (8022038 <HAL_RCC_OscConfig+0x2bc>)
 8021ff6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8021ff8:	f042 0204 	orr.w	r2, r2, #4
 8021ffc:	671a      	str	r2, [r3, #112]	; 0x70
 8021ffe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8022000:	f042 0201 	orr.w	r2, r2, #1
 8022004:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 8022006:	f7ff f82f 	bl	8021068 <HAL_GetTick>
 802200a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 802200c:	e006      	b.n	802201c <HAL_RCC_OscConfig+0x2a0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 802200e:	f7ff f82b 	bl	8021068 <HAL_GetTick>
 8022012:	f241 3388 	movw	r3, #5000	; 0x1388
 8022016:	1b80      	subs	r0, r0, r6
 8022018:	4298      	cmp	r0, r3
 802201a:	d8da      	bhi.n	8021fd2 <HAL_RCC_OscConfig+0x256>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 802201c:	4b06      	ldr	r3, [pc, #24]	; (8022038 <HAL_RCC_OscConfig+0x2bc>)
 802201e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8022020:	079b      	lsls	r3, r3, #30
 8022022:	d5f4      	bpl.n	802200e <HAL_RCC_OscConfig+0x292>
    if(pwrclkchanged == SET)
 8022024:	2d00      	cmp	r5, #0
 8022026:	f43f af43 	beq.w	8021eb0 <HAL_RCC_OscConfig+0x134>
 802202a:	e04a      	b.n	80220c2 <HAL_RCC_OscConfig+0x346>
        __HAL_RCC_HSI_DISABLE();
 802202c:	4a03      	ldr	r2, [pc, #12]	; (802203c <HAL_RCC_OscConfig+0x2c0>)
 802202e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8022030:	f7ff f81a 	bl	8021068 <HAL_GetTick>
 8022034:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8022036:	e00e      	b.n	8022056 <HAL_RCC_OscConfig+0x2da>
 8022038:	40023800 	.word	0x40023800
 802203c:	42470000 	.word	0x42470000
 8022040:	40007000 	.word	0x40007000
 8022044:	42470060 	.word	0x42470060
 8022048:	42470e80 	.word	0x42470e80
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 802204c:	f7ff f80c 	bl	8021068 <HAL_GetTick>
 8022050:	1b40      	subs	r0, r0, r5
 8022052:	2802      	cmp	r0, #2
 8022054:	d8bd      	bhi.n	8021fd2 <HAL_RCC_OscConfig+0x256>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8022056:	4b36      	ldr	r3, [pc, #216]	; (8022130 <HAL_RCC_OscConfig+0x3b4>)
 8022058:	681b      	ldr	r3, [r3, #0]
 802205a:	0799      	lsls	r1, r3, #30
 802205c:	d4f6      	bmi.n	802204c <HAL_RCC_OscConfig+0x2d0>
 802205e:	6823      	ldr	r3, [r4, #0]
 8022060:	e6f1      	b.n	8021e46 <HAL_RCC_OscConfig+0xca>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8022062:	4a33      	ldr	r2, [pc, #204]	; (8022130 <HAL_RCC_OscConfig+0x3b4>)
 8022064:	6813      	ldr	r3, [r2, #0]
 8022066:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 802206a:	6013      	str	r3, [r2, #0]
 802206c:	e792      	b.n	8021f94 <HAL_RCC_OscConfig+0x218>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 802206e:	2801      	cmp	r0, #1
 8022070:	f43f af3b 	beq.w	8021eea <HAL_RCC_OscConfig+0x16e>
        pll_config = RCC->CFGR;
 8022074:	6893      	ldr	r3, [r2, #8]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8022076:	69e2      	ldr	r2, [r4, #28]
 8022078:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
 802207c:	4291      	cmp	r1, r2
 802207e:	f47f af55 	bne.w	8021f2c <HAL_RCC_OscConfig+0x1b0>
 8022082:	6a22      	ldr	r2, [r4, #32]
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8022084:	f003 013f 	and.w	r1, r3, #63	; 0x3f
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8022088:	4291      	cmp	r1, r2
 802208a:	f47f af4f 	bne.w	8021f2c <HAL_RCC_OscConfig+0x1b0>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 802208e:	f647 72c0 	movw	r2, #32704	; 0x7fc0
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8022092:	6a61      	ldr	r1, [r4, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8022094:	401a      	ands	r2, r3
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8022096:	428a      	cmp	r2, r1
 8022098:	f47f af48 	bne.w	8021f2c <HAL_RCC_OscConfig+0x1b0>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 802209c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 802209e:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80220a2:	4291      	cmp	r1, r2
 80220a4:	f47f af42 	bne.w	8021f2c <HAL_RCC_OscConfig+0x1b0>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80220a8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80220aa:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    return HAL_ERROR;
 80220ae:	1a18      	subs	r0, r3, r0
 80220b0:	bf18      	it	ne
 80220b2:	2001      	movne	r0, #1
 80220b4:	e719      	b.n	8021eea <HAL_RCC_OscConfig+0x16e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80220b6:	4a1e      	ldr	r2, [pc, #120]	; (8022130 <HAL_RCC_OscConfig+0x3b4>)
 80220b8:	6f13      	ldr	r3, [r2, #112]	; 0x70
 80220ba:	f043 0301 	orr.w	r3, r3, #1
 80220be:	6713      	str	r3, [r2, #112]	; 0x70
 80220c0:	e7a1      	b.n	8022006 <HAL_RCC_OscConfig+0x28a>
      __HAL_RCC_PWR_CLK_DISABLE();
 80220c2:	4a1b      	ldr	r2, [pc, #108]	; (8022130 <HAL_RCC_OscConfig+0x3b4>)
 80220c4:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80220c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80220ca:	6413      	str	r3, [r2, #64]	; 0x40
 80220cc:	e6f0      	b.n	8021eb0 <HAL_RCC_OscConfig+0x134>
        tickstart = HAL_GetTick();
 80220ce:	f7fe ffcb 	bl	8021068 <HAL_GetTick>
 80220d2:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80220d4:	e005      	b.n	80220e2 <HAL_RCC_OscConfig+0x366>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80220d6:	f7fe ffc7 	bl	8021068 <HAL_GetTick>
 80220da:	1b40      	subs	r0, r0, r5
 80220dc:	2802      	cmp	r0, #2
 80220de:	f63f af78 	bhi.w	8021fd2 <HAL_RCC_OscConfig+0x256>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80220e2:	4b13      	ldr	r3, [pc, #76]	; (8022130 <HAL_RCC_OscConfig+0x3b4>)
 80220e4:	681a      	ldr	r2, [r3, #0]
 80220e6:	0191      	lsls	r1, r2, #6
 80220e8:	d4f5      	bmi.n	80220d6 <HAL_RCC_OscConfig+0x35a>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80220ea:	69e2      	ldr	r2, [r4, #28]
 80220ec:	6a26      	ldr	r6, [r4, #32]
 80220ee:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80220f0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80220f2:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 80220f4:	480f      	ldr	r0, [pc, #60]	; (8022134 <HAL_RCC_OscConfig+0x3b8>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80220f6:	4332      	orrs	r2, r6
 80220f8:	ea42 1285 	orr.w	r2, r2, r5, lsl #6
 80220fc:	0849      	lsrs	r1, r1, #1
 80220fe:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
 8022102:	3901      	subs	r1, #1
 8022104:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
        __HAL_RCC_PLL_ENABLE();
 8022108:	2101      	movs	r1, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 802210a:	605a      	str	r2, [r3, #4]
        __HAL_RCC_PLL_ENABLE();
 802210c:	6001      	str	r1, [r0, #0]
        tickstart = HAL_GetTick();
 802210e:	f7fe ffab 	bl	8021068 <HAL_GetTick>
 8022112:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8022114:	e005      	b.n	8022122 <HAL_RCC_OscConfig+0x3a6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8022116:	f7fe ffa7 	bl	8021068 <HAL_GetTick>
 802211a:	1b00      	subs	r0, r0, r4
 802211c:	2802      	cmp	r0, #2
 802211e:	f63f af58 	bhi.w	8021fd2 <HAL_RCC_OscConfig+0x256>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8022122:	4b03      	ldr	r3, [pc, #12]	; (8022130 <HAL_RCC_OscConfig+0x3b4>)
 8022124:	681b      	ldr	r3, [r3, #0]
 8022126:	019a      	lsls	r2, r3, #6
 8022128:	d5f5      	bpl.n	8022116 <HAL_RCC_OscConfig+0x39a>
 802212a:	e6dd      	b.n	8021ee8 <HAL_RCC_OscConfig+0x16c>
    return HAL_ERROR;
 802212c:	2001      	movs	r0, #1
}
 802212e:	4770      	bx	lr
 8022130:	40023800 	.word	0x40023800
 8022134:	42470060 	.word	0x42470060

08022138 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8022138:	4917      	ldr	r1, [pc, #92]	; (8022198 <HAL_RCC_GetSysClockFreq+0x60>)
{
 802213a:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 802213c:	688b      	ldr	r3, [r1, #8]
 802213e:	f003 030c 	and.w	r3, r3, #12
 8022142:	2b04      	cmp	r3, #4
 8022144:	d01b      	beq.n	802217e <HAL_RCC_GetSysClockFreq+0x46>
 8022146:	2b08      	cmp	r3, #8
 8022148:	d117      	bne.n	802217a <HAL_RCC_GetSysClockFreq+0x42>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 802214a:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 802214c:	684b      	ldr	r3, [r1, #4]
 802214e:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8022152:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8022156:	d114      	bne.n	8022182 <HAL_RCC_GetSysClockFreq+0x4a>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8022158:	6849      	ldr	r1, [r1, #4]
 802215a:	4810      	ldr	r0, [pc, #64]	; (802219c <HAL_RCC_GetSysClockFreq+0x64>)
 802215c:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8022160:	fba1 0100 	umull	r0, r1, r1, r0
 8022164:	f7fe fd84 	bl	8020c70 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8022168:	4b0b      	ldr	r3, [pc, #44]	; (8022198 <HAL_RCC_GetSysClockFreq+0x60>)
 802216a:	685b      	ldr	r3, [r3, #4]
 802216c:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8022170:	3301      	adds	r3, #1
 8022172:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8022174:	fbb0 f0f3 	udiv	r0, r0, r3
 8022178:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 802217a:	4808      	ldr	r0, [pc, #32]	; (802219c <HAL_RCC_GetSysClockFreq+0x64>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 802217c:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 802217e:	4808      	ldr	r0, [pc, #32]	; (80221a0 <HAL_RCC_GetSysClockFreq+0x68>)
 8022180:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8022182:	684b      	ldr	r3, [r1, #4]
 8022184:	4806      	ldr	r0, [pc, #24]	; (80221a0 <HAL_RCC_GetSysClockFreq+0x68>)
 8022186:	f3c3 1388 	ubfx	r3, r3, #6, #9
 802218a:	fba3 0100 	umull	r0, r1, r3, r0
 802218e:	2300      	movs	r3, #0
 8022190:	f7fe fd6e 	bl	8020c70 <__aeabi_uldivmod>
 8022194:	e7e8      	b.n	8022168 <HAL_RCC_GetSysClockFreq+0x30>
 8022196:	bf00      	nop
 8022198:	40023800 	.word	0x40023800
 802219c:	00f42400 	.word	0x00f42400
 80221a0:	017d7840 	.word	0x017d7840

080221a4 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 80221a4:	b160      	cbz	r0, 80221c0 <HAL_RCC_ClockConfig+0x1c>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80221a6:	4a47      	ldr	r2, [pc, #284]	; (80222c4 <HAL_RCC_ClockConfig+0x120>)
 80221a8:	6813      	ldr	r3, [r2, #0]
 80221aa:	f003 030f 	and.w	r3, r3, #15
 80221ae:	428b      	cmp	r3, r1
 80221b0:	d208      	bcs.n	80221c4 <HAL_RCC_ClockConfig+0x20>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80221b2:	b2cb      	uxtb	r3, r1
 80221b4:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80221b6:	6813      	ldr	r3, [r2, #0]
 80221b8:	f003 030f 	and.w	r3, r3, #15
 80221bc:	4299      	cmp	r1, r3
 80221be:	d001      	beq.n	80221c4 <HAL_RCC_ClockConfig+0x20>
    return HAL_ERROR;
 80221c0:	2001      	movs	r0, #1
}
 80221c2:	4770      	bx	lr
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80221c4:	6803      	ldr	r3, [r0, #0]
{
 80221c6:	b570      	push	{r4, r5, r6, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80221c8:	079d      	lsls	r5, r3, #30
 80221ca:	d514      	bpl.n	80221f6 <HAL_RCC_ClockConfig+0x52>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80221cc:	075c      	lsls	r4, r3, #29
 80221ce:	d504      	bpl.n	80221da <HAL_RCC_ClockConfig+0x36>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80221d0:	4c3d      	ldr	r4, [pc, #244]	; (80222c8 <HAL_RCC_ClockConfig+0x124>)
 80221d2:	68a2      	ldr	r2, [r4, #8]
 80221d4:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 80221d8:	60a2      	str	r2, [r4, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80221da:	071a      	lsls	r2, r3, #28
 80221dc:	d504      	bpl.n	80221e8 <HAL_RCC_ClockConfig+0x44>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80221de:	4c3a      	ldr	r4, [pc, #232]	; (80222c8 <HAL_RCC_ClockConfig+0x124>)
 80221e0:	68a2      	ldr	r2, [r4, #8]
 80221e2:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 80221e6:	60a2      	str	r2, [r4, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80221e8:	4c37      	ldr	r4, [pc, #220]	; (80222c8 <HAL_RCC_ClockConfig+0x124>)
 80221ea:	6885      	ldr	r5, [r0, #8]
 80221ec:	68a2      	ldr	r2, [r4, #8]
 80221ee:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80221f2:	432a      	orrs	r2, r5
 80221f4:	60a2      	str	r2, [r4, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80221f6:	07db      	lsls	r3, r3, #31
 80221f8:	4604      	mov	r4, r0
 80221fa:	460d      	mov	r5, r1
 80221fc:	d522      	bpl.n	8022244 <HAL_RCC_ClockConfig+0xa0>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80221fe:	6842      	ldr	r2, [r0, #4]
 8022200:	2a01      	cmp	r2, #1
 8022202:	d059      	beq.n	80222b8 <HAL_RCC_ClockConfig+0x114>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8022204:	1e93      	subs	r3, r2, #2
 8022206:	2b01      	cmp	r3, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8022208:	4b2f      	ldr	r3, [pc, #188]	; (80222c8 <HAL_RCC_ClockConfig+0x124>)
 802220a:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 802220c:	d94f      	bls.n	80222ae <HAL_RCC_ClockConfig+0x10a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 802220e:	0799      	lsls	r1, r3, #30
 8022210:	d525      	bpl.n	802225e <HAL_RCC_ClockConfig+0xba>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8022212:	492d      	ldr	r1, [pc, #180]	; (80222c8 <HAL_RCC_ClockConfig+0x124>)
 8022214:	688b      	ldr	r3, [r1, #8]
 8022216:	f023 0303 	bic.w	r3, r3, #3
 802221a:	4313      	orrs	r3, r2
 802221c:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 802221e:	f7fe ff23 	bl	8021068 <HAL_GetTick>
 8022222:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8022224:	e006      	b.n	8022234 <HAL_RCC_ClockConfig+0x90>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8022226:	f7fe ff1f 	bl	8021068 <HAL_GetTick>
 802222a:	f241 3388 	movw	r3, #5000	; 0x1388
 802222e:	1b80      	subs	r0, r0, r6
 8022230:	4298      	cmp	r0, r3
 8022232:	d83f      	bhi.n	80222b4 <HAL_RCC_ClockConfig+0x110>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8022234:	4b24      	ldr	r3, [pc, #144]	; (80222c8 <HAL_RCC_ClockConfig+0x124>)
 8022236:	6862      	ldr	r2, [r4, #4]
 8022238:	689b      	ldr	r3, [r3, #8]
 802223a:	f003 030c 	and.w	r3, r3, #12
 802223e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8022242:	d1f0      	bne.n	8022226 <HAL_RCC_ClockConfig+0x82>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8022244:	4a1f      	ldr	r2, [pc, #124]	; (80222c4 <HAL_RCC_ClockConfig+0x120>)
 8022246:	6813      	ldr	r3, [r2, #0]
 8022248:	f003 030f 	and.w	r3, r3, #15
 802224c:	429d      	cmp	r5, r3
 802224e:	d208      	bcs.n	8022262 <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8022250:	b2eb      	uxtb	r3, r5
 8022252:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8022254:	6813      	ldr	r3, [r2, #0]
 8022256:	f003 030f 	and.w	r3, r3, #15
 802225a:	429d      	cmp	r5, r3
 802225c:	d001      	beq.n	8022262 <HAL_RCC_ClockConfig+0xbe>
    return HAL_ERROR;
 802225e:	2001      	movs	r0, #1
 8022260:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8022262:	6823      	ldr	r3, [r4, #0]
 8022264:	075a      	lsls	r2, r3, #29
 8022266:	d506      	bpl.n	8022276 <HAL_RCC_ClockConfig+0xd2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8022268:	4917      	ldr	r1, [pc, #92]	; (80222c8 <HAL_RCC_ClockConfig+0x124>)
 802226a:	68e0      	ldr	r0, [r4, #12]
 802226c:	688a      	ldr	r2, [r1, #8]
 802226e:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8022272:	4302      	orrs	r2, r0
 8022274:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8022276:	071b      	lsls	r3, r3, #28
 8022278:	d507      	bpl.n	802228a <HAL_RCC_ClockConfig+0xe6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 802227a:	4a13      	ldr	r2, [pc, #76]	; (80222c8 <HAL_RCC_ClockConfig+0x124>)
 802227c:	6921      	ldr	r1, [r4, #16]
 802227e:	6893      	ldr	r3, [r2, #8]
 8022280:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8022284:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8022288:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 802228a:	f7ff ff55 	bl	8022138 <HAL_RCC_GetSysClockFreq>
 802228e:	4b0e      	ldr	r3, [pc, #56]	; (80222c8 <HAL_RCC_ClockConfig+0x124>)
 8022290:	4c0e      	ldr	r4, [pc, #56]	; (80222cc <HAL_RCC_ClockConfig+0x128>)
 8022292:	689b      	ldr	r3, [r3, #8]
  HAL_InitTick (uwTickPrio);
 8022294:	490e      	ldr	r1, [pc, #56]	; (80222d0 <HAL_RCC_ClockConfig+0x12c>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8022296:	4a0f      	ldr	r2, [pc, #60]	; (80222d4 <HAL_RCC_ClockConfig+0x130>)
 8022298:	f3c3 1303 	ubfx	r3, r3, #4, #4
 802229c:	5ce3      	ldrb	r3, [r4, r3]
 802229e:	fa20 f303 	lsr.w	r3, r0, r3
  HAL_InitTick (uwTickPrio);
 80222a2:	6808      	ldr	r0, [r1, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80222a4:	6013      	str	r3, [r2, #0]
  HAL_InitTick (uwTickPrio);
 80222a6:	f7fe fe95 	bl	8020fd4 <HAL_InitTick>
  return HAL_OK;
 80222aa:	2000      	movs	r0, #0
 80222ac:	bd70      	pop	{r4, r5, r6, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80222ae:	0198      	lsls	r0, r3, #6
 80222b0:	d4af      	bmi.n	8022212 <HAL_RCC_ClockConfig+0x6e>
 80222b2:	e7d4      	b.n	802225e <HAL_RCC_ClockConfig+0xba>
        return HAL_TIMEOUT;
 80222b4:	2003      	movs	r0, #3
}
 80222b6:	bd70      	pop	{r4, r5, r6, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80222b8:	4b03      	ldr	r3, [pc, #12]	; (80222c8 <HAL_RCC_ClockConfig+0x124>)
 80222ba:	681b      	ldr	r3, [r3, #0]
 80222bc:	039e      	lsls	r6, r3, #14
 80222be:	d4a8      	bmi.n	8022212 <HAL_RCC_ClockConfig+0x6e>
 80222c0:	e7cd      	b.n	802225e <HAL_RCC_ClockConfig+0xba>
 80222c2:	bf00      	nop
 80222c4:	40023c00 	.word	0x40023c00
 80222c8:	40023800 	.word	0x40023800
 80222cc:	080283d4 	.word	0x080283d4
 80222d0:	20000004 	.word	0x20000004
 80222d4:	20000008 	.word	0x20000008

080222d8 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80222d8:	4b04      	ldr	r3, [pc, #16]	; (80222ec <HAL_RCC_GetPCLK1Freq+0x14>)
 80222da:	4a05      	ldr	r2, [pc, #20]	; (80222f0 <HAL_RCC_GetPCLK1Freq+0x18>)
 80222dc:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 80222de:	4905      	ldr	r1, [pc, #20]	; (80222f4 <HAL_RCC_GetPCLK1Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80222e0:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80222e4:	6808      	ldr	r0, [r1, #0]
 80222e6:	5cd3      	ldrb	r3, [r2, r3]
}
 80222e8:	40d8      	lsrs	r0, r3
 80222ea:	4770      	bx	lr
 80222ec:	40023800 	.word	0x40023800
 80222f0:	080283e4 	.word	0x080283e4
 80222f4:	20000008 	.word	0x20000008

080222f8 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80222f8:	4b04      	ldr	r3, [pc, #16]	; (802230c <HAL_RCC_GetPCLK2Freq+0x14>)
 80222fa:	4a05      	ldr	r2, [pc, #20]	; (8022310 <HAL_RCC_GetPCLK2Freq+0x18>)
 80222fc:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 80222fe:	4905      	ldr	r1, [pc, #20]	; (8022314 <HAL_RCC_GetPCLK2Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8022300:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8022304:	6808      	ldr	r0, [r1, #0]
 8022306:	5cd3      	ldrb	r3, [r2, r3]
}
 8022308:	40d8      	lsrs	r0, r3
 802230a:	4770      	bx	lr
 802230c:	40023800 	.word	0x40023800
 8022310:	080283e4 	.word	0x080283e4
 8022314:	20000008 	.word	0x20000008

08022318 <HAL_RNG_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8022318:	b1b0      	cbz	r0, 8022348 <HAL_RNG_Init+0x30>
{
 802231a:	b538      	push	{r3, r4, r5, lr}

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 802231c:	7943      	ldrb	r3, [r0, #5]
 802231e:	4604      	mov	r4, r0
 8022320:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8022324:	b163      	cbz	r3, 8022340 <HAL_RNG_Init+0x28>
  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8022326:	6821      	ldr	r1, [r4, #0]
  hrng->State = HAL_RNG_STATE_BUSY;
 8022328:	2302      	movs	r3, #2
 802232a:	7163      	strb	r3, [r4, #5]
  __HAL_RNG_ENABLE(hrng);
 802232c:	680b      	ldr	r3, [r1, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 802232e:	2200      	movs	r2, #0
  hrng->State = HAL_RNG_STATE_READY;
 8022330:	2501      	movs	r5, #1
  __HAL_RNG_ENABLE(hrng);
 8022332:	f043 0304 	orr.w	r3, r3, #4
 8022336:	600b      	str	r3, [r1, #0]

  /* Return function status */
  return HAL_OK;
 8022338:	4610      	mov	r0, r2
  hrng->State = HAL_RNG_STATE_READY;
 802233a:	7165      	strb	r5, [r4, #5]
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 802233c:	60a2      	str	r2, [r4, #8]
  return HAL_OK;
 802233e:	bd38      	pop	{r3, r4, r5, pc}
    hrng->Lock = HAL_UNLOCKED;
 8022340:	7102      	strb	r2, [r0, #4]
    HAL_RNG_MspInit(hrng);
 8022342:	f001 fb75 	bl	8023a30 <HAL_RNG_MspInit>
 8022346:	e7ee      	b.n	8022326 <HAL_RNG_Init+0xe>
    return HAL_ERROR;
 8022348:	2001      	movs	r0, #1
 802234a:	4770      	bx	lr

0802234c <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 802234c:	2800      	cmp	r0, #0
 802234e:	f000 8098 	beq.w	8022482 <HAL_TIM_Base_Init+0x136>
{
 8022352:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8022354:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8022358:	4604      	mov	r4, r0
 802235a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 802235e:	2b00      	cmp	r3, #0
 8022360:	d066      	beq.n	8022430 <HAL_TIM_Base_Init+0xe4>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8022362:	6823      	ldr	r3, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8022364:	4948      	ldr	r1, [pc, #288]	; (8022488 <HAL_TIM_Base_Init+0x13c>)
  htim->State = HAL_TIM_STATE_BUSY;
 8022366:	2202      	movs	r2, #2
 8022368:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 802236c:	428b      	cmp	r3, r1
  tmpcr1 = TIMx->CR1;
 802236e:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8022370:	d063      	beq.n	802243a <HAL_TIM_Base_Init+0xee>
 8022372:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8022376:	d072      	beq.n	802245e <HAL_TIM_Base_Init+0x112>
 8022378:	f5a1 417c 	sub.w	r1, r1, #64512	; 0xfc00
 802237c:	428b      	cmp	r3, r1
 802237e:	d02d      	beq.n	80223dc <HAL_TIM_Base_Init+0x90>
 8022380:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8022384:	428b      	cmp	r3, r1
 8022386:	d029      	beq.n	80223dc <HAL_TIM_Base_Init+0x90>
 8022388:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 802238c:	428b      	cmp	r3, r1
 802238e:	d025      	beq.n	80223dc <HAL_TIM_Base_Init+0x90>
 8022390:	f501 4178 	add.w	r1, r1, #63488	; 0xf800
 8022394:	428b      	cmp	r3, r1
 8022396:	d021      	beq.n	80223dc <HAL_TIM_Base_Init+0x90>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8022398:	f501 5170 	add.w	r1, r1, #15360	; 0x3c00
 802239c:	428b      	cmp	r3, r1
 802239e:	d039      	beq.n	8022414 <HAL_TIM_Base_Init+0xc8>
 80223a0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80223a4:	428b      	cmp	r3, r1
 80223a6:	d035      	beq.n	8022414 <HAL_TIM_Base_Init+0xc8>
 80223a8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80223ac:	428b      	cmp	r3, r1
 80223ae:	d031      	beq.n	8022414 <HAL_TIM_Base_Init+0xc8>
 80223b0:	f5a1 3198 	sub.w	r1, r1, #77824	; 0x13000
 80223b4:	428b      	cmp	r3, r1
 80223b6:	d02d      	beq.n	8022414 <HAL_TIM_Base_Init+0xc8>
 80223b8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80223bc:	428b      	cmp	r3, r1
 80223be:	d029      	beq.n	8022414 <HAL_TIM_Base_Init+0xc8>
 80223c0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80223c4:	428b      	cmp	r3, r1
 80223c6:	d025      	beq.n	8022414 <HAL_TIM_Base_Init+0xc8>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80223c8:	69a5      	ldr	r5, [r4, #24]

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80223ca:	68e0      	ldr	r0, [r4, #12]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80223cc:	6861      	ldr	r1, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80223ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80223d2:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 80223d4:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80223d6:	62d8      	str	r0, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80223d8:	6299      	str	r1, [r3, #40]	; 0x28
 80223da:	e015      	b.n	8022408 <HAL_TIM_Base_Init+0xbc>
    tmpcr1 |= Structure->CounterMode;
 80223dc:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80223de:	6926      	ldr	r6, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80223e0:	69a0      	ldr	r0, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80223e2:	68e7      	ldr	r7, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 80223e4:	6865      	ldr	r5, [r4, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80223e6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80223ea:	430a      	orrs	r2, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 80223ec:	f422 7240 	bic.w	r2, r2, #768	; 0x300

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80223f0:	4926      	ldr	r1, [pc, #152]	; (802248c <HAL_TIM_Base_Init+0x140>)
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80223f2:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80223f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80223f8:	4302      	orrs	r2, r0
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80223fa:	428b      	cmp	r3, r1
  TIMx->CR1 = tmpcr1;
 80223fc:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80223fe:	62df      	str	r7, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8022400:	629d      	str	r5, [r3, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8022402:	d101      	bne.n	8022408 <HAL_TIM_Base_Init+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8022404:	6962      	ldr	r2, [r4, #20]
 8022406:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8022408:	2201      	movs	r2, #1
 802240a:	615a      	str	r2, [r3, #20]
  return HAL_OK;
 802240c:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 802240e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  return HAL_OK;
 8022412:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8022414:	6926      	ldr	r6, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8022416:	69a0      	ldr	r0, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8022418:	68e5      	ldr	r5, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 802241a:	6861      	ldr	r1, [r4, #4]
    tmpcr1 &= ~TIM_CR1_CKD;
 802241c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8022420:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8022422:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8022426:	4302      	orrs	r2, r0
  TIMx->CR1 = tmpcr1;
 8022428:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 802242a:	62dd      	str	r5, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 802242c:	6299      	str	r1, [r3, #40]	; 0x28
 802242e:	e7eb      	b.n	8022408 <HAL_TIM_Base_Init+0xbc>
    htim->Lock = HAL_UNLOCKED;
 8022430:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8022434:	f001 fb9a 	bl	8023b6c <HAL_TIM_Base_MspInit>
 8022438:	e793      	b.n	8022362 <HAL_TIM_Base_Init+0x16>
    tmpcr1 |= Structure->CounterMode;
 802243a:	68a5      	ldr	r5, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 802243c:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 802243e:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8022440:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8022444:	432a      	orrs	r2, r5
    tmpcr1 &= ~TIM_CR1_CKD;
 8022446:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 802244a:	4302      	orrs	r2, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 802244c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8022450:	430a      	orrs	r2, r1
  TIMx->CR1 = tmpcr1;
 8022452:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8022454:	68e2      	ldr	r2, [r4, #12]
 8022456:	62da      	str	r2, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8022458:	6862      	ldr	r2, [r4, #4]
 802245a:	629a      	str	r2, [r3, #40]	; 0x28
 802245c:	e7d2      	b.n	8022404 <HAL_TIM_Base_Init+0xb8>
    tmpcr1 |= Structure->CounterMode;
 802245e:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8022460:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8022462:	69a1      	ldr	r1, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8022464:	68e7      	ldr	r7, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 8022466:	6865      	ldr	r5, [r4, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8022468:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 802246c:	4332      	orrs	r2, r6
    tmpcr1 &= ~TIM_CR1_CKD;
 802246e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8022472:	4302      	orrs	r2, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8022474:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8022478:	430a      	orrs	r2, r1
  TIMx->CR1 = tmpcr1;
 802247a:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 802247c:	62df      	str	r7, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 802247e:	629d      	str	r5, [r3, #40]	; 0x28
 8022480:	e7c2      	b.n	8022408 <HAL_TIM_Base_Init+0xbc>
    return HAL_ERROR;
 8022482:	2001      	movs	r0, #1
 8022484:	4770      	bx	lr
 8022486:	bf00      	nop
 8022488:	40010000 	.word	0x40010000
 802248c:	40010400 	.word	0x40010400

08022490 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8022490:	2800      	cmp	r0, #0
 8022492:	f000 8098 	beq.w	80225c6 <HAL_TIM_PWM_Init+0x136>
{
 8022496:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8022498:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 802249c:	4604      	mov	r4, r0
 802249e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80224a2:	2b00      	cmp	r3, #0
 80224a4:	d066      	beq.n	8022574 <HAL_TIM_PWM_Init+0xe4>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80224a6:	6823      	ldr	r3, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80224a8:	4948      	ldr	r1, [pc, #288]	; (80225cc <HAL_TIM_PWM_Init+0x13c>)
  htim->State = HAL_TIM_STATE_BUSY;
 80224aa:	2202      	movs	r2, #2
 80224ac:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80224b0:	428b      	cmp	r3, r1
  tmpcr1 = TIMx->CR1;
 80224b2:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80224b4:	d063      	beq.n	802257e <HAL_TIM_PWM_Init+0xee>
 80224b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80224ba:	d072      	beq.n	80225a2 <HAL_TIM_PWM_Init+0x112>
 80224bc:	f5a1 417c 	sub.w	r1, r1, #64512	; 0xfc00
 80224c0:	428b      	cmp	r3, r1
 80224c2:	d02d      	beq.n	8022520 <HAL_TIM_PWM_Init+0x90>
 80224c4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80224c8:	428b      	cmp	r3, r1
 80224ca:	d029      	beq.n	8022520 <HAL_TIM_PWM_Init+0x90>
 80224cc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80224d0:	428b      	cmp	r3, r1
 80224d2:	d025      	beq.n	8022520 <HAL_TIM_PWM_Init+0x90>
 80224d4:	f501 4178 	add.w	r1, r1, #63488	; 0xf800
 80224d8:	428b      	cmp	r3, r1
 80224da:	d021      	beq.n	8022520 <HAL_TIM_PWM_Init+0x90>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80224dc:	f501 5170 	add.w	r1, r1, #15360	; 0x3c00
 80224e0:	428b      	cmp	r3, r1
 80224e2:	d039      	beq.n	8022558 <HAL_TIM_PWM_Init+0xc8>
 80224e4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80224e8:	428b      	cmp	r3, r1
 80224ea:	d035      	beq.n	8022558 <HAL_TIM_PWM_Init+0xc8>
 80224ec:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80224f0:	428b      	cmp	r3, r1
 80224f2:	d031      	beq.n	8022558 <HAL_TIM_PWM_Init+0xc8>
 80224f4:	f5a1 3198 	sub.w	r1, r1, #77824	; 0x13000
 80224f8:	428b      	cmp	r3, r1
 80224fa:	d02d      	beq.n	8022558 <HAL_TIM_PWM_Init+0xc8>
 80224fc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8022500:	428b      	cmp	r3, r1
 8022502:	d029      	beq.n	8022558 <HAL_TIM_PWM_Init+0xc8>
 8022504:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8022508:	428b      	cmp	r3, r1
 802250a:	d025      	beq.n	8022558 <HAL_TIM_PWM_Init+0xc8>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 802250c:	69a5      	ldr	r5, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 802250e:	68e0      	ldr	r0, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 8022510:	6861      	ldr	r1, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8022512:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8022516:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 8022518:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 802251a:	62d8      	str	r0, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 802251c:	6299      	str	r1, [r3, #40]	; 0x28
 802251e:	e015      	b.n	802254c <HAL_TIM_PWM_Init+0xbc>
    tmpcr1 |= Structure->CounterMode;
 8022520:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8022522:	6926      	ldr	r6, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8022524:	69a0      	ldr	r0, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8022526:	68e7      	ldr	r7, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 8022528:	6865      	ldr	r5, [r4, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 802252a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 802252e:	430a      	orrs	r2, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8022530:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8022534:	4926      	ldr	r1, [pc, #152]	; (80225d0 <HAL_TIM_PWM_Init+0x140>)
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8022536:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8022538:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 802253c:	4302      	orrs	r2, r0
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 802253e:	428b      	cmp	r3, r1
  TIMx->CR1 = tmpcr1;
 8022540:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8022542:	62df      	str	r7, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8022544:	629d      	str	r5, [r3, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8022546:	d101      	bne.n	802254c <HAL_TIM_PWM_Init+0xbc>
    TIMx->RCR = Structure->RepetitionCounter;
 8022548:	6962      	ldr	r2, [r4, #20]
 802254a:	631a      	str	r2, [r3, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 802254c:	2201      	movs	r2, #1
 802254e:	615a      	str	r2, [r3, #20]
  return HAL_OK;
 8022550:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8022552:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  return HAL_OK;
 8022556:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8022558:	6926      	ldr	r6, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 802255a:	69a0      	ldr	r0, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 802255c:	68e5      	ldr	r5, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 802255e:	6861      	ldr	r1, [r4, #4]
    tmpcr1 &= ~TIM_CR1_CKD;
 8022560:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8022564:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8022566:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 802256a:	4302      	orrs	r2, r0
  TIMx->CR1 = tmpcr1;
 802256c:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 802256e:	62dd      	str	r5, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8022570:	6299      	str	r1, [r3, #40]	; 0x28
 8022572:	e7eb      	b.n	802254c <HAL_TIM_PWM_Init+0xbc>
    htim->Lock = HAL_UNLOCKED;
 8022574:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8022578:	f001 faa8 	bl	8023acc <HAL_TIM_PWM_MspInit>
 802257c:	e793      	b.n	80224a6 <HAL_TIM_PWM_Init+0x16>
    tmpcr1 |= Structure->CounterMode;
 802257e:	68a5      	ldr	r5, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8022580:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8022582:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8022584:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8022588:	432a      	orrs	r2, r5
    tmpcr1 &= ~TIM_CR1_CKD;
 802258a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 802258e:	4302      	orrs	r2, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8022590:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8022594:	430a      	orrs	r2, r1
  TIMx->CR1 = tmpcr1;
 8022596:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8022598:	68e2      	ldr	r2, [r4, #12]
 802259a:	62da      	str	r2, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 802259c:	6862      	ldr	r2, [r4, #4]
 802259e:	629a      	str	r2, [r3, #40]	; 0x28
 80225a0:	e7d2      	b.n	8022548 <HAL_TIM_PWM_Init+0xb8>
    tmpcr1 |= Structure->CounterMode;
 80225a2:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80225a4:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80225a6:	69a1      	ldr	r1, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80225a8:	68e7      	ldr	r7, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 80225aa:	6865      	ldr	r5, [r4, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80225ac:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80225b0:	4332      	orrs	r2, r6
    tmpcr1 &= ~TIM_CR1_CKD;
 80225b2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80225b6:	4302      	orrs	r2, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80225b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80225bc:	430a      	orrs	r2, r1
  TIMx->CR1 = tmpcr1;
 80225be:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80225c0:	62df      	str	r7, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80225c2:	629d      	str	r5, [r3, #40]	; 0x28
 80225c4:	e7c2      	b.n	802254c <HAL_TIM_PWM_Init+0xbc>
    return HAL_ERROR;
 80225c6:	2001      	movs	r0, #1
 80225c8:	4770      	bx	lr
 80225ca:	bf00      	nop
 80225cc:	40010000 	.word	0x40010000
 80225d0:	40010400 	.word	0x40010400

080225d4 <HAL_TIM_PWM_Start>:
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80225d4:	6803      	ldr	r3, [r0, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80225d6:	2201      	movs	r2, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80225d8:	6a18      	ldr	r0, [r3, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80225da:	f001 011f 	and.w	r1, r1, #31
 80225de:	fa02 f101 	lsl.w	r1, r2, r1
  TIMx->CCER &= ~tmp;
 80225e2:	ea20 0001 	bic.w	r0, r0, r1
{
 80225e6:	b410      	push	{r4}
  TIMx->CCER &= ~tmp;
 80225e8:	6218      	str	r0, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80225ea:	6a1a      	ldr	r2, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80225ec:	4c0c      	ldr	r4, [pc, #48]	; (8022620 <HAL_TIM_PWM_Start+0x4c>)
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80225ee:	4311      	orrs	r1, r2
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80225f0:	42a3      	cmp	r3, r4
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80225f2:	6219      	str	r1, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80225f4:	d00f      	beq.n	8022616 <HAL_TIM_PWM_Start+0x42>
 80225f6:	4a0b      	ldr	r2, [pc, #44]	; (8022624 <HAL_TIM_PWM_Start+0x50>)
 80225f8:	4293      	cmp	r3, r2
 80225fa:	d00c      	beq.n	8022616 <HAL_TIM_PWM_Start+0x42>
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80225fc:	689a      	ldr	r2, [r3, #8]
 80225fe:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8022602:	2a06      	cmp	r2, #6
 8022604:	d003      	beq.n	802260e <HAL_TIM_PWM_Start+0x3a>
    __HAL_TIM_ENABLE(htim);
 8022606:	681a      	ldr	r2, [r3, #0]
 8022608:	f042 0201 	orr.w	r2, r2, #1
 802260c:	601a      	str	r2, [r3, #0]
}
 802260e:	2000      	movs	r0, #0
 8022610:	f85d 4b04 	ldr.w	r4, [sp], #4
 8022614:	4770      	bx	lr
    __HAL_TIM_MOE_ENABLE(htim);
 8022616:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8022618:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 802261c:	645a      	str	r2, [r3, #68]	; 0x44
 802261e:	e7ed      	b.n	80225fc <HAL_TIM_PWM_Start+0x28>
 8022620:	40010000 	.word	0x40010000
 8022624:	40010400 	.word	0x40010400

08022628 <HAL_TIM_IC_Init>:
  if (htim == NULL)
 8022628:	2800      	cmp	r0, #0
 802262a:	f000 8098 	beq.w	802275e <HAL_TIM_IC_Init+0x136>
{
 802262e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8022630:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8022634:	4604      	mov	r4, r0
 8022636:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 802263a:	2b00      	cmp	r3, #0
 802263c:	d066      	beq.n	802270c <HAL_TIM_IC_Init+0xe4>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 802263e:	6823      	ldr	r3, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8022640:	4948      	ldr	r1, [pc, #288]	; (8022764 <HAL_TIM_IC_Init+0x13c>)
  htim->State = HAL_TIM_STATE_BUSY;
 8022642:	2202      	movs	r2, #2
 8022644:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8022648:	428b      	cmp	r3, r1
  tmpcr1 = TIMx->CR1;
 802264a:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 802264c:	d063      	beq.n	8022716 <HAL_TIM_IC_Init+0xee>
 802264e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8022652:	d072      	beq.n	802273a <HAL_TIM_IC_Init+0x112>
 8022654:	f5a1 417c 	sub.w	r1, r1, #64512	; 0xfc00
 8022658:	428b      	cmp	r3, r1
 802265a:	d02d      	beq.n	80226b8 <HAL_TIM_IC_Init+0x90>
 802265c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8022660:	428b      	cmp	r3, r1
 8022662:	d029      	beq.n	80226b8 <HAL_TIM_IC_Init+0x90>
 8022664:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8022668:	428b      	cmp	r3, r1
 802266a:	d025      	beq.n	80226b8 <HAL_TIM_IC_Init+0x90>
 802266c:	f501 4178 	add.w	r1, r1, #63488	; 0xf800
 8022670:	428b      	cmp	r3, r1
 8022672:	d021      	beq.n	80226b8 <HAL_TIM_IC_Init+0x90>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8022674:	f501 5170 	add.w	r1, r1, #15360	; 0x3c00
 8022678:	428b      	cmp	r3, r1
 802267a:	d039      	beq.n	80226f0 <HAL_TIM_IC_Init+0xc8>
 802267c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8022680:	428b      	cmp	r3, r1
 8022682:	d035      	beq.n	80226f0 <HAL_TIM_IC_Init+0xc8>
 8022684:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8022688:	428b      	cmp	r3, r1
 802268a:	d031      	beq.n	80226f0 <HAL_TIM_IC_Init+0xc8>
 802268c:	f5a1 3198 	sub.w	r1, r1, #77824	; 0x13000
 8022690:	428b      	cmp	r3, r1
 8022692:	d02d      	beq.n	80226f0 <HAL_TIM_IC_Init+0xc8>
 8022694:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8022698:	428b      	cmp	r3, r1
 802269a:	d029      	beq.n	80226f0 <HAL_TIM_IC_Init+0xc8>
 802269c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80226a0:	428b      	cmp	r3, r1
 80226a2:	d025      	beq.n	80226f0 <HAL_TIM_IC_Init+0xc8>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80226a4:	69a5      	ldr	r5, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80226a6:	68e0      	ldr	r0, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 80226a8:	6861      	ldr	r1, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80226aa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80226ae:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 80226b0:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80226b2:	62d8      	str	r0, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80226b4:	6299      	str	r1, [r3, #40]	; 0x28
 80226b6:	e015      	b.n	80226e4 <HAL_TIM_IC_Init+0xbc>
    tmpcr1 |= Structure->CounterMode;
 80226b8:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80226ba:	6926      	ldr	r6, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80226bc:	69a0      	ldr	r0, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80226be:	68e7      	ldr	r7, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 80226c0:	6865      	ldr	r5, [r4, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80226c2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80226c6:	430a      	orrs	r2, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 80226c8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80226cc:	4926      	ldr	r1, [pc, #152]	; (8022768 <HAL_TIM_IC_Init+0x140>)
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80226ce:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80226d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80226d4:	4302      	orrs	r2, r0
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80226d6:	428b      	cmp	r3, r1
  TIMx->CR1 = tmpcr1;
 80226d8:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80226da:	62df      	str	r7, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80226dc:	629d      	str	r5, [r3, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80226de:	d101      	bne.n	80226e4 <HAL_TIM_IC_Init+0xbc>
    TIMx->RCR = Structure->RepetitionCounter;
 80226e0:	6962      	ldr	r2, [r4, #20]
 80226e2:	631a      	str	r2, [r3, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80226e4:	2201      	movs	r2, #1
 80226e6:	615a      	str	r2, [r3, #20]
  return HAL_OK;
 80226e8:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80226ea:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  return HAL_OK;
 80226ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80226f0:	6926      	ldr	r6, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80226f2:	69a0      	ldr	r0, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80226f4:	68e5      	ldr	r5, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 80226f6:	6861      	ldr	r1, [r4, #4]
    tmpcr1 &= ~TIM_CR1_CKD;
 80226f8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80226fc:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80226fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8022702:	4302      	orrs	r2, r0
  TIMx->CR1 = tmpcr1;
 8022704:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8022706:	62dd      	str	r5, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8022708:	6299      	str	r1, [r3, #40]	; 0x28
 802270a:	e7eb      	b.n	80226e4 <HAL_TIM_IC_Init+0xbc>
    htim->Lock = HAL_UNLOCKED;
 802270c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_IC_MspInit(htim);
 8022710:	f001 fa44 	bl	8023b9c <HAL_TIM_IC_MspInit>
 8022714:	e793      	b.n	802263e <HAL_TIM_IC_Init+0x16>
    tmpcr1 |= Structure->CounterMode;
 8022716:	68a5      	ldr	r5, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8022718:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 802271a:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 802271c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8022720:	432a      	orrs	r2, r5
    tmpcr1 &= ~TIM_CR1_CKD;
 8022722:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8022726:	4302      	orrs	r2, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8022728:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 802272c:	430a      	orrs	r2, r1
  TIMx->CR1 = tmpcr1;
 802272e:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8022730:	68e2      	ldr	r2, [r4, #12]
 8022732:	62da      	str	r2, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8022734:	6862      	ldr	r2, [r4, #4]
 8022736:	629a      	str	r2, [r3, #40]	; 0x28
 8022738:	e7d2      	b.n	80226e0 <HAL_TIM_IC_Init+0xb8>
    tmpcr1 |= Structure->CounterMode;
 802273a:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 802273c:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 802273e:	69a1      	ldr	r1, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8022740:	68e7      	ldr	r7, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 8022742:	6865      	ldr	r5, [r4, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8022744:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8022748:	4332      	orrs	r2, r6
    tmpcr1 &= ~TIM_CR1_CKD;
 802274a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 802274e:	4302      	orrs	r2, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8022750:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8022754:	430a      	orrs	r2, r1
  TIMx->CR1 = tmpcr1;
 8022756:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8022758:	62df      	str	r7, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 802275a:	629d      	str	r5, [r3, #40]	; 0x28
 802275c:	e7c2      	b.n	80226e4 <HAL_TIM_IC_Init+0xbc>
    return HAL_ERROR;
 802275e:	2001      	movs	r0, #1
 8022760:	4770      	bx	lr
 8022762:	bf00      	nop
 8022764:	40010000 	.word	0x40010000
 8022768:	40010400 	.word	0x40010400

0802276c <HAL_TIM_IC_Start>:
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 802276c:	6803      	ldr	r3, [r0, #0]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 802276e:	2201      	movs	r2, #1
  TIMx->CCER &= ~tmp;
 8022770:	6a18      	ldr	r0, [r3, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8022772:	f001 011f 	and.w	r1, r1, #31
 8022776:	fa02 f101 	lsl.w	r1, r2, r1
  TIMx->CCER &= ~tmp;
 802277a:	ea20 0001 	bic.w	r0, r0, r1
 802277e:	6218      	str	r0, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8022780:	6a1a      	ldr	r2, [r3, #32]
 8022782:	4311      	orrs	r1, r2
 8022784:	6219      	str	r1, [r3, #32]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8022786:	689a      	ldr	r2, [r3, #8]
 8022788:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 802278c:	2a06      	cmp	r2, #6
 802278e:	d003      	beq.n	8022798 <HAL_TIM_IC_Start+0x2c>
    __HAL_TIM_ENABLE(htim);
 8022790:	681a      	ldr	r2, [r3, #0]
 8022792:	f042 0201 	orr.w	r2, r2, #1
 8022796:	601a      	str	r2, [r3, #0]
}
 8022798:	2000      	movs	r0, #0
 802279a:	4770      	bx	lr

0802279c <HAL_TIM_IC_ConfigChannel>:
  __HAL_LOCK(htim);
 802279c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80227a0:	2b01      	cmp	r3, #1
 80227a2:	d03a      	beq.n	802281a <HAL_TIM_IC_ConfigChannel+0x7e>
{
 80227a4:	b5f0      	push	{r4, r5, r6, r7, lr}
  htim->State = HAL_TIM_STATE_BUSY;
 80227a6:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 80227a8:	2401      	movs	r4, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80227aa:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_LOCK(htim);
 80227ae:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
    TIM_TI1_SetConfig(htim->Instance,
 80227b2:	6803      	ldr	r3, [r0, #0]
  if (Channel == TIM_CHANNEL_1)
 80227b4:	2a00      	cmp	r2, #0
 80227b6:	d032      	beq.n	802281e <HAL_TIM_IC_ConfigChannel+0x82>
  else if (Channel == TIM_CHANNEL_2)
 80227b8:	2a04      	cmp	r2, #4
 80227ba:	d073      	beq.n	80228a4 <HAL_TIM_IC_ConfigChannel+0x108>
  else if (Channel == TIM_CHANNEL_3)
 80227bc:	2a08      	cmp	r2, #8
    TIM_TI3_SetConfig(htim->Instance,
 80227be:	680a      	ldr	r2, [r1, #0]
  else if (Channel == TIM_CHANNEL_3)
 80227c0:	f000 8095 	beq.w	80228ee <HAL_TIM_IC_ConfigChannel+0x152>
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80227c4:	6a1d      	ldr	r5, [r3, #32]
    TIM_TI4_SetConfig(htim->Instance,
 80227c6:	f8d1 e004 	ldr.w	lr, [r1, #4]
 80227ca:	68cc      	ldr	r4, [r1, #12]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80227cc:	688e      	ldr	r6, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80227ce:	f425 5580 	bic.w	r5, r5, #4096	; 0x1000
 80227d2:	621d      	str	r5, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80227d4:	69dd      	ldr	r5, [r3, #28]
  tmpccer = TIMx->CCER;
 80227d6:	6a1f      	ldr	r7, [r3, #32]
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80227d8:	f425 7540 	bic.w	r5, r5, #768	; 0x300
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80227dc:	0321      	lsls	r1, r4, #12
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80227de:	0312      	lsls	r2, r2, #12
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80227e0:	ea45 240e 	orr.w	r4, r5, lr, lsl #8
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80227e4:	f402 4220 	and.w	r2, r2, #40960	; 0xa000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80227e8:	b289      	uxth	r1, r1
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80227ea:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80227ee:	f427 4520 	bic.w	r5, r7, #40960	; 0xa000
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80227f2:	432a      	orrs	r2, r5
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80227f4:	4321      	orrs	r1, r4
  TIMx->CCMR2 = tmpccmr2;
 80227f6:	61d9      	str	r1, [r3, #28]
  TIMx->CCER = tmpccer ;
 80227f8:	621a      	str	r2, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80227fa:	69da      	ldr	r2, [r3, #28]
 80227fc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8022800:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8022802:	69da      	ldr	r2, [r3, #28]
 8022804:	ea42 2606 	orr.w	r6, r2, r6, lsl #8
 8022808:	61de      	str	r6, [r3, #28]
  __HAL_UNLOCK(htim);
 802280a:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 802280c:	2201      	movs	r2, #1
 802280e:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8022812:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8022816:	4618      	mov	r0, r3
 8022818:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(htim);
 802281a:	2002      	movs	r0, #2
 802281c:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC1E;
 802281e:	6a1e      	ldr	r6, [r3, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8022820:	f8df e110 	ldr.w	lr, [pc, #272]	; 8022934 <HAL_TIM_IC_ConfigChannel+0x198>
    TIM_TI1_SetConfig(htim->Instance,
 8022824:	680d      	ldr	r5, [r1, #0]
 8022826:	684c      	ldr	r4, [r1, #4]
 8022828:	68ca      	ldr	r2, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 802282a:	f026 0601 	bic.w	r6, r6, #1
 802282e:	621e      	str	r6, [r3, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8022830:	4573      	cmp	r3, lr
  tmpccmr1 = TIMx->CCMR1;
 8022832:	699f      	ldr	r7, [r3, #24]
  tmpccer = TIMx->CCER;
 8022834:	6a1e      	ldr	r6, [r3, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8022836:	d031      	beq.n	802289c <HAL_TIM_IC_ConfigChannel+0x100>
 8022838:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 802283c:	d02e      	beq.n	802289c <HAL_TIM_IC_ConfigChannel+0x100>
 802283e:	f5ae 4e7c 	sub.w	lr, lr, #64512	; 0xfc00
 8022842:	4573      	cmp	r3, lr
 8022844:	d02a      	beq.n	802289c <HAL_TIM_IC_ConfigChannel+0x100>
 8022846:	f50e 6e80 	add.w	lr, lr, #1024	; 0x400
 802284a:	4573      	cmp	r3, lr
 802284c:	d026      	beq.n	802289c <HAL_TIM_IC_ConfigChannel+0x100>
 802284e:	f50e 6e80 	add.w	lr, lr, #1024	; 0x400
 8022852:	4573      	cmp	r3, lr
 8022854:	d022      	beq.n	802289c <HAL_TIM_IC_ConfigChannel+0x100>
 8022856:	f50e 4e78 	add.w	lr, lr, #63488	; 0xf800
 802285a:	4573      	cmp	r3, lr
 802285c:	d01e      	beq.n	802289c <HAL_TIM_IC_ConfigChannel+0x100>
 802285e:	f50e 5e70 	add.w	lr, lr, #15360	; 0x3c00
 8022862:	4573      	cmp	r3, lr
 8022864:	d01a      	beq.n	802289c <HAL_TIM_IC_ConfigChannel+0x100>
 8022866:	f5ae 3e94 	sub.w	lr, lr, #75776	; 0x12800
 802286a:	4573      	cmp	r3, lr
 802286c:	d016      	beq.n	802289c <HAL_TIM_IC_ConfigChannel+0x100>
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 802286e:	f047 0401 	orr.w	r4, r7, #1
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8022872:	0112      	lsls	r2, r2, #4
 8022874:	b2d2      	uxtb	r2, r2
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8022876:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 802287a:	f026 060a 	bic.w	r6, r6, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 802287e:	f005 050a 	and.w	r5, r5, #10
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8022882:	4314      	orrs	r4, r2
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8022884:	4335      	orrs	r5, r6
  TIMx->CCMR1 = tmpccmr1;
 8022886:	619c      	str	r4, [r3, #24]
  TIMx->CCER = tmpccer;
 8022888:	621d      	str	r5, [r3, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 802288a:	699c      	ldr	r4, [r3, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 802288c:	688d      	ldr	r5, [r1, #8]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 802288e:	f024 040c 	bic.w	r4, r4, #12
 8022892:	619c      	str	r4, [r3, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8022894:	699a      	ldr	r2, [r3, #24]
 8022896:	432a      	orrs	r2, r5
 8022898:	619a      	str	r2, [r3, #24]
 802289a:	e7b6      	b.n	802280a <HAL_TIM_IC_ConfigChannel+0x6e>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 802289c:	f027 0703 	bic.w	r7, r7, #3
    tmpccmr1 |= TIM_ICSelection;
 80228a0:	433c      	orrs	r4, r7
 80228a2:	e7e6      	b.n	8022872 <HAL_TIM_IC_ConfigChannel+0xd6>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80228a4:	6a1d      	ldr	r5, [r3, #32]
    TIM_TI2_SetConfig(htim->Instance,
 80228a6:	680a      	ldr	r2, [r1, #0]
 80228a8:	f8d1 e004 	ldr.w	lr, [r1, #4]
 80228ac:	68cc      	ldr	r4, [r1, #12]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80228ae:	688e      	ldr	r6, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80228b0:	f025 0510 	bic.w	r5, r5, #16
 80228b4:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80228b6:	699d      	ldr	r5, [r3, #24]
  tmpccer = TIMx->CCER;
 80228b8:	6a1f      	ldr	r7, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80228ba:	f425 7540 	bic.w	r5, r5, #768	; 0x300
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80228be:	0321      	lsls	r1, r4, #12
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80228c0:	0112      	lsls	r2, r2, #4
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80228c2:	ea45 240e 	orr.w	r4, r5, lr, lsl #8
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80228c6:	f002 02a0 	and.w	r2, r2, #160	; 0xa0
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80228ca:	b289      	uxth	r1, r1
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80228cc:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80228d0:	f027 05a0 	bic.w	r5, r7, #160	; 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80228d4:	432a      	orrs	r2, r5
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80228d6:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1 ;
 80228d8:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 80228da:	621a      	str	r2, [r3, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80228dc:	699a      	ldr	r2, [r3, #24]
 80228de:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80228e2:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80228e4:	699a      	ldr	r2, [r3, #24]
 80228e6:	ea42 2606 	orr.w	r6, r2, r6, lsl #8
 80228ea:	619e      	str	r6, [r3, #24]
 80228ec:	e78d      	b.n	802280a <HAL_TIM_IC_ConfigChannel+0x6e>
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80228ee:	6a1f      	ldr	r7, [r3, #32]
    TIM_TI3_SetConfig(htim->Instance,
 80228f0:	684d      	ldr	r5, [r1, #4]
 80228f2:	68cc      	ldr	r4, [r1, #12]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80228f4:	688e      	ldr	r6, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80228f6:	f427 7780 	bic.w	r7, r7, #256	; 0x100
 80228fa:	621f      	str	r7, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80228fc:	69d9      	ldr	r1, [r3, #28]
  tmpccer = TIMx->CCER;
 80228fe:	6a1f      	ldr	r7, [r3, #32]
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8022900:	f021 0e03 	bic.w	lr, r1, #3
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8022904:	0212      	lsls	r2, r2, #8
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8022906:	0121      	lsls	r1, r4, #4
  tmpccmr2 |= TIM_ICSelection;
 8022908:	ea45 040e 	orr.w	r4, r5, lr
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 802290c:	f402 6220 	and.w	r2, r2, #2560	; 0xa00
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8022910:	b2c9      	uxtb	r1, r1
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8022912:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8022916:	f427 6520 	bic.w	r5, r7, #2560	; 0xa00
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 802291a:	432a      	orrs	r2, r5
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 802291c:	4321      	orrs	r1, r4
  TIMx->CCMR2 = tmpccmr2;
 802291e:	61d9      	str	r1, [r3, #28]
  TIMx->CCER = tmpccer;
 8022920:	621a      	str	r2, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8022922:	69da      	ldr	r2, [r3, #28]
 8022924:	f022 020c 	bic.w	r2, r2, #12
 8022928:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 802292a:	69da      	ldr	r2, [r3, #28]
 802292c:	4332      	orrs	r2, r6
 802292e:	61da      	str	r2, [r3, #28]
 8022930:	e76b      	b.n	802280a <HAL_TIM_IC_ConfigChannel+0x6e>
 8022932:	bf00      	nop
 8022934:	40010000 	.word	0x40010000

08022938 <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 8022938:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 802293c:	2b01      	cmp	r3, #1
 802293e:	d047      	beq.n	80229d0 <HAL_TIM_PWM_ConfigChannel+0x98>
{
 8022940:	b5f0      	push	{r4, r5, r6, r7, lr}
  htim->State = HAL_TIM_STATE_BUSY;
 8022942:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 8022944:	2401      	movs	r4, #1
 8022946:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 802294a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  switch (Channel)
 802294e:	2a0c      	cmp	r2, #12
 8022950:	d836      	bhi.n	80229c0 <HAL_TIM_PWM_ConfigChannel+0x88>
 8022952:	e8df f002 	tbb	[pc, r2]
 8022956:	356c      	.short	0x356c
 8022958:	35073535 	.word	0x35073535
 802295c:	35983535 	.word	0x35983535
 8022960:	3535      	.short	0x3535
 8022962:	3f          	.byte	0x3f
 8022963:	00          	.byte	0x00
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8022964:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8022966:	f8d1 e008 	ldr.w	lr, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 802296a:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 802296c:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 802296e:	4e74      	ldr	r6, [pc, #464]	; (8022b40 <HAL_TIM_PWM_ConfigChannel+0x208>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8022970:	f025 0510 	bic.w	r5, r5, #16
 8022974:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 8022976:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8022978:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 802297a:	699c      	ldr	r4, [r3, #24]
  tmpccer &= ~TIM_CCER_CC2P;
 802297c:	f022 0220 	bic.w	r2, r2, #32
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8022980:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8022984:	42b3      	cmp	r3, r6
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8022986:	ea42 120e 	orr.w	r2, r2, lr, lsl #4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 802298a:	ea44 2407 	orr.w	r4, r4, r7, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 802298e:	f000 80bb 	beq.w	8022b08 <HAL_TIM_PWM_ConfigChannel+0x1d0>
 8022992:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8022996:	42b3      	cmp	r3, r6
 8022998:	f000 80b6 	beq.w	8022b08 <HAL_TIM_PWM_ConfigChannel+0x1d0>
  TIMx->CCR2 = OC_Config->Pulse;
 802299c:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 802299e:	605d      	str	r5, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 80229a0:	619c      	str	r4, [r3, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80229a2:	639e      	str	r6, [r3, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80229a4:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80229a6:	699c      	ldr	r4, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80229a8:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80229aa:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
 80229ae:	619c      	str	r4, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80229b0:	6999      	ldr	r1, [r3, #24]
 80229b2:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80229b6:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80229b8:	699a      	ldr	r2, [r3, #24]
 80229ba:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 80229be:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 80229c0:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 80229c2:	2201      	movs	r2, #1
 80229c4:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80229c8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 80229cc:	4618      	mov	r0, r3
 80229ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(htim);
 80229d0:	2002      	movs	r0, #2
 80229d2:	4770      	bx	lr
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80229d4:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80229d6:	f8d1 e008 	ldr.w	lr, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80229da:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80229dc:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80229de:	4e58      	ldr	r6, [pc, #352]	; (8022b40 <HAL_TIM_PWM_ConfigChannel+0x208>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80229e0:	f425 5580 	bic.w	r5, r5, #4096	; 0x1000
 80229e4:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 80229e6:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80229e8:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 80229ea:	69dc      	ldr	r4, [r3, #28]
  tmpccer &= ~TIM_CCER_CC4P;
 80229ec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80229f0:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80229f4:	42b3      	cmp	r3, r6
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80229f6:	ea42 320e 	orr.w	r2, r2, lr, lsl #12
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80229fa:	ea44 2407 	orr.w	r4, r4, r7, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80229fe:	d06e      	beq.n	8022ade <HAL_TIM_PWM_ConfigChannel+0x1a6>
 8022a00:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8022a04:	42b3      	cmp	r3, r6
 8022a06:	d06a      	beq.n	8022ade <HAL_TIM_PWM_ConfigChannel+0x1a6>
  TIMx->CCR4 = OC_Config->Pulse;
 8022a08:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8022a0a:	605d      	str	r5, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 8022a0c:	61dc      	str	r4, [r3, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8022a0e:	641e      	str	r6, [r3, #64]	; 0x40
  TIMx->CCER = tmpccer;
 8022a10:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8022a12:	69dc      	ldr	r4, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8022a14:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8022a16:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
 8022a1a:	61dc      	str	r4, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8022a1c:	69d9      	ldr	r1, [r3, #28]
 8022a1e:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8022a22:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8022a24:	69da      	ldr	r2, [r3, #28]
 8022a26:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8022a2a:	61da      	str	r2, [r3, #28]
      break;
 8022a2c:	e7c8      	b.n	80229c0 <HAL_TIM_PWM_ConfigChannel+0x88>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8022a2e:	6803      	ldr	r3, [r0, #0]
  tmpccer |= OC_Config->OCPolarity;
 8022a30:	f8d1 e008 	ldr.w	lr, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8022a34:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= OC_Config->OCMode;
 8022a36:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8022a38:	4e41      	ldr	r6, [pc, #260]	; (8022b40 <HAL_TIM_PWM_ConfigChannel+0x208>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8022a3a:	f025 0501 	bic.w	r5, r5, #1
 8022a3e:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 8022a40:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8022a42:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 8022a44:	699c      	ldr	r4, [r3, #24]
  tmpccer &= ~TIM_CCER_CC1P;
 8022a46:	f022 0202 	bic.w	r2, r2, #2
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8022a4a:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8022a4e:	42b3      	cmp	r3, r6
  tmpccer |= OC_Config->OCPolarity;
 8022a50:	ea42 020e 	orr.w	r2, r2, lr
  tmpccmrx |= OC_Config->OCMode;
 8022a54:	ea44 0407 	orr.w	r4, r4, r7
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8022a58:	d065      	beq.n	8022b26 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8022a5a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8022a5e:	42b3      	cmp	r3, r6
 8022a60:	d061      	beq.n	8022b26 <HAL_TIM_PWM_ConfigChannel+0x1ee>
  TIMx->CCR1 = OC_Config->Pulse;
 8022a62:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8022a64:	605d      	str	r5, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 8022a66:	619c      	str	r4, [r3, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8022a68:	635e      	str	r6, [r3, #52]	; 0x34
  TIMx->CCER = tmpccer;
 8022a6a:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8022a6c:	699c      	ldr	r4, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8022a6e:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8022a70:	f044 0408 	orr.w	r4, r4, #8
 8022a74:	619c      	str	r4, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8022a76:	6999      	ldr	r1, [r3, #24]
 8022a78:	f021 0104 	bic.w	r1, r1, #4
 8022a7c:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8022a7e:	699a      	ldr	r2, [r3, #24]
 8022a80:	432a      	orrs	r2, r5
 8022a82:	619a      	str	r2, [r3, #24]
      break;
 8022a84:	e79c      	b.n	80229c0 <HAL_TIM_PWM_ConfigChannel+0x88>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8022a86:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8022a88:	f8d1 e008 	ldr.w	lr, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8022a8c:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= OC_Config->OCMode;
 8022a8e:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8022a90:	4e2b      	ldr	r6, [pc, #172]	; (8022b40 <HAL_TIM_PWM_ConfigChannel+0x208>)
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8022a92:	f425 7580 	bic.w	r5, r5, #256	; 0x100
 8022a96:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 8022a98:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8022a9a:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8022a9c:	69dc      	ldr	r4, [r3, #28]
  tmpccer &= ~TIM_CCER_CC3P;
 8022a9e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8022aa2:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8022aa6:	42b3      	cmp	r3, r6
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8022aa8:	ea42 220e 	orr.w	r2, r2, lr, lsl #8
  tmpccmrx |= OC_Config->OCMode;
 8022aac:	ea44 0407 	orr.w	r4, r4, r7
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8022ab0:	d01b      	beq.n	8022aea <HAL_TIM_PWM_ConfigChannel+0x1b2>
 8022ab2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8022ab6:	42b3      	cmp	r3, r6
 8022ab8:	d017      	beq.n	8022aea <HAL_TIM_PWM_ConfigChannel+0x1b2>
  TIMx->CCR3 = OC_Config->Pulse;
 8022aba:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8022abc:	605d      	str	r5, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 8022abe:	61dc      	str	r4, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8022ac0:	63de      	str	r6, [r3, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 8022ac2:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8022ac4:	69dc      	ldr	r4, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8022ac6:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8022ac8:	f044 0408 	orr.w	r4, r4, #8
 8022acc:	61dc      	str	r4, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8022ace:	69d9      	ldr	r1, [r3, #28]
 8022ad0:	f021 0104 	bic.w	r1, r1, #4
 8022ad4:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8022ad6:	69da      	ldr	r2, [r3, #28]
 8022ad8:	432a      	orrs	r2, r5
 8022ada:	61da      	str	r2, [r3, #28]
      break;
 8022adc:	e770      	b.n	80229c0 <HAL_TIM_PWM_ConfigChannel+0x88>
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8022ade:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8022ae0:	f425 4580 	bic.w	r5, r5, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8022ae4:	ea45 1586 	orr.w	r5, r5, r6, lsl #6
 8022ae8:	e78e      	b.n	8022a08 <HAL_TIM_PWM_ConfigChannel+0xd0>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8022aea:	68ce      	ldr	r6, [r1, #12]
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8022aec:	698f      	ldr	r7, [r1, #24]
    tmpccer &= ~TIM_CCER_CC3NP;
 8022aee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8022af2:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8022af6:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8022af8:	f425 5540 	bic.w	r5, r5, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8022afc:	433e      	orrs	r6, r7
    tmpccer &= ~TIM_CCER_CC3NE;
 8022afe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8022b02:	ea45 1506 	orr.w	r5, r5, r6, lsl #4
 8022b06:	e7d8      	b.n	8022aba <HAL_TIM_PWM_ConfigChannel+0x182>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8022b08:	68ce      	ldr	r6, [r1, #12]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8022b0a:	698f      	ldr	r7, [r1, #24]
    tmpccer &= ~TIM_CCER_CC2NP;
 8022b0c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8022b10:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8022b14:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8022b16:	f425 6540 	bic.w	r5, r5, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8022b1a:	433e      	orrs	r6, r7
    tmpccer &= ~TIM_CCER_CC2NE;
 8022b1c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8022b20:	ea45 0586 	orr.w	r5, r5, r6, lsl #2
 8022b24:	e73a      	b.n	802299c <HAL_TIM_PWM_ConfigChannel+0x64>
    tmpccer |= OC_Config->OCNPolarity;
 8022b26:	68ce      	ldr	r6, [r1, #12]
    tmpcr2 |= OC_Config->OCNIdleState;
 8022b28:	698f      	ldr	r7, [r1, #24]
    tmpccer &= ~TIM_CCER_CC1NP;
 8022b2a:	f022 0208 	bic.w	r2, r2, #8
    tmpccer |= OC_Config->OCNPolarity;
 8022b2e:	4332      	orrs	r2, r6
    tmpcr2 |= OC_Config->OCNIdleState;
 8022b30:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8022b32:	f425 7540 	bic.w	r5, r5, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8022b36:	433e      	orrs	r6, r7
    tmpccer &= ~TIM_CCER_CC1NE;
 8022b38:	f022 0204 	bic.w	r2, r2, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8022b3c:	4335      	orrs	r5, r6
 8022b3e:	e790      	b.n	8022a62 <HAL_TIM_PWM_ConfigChannel+0x12a>
 8022b40:	40010000 	.word	0x40010000

08022b44 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8022b44:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8022b48:	2b01      	cmp	r3, #1
 8022b4a:	d031      	beq.n	8022bb0 <HAL_TIM_ConfigClockSource+0x6c>
  htim->State = HAL_TIM_STATE_BUSY;
 8022b4c:	2202      	movs	r2, #2
  tmpsmcr = htim->Instance->SMCR;
 8022b4e:	6803      	ldr	r3, [r0, #0]
{
 8022b50:	b4f0      	push	{r4, r5, r6, r7}
  htim->State = HAL_TIM_STATE_BUSY;
 8022b52:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8022b56:	689a      	ldr	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 8022b58:	680c      	ldr	r4, [r1, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8022b5a:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8022b5e:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  __HAL_LOCK(htim);
 8022b62:	2501      	movs	r5, #1
  switch (sClockSourceConfig->ClockSource)
 8022b64:	2c40      	cmp	r4, #64	; 0x40
  __HAL_LOCK(htim);
 8022b66:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
  htim->Instance->SMCR = tmpsmcr;
 8022b6a:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 8022b6c:	d03c      	beq.n	8022be8 <HAL_TIM_ConfigClockSource+0xa4>
 8022b6e:	d953      	bls.n	8022c18 <HAL_TIM_ConfigClockSource+0xd4>
 8022b70:	2c60      	cmp	r4, #96	; 0x60
 8022b72:	d070      	beq.n	8022c56 <HAL_TIM_ConfigClockSource+0x112>
 8022b74:	d91e      	bls.n	8022bb4 <HAL_TIM_ConfigClockSource+0x70>
 8022b76:	2c70      	cmp	r4, #112	; 0x70
 8022b78:	d05d      	beq.n	8022c36 <HAL_TIM_ConfigClockSource+0xf2>
 8022b7a:	f5b4 5f00 	cmp.w	r4, #8192	; 0x2000
 8022b7e:	d10e      	bne.n	8022b9e <HAL_TIM_ConfigClockSource+0x5a>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8022b80:	688a      	ldr	r2, [r1, #8]
 8022b82:	684d      	ldr	r5, [r1, #4]
 8022b84:	68cc      	ldr	r4, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 8022b86:	6899      	ldr	r1, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8022b88:	432a      	orrs	r2, r5
 8022b8a:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8022b8e:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8022b92:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 8022b94:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8022b96:	689a      	ldr	r2, [r3, #8]
 8022b98:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8022b9c:	609a      	str	r2, [r3, #8]
  __HAL_UNLOCK(htim);
 8022b9e:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8022ba0:	2201      	movs	r2, #1
 8022ba2:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8022ba6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 8022baa:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 8022bac:	4618      	mov	r0, r3
}
 8022bae:	4770      	bx	lr
  __HAL_LOCK(htim);
 8022bb0:	2002      	movs	r0, #2
 8022bb2:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8022bb4:	2c50      	cmp	r4, #80	; 0x50
 8022bb6:	d1f2      	bne.n	8022b9e <HAL_TIM_ConfigClockSource+0x5a>
  tmpccer = TIMx->CCER;
 8022bb8:	6a1d      	ldr	r5, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8022bba:	6a1e      	ldr	r6, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8022bbc:	684c      	ldr	r4, [r1, #4]
 8022bbe:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8022bc0:	f026 0601 	bic.w	r6, r6, #1
 8022bc4:	621e      	str	r6, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8022bc6:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8022bc8:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8022bcc:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8022bd0:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 8022bd4:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8022bd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8022bd8:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 8022bda:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8022bdc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8022be0:	f042 0257 	orr.w	r2, r2, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8022be4:	609a      	str	r2, [r3, #8]
 8022be6:	e7da      	b.n	8022b9e <HAL_TIM_ConfigClockSource+0x5a>
  tmpccer = TIMx->CCER;
 8022be8:	6a1d      	ldr	r5, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8022bea:	6a1e      	ldr	r6, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8022bec:	684c      	ldr	r4, [r1, #4]
 8022bee:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8022bf0:	f026 0601 	bic.w	r6, r6, #1
 8022bf4:	621e      	str	r6, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8022bf6:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8022bf8:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8022bfc:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8022c00:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 8022c04:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8022c06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8022c08:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 8022c0a:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8022c0c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8022c10:	f042 0247 	orr.w	r2, r2, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8022c14:	609a      	str	r2, [r3, #8]
 8022c16:	e7c2      	b.n	8022b9e <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8022c18:	2c10      	cmp	r4, #16
 8022c1a:	d004      	beq.n	8022c26 <HAL_TIM_ConfigClockSource+0xe2>
 8022c1c:	d934      	bls.n	8022c88 <HAL_TIM_ConfigClockSource+0x144>
 8022c1e:	2c20      	cmp	r4, #32
 8022c20:	d001      	beq.n	8022c26 <HAL_TIM_ConfigClockSource+0xe2>
 8022c22:	2c30      	cmp	r4, #48	; 0x30
 8022c24:	d1bb      	bne.n	8022b9e <HAL_TIM_ConfigClockSource+0x5a>
  tmpsmcr = TIMx->SMCR;
 8022c26:	689a      	ldr	r2, [r3, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8022c28:	f044 0407 	orr.w	r4, r4, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 8022c2c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8022c30:	4314      	orrs	r4, r2
  TIMx->SMCR = tmpsmcr;
 8022c32:	609c      	str	r4, [r3, #8]
 8022c34:	e7b3      	b.n	8022b9e <HAL_TIM_ConfigClockSource+0x5a>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8022c36:	688a      	ldr	r2, [r1, #8]
 8022c38:	684d      	ldr	r5, [r1, #4]
 8022c3a:	68cc      	ldr	r4, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 8022c3c:	6899      	ldr	r1, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8022c3e:	432a      	orrs	r2, r5
 8022c40:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8022c44:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8022c48:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 8022c4a:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8022c4c:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8022c4e:	f042 0277 	orr.w	r2, r2, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8022c52:	609a      	str	r2, [r3, #8]
      break;
 8022c54:	e7a3      	b.n	8022b9e <HAL_TIM_ConfigClockSource+0x5a>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8022c56:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8022c58:	684d      	ldr	r5, [r1, #4]
 8022c5a:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8022c5c:	f024 0410 	bic.w	r4, r4, #16
 8022c60:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8022c62:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8022c64:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8022c66:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8022c6a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8022c6e:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8022c72:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8022c76:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8022c78:	621a      	str	r2, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 8022c7a:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8022c7c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8022c80:	f042 0267 	orr.w	r2, r2, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8022c84:	609a      	str	r2, [r3, #8]
 8022c86:	e78a      	b.n	8022b9e <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8022c88:	2c00      	cmp	r4, #0
 8022c8a:	d0cc      	beq.n	8022c26 <HAL_TIM_ConfigClockSource+0xe2>
 8022c8c:	e787      	b.n	8022b9e <HAL_TIM_ConfigClockSource+0x5a>
 8022c8e:	bf00      	nop

08022c90 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8022c90:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8022c94:	2b01      	cmp	r3, #1
 8022c96:	d03a      	beq.n	8022d0e <HAL_TIMEx_MasterConfigSynchronization+0x7e>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8022c98:	6803      	ldr	r3, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8022c9a:	2202      	movs	r2, #2
{
 8022c9c:	b470      	push	{r4, r5, r6}
  htim->State = HAL_TIM_STATE_BUSY;
 8022c9e:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8022ca2:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8022ca4:	680e      	ldr	r6, [r1, #0]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8022ca6:	4d1b      	ldr	r5, [pc, #108]	; (8022d14 <HAL_TIMEx_MasterConfigSynchronization+0x84>)
  tmpsmcr = htim->Instance->SMCR;
 8022ca8:	689c      	ldr	r4, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8022caa:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8022cae:	4332      	orrs	r2, r6
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8022cb0:	42ab      	cmp	r3, r5
  __HAL_LOCK(htim);
 8022cb2:	f04f 0601 	mov.w	r6, #1
 8022cb6:	f880 603c 	strb.w	r6, [r0, #60]	; 0x3c
  htim->Instance->CR2 = tmpcr2;
 8022cba:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8022cbc:	d019      	beq.n	8022cf2 <HAL_TIMEx_MasterConfigSynchronization+0x62>
 8022cbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8022cc2:	d016      	beq.n	8022cf2 <HAL_TIMEx_MasterConfigSynchronization+0x62>
 8022cc4:	4a14      	ldr	r2, [pc, #80]	; (8022d18 <HAL_TIMEx_MasterConfigSynchronization+0x88>)
 8022cc6:	4293      	cmp	r3, r2
 8022cc8:	d013      	beq.n	8022cf2 <HAL_TIMEx_MasterConfigSynchronization+0x62>
 8022cca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8022cce:	4293      	cmp	r3, r2
 8022cd0:	d00f      	beq.n	8022cf2 <HAL_TIMEx_MasterConfigSynchronization+0x62>
 8022cd2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8022cd6:	4293      	cmp	r3, r2
 8022cd8:	d00b      	beq.n	8022cf2 <HAL_TIMEx_MasterConfigSynchronization+0x62>
 8022cda:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8022cde:	4293      	cmp	r3, r2
 8022ce0:	d007      	beq.n	8022cf2 <HAL_TIMEx_MasterConfigSynchronization+0x62>
 8022ce2:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8022ce6:	4293      	cmp	r3, r2
 8022ce8:	d003      	beq.n	8022cf2 <HAL_TIMEx_MasterConfigSynchronization+0x62>
 8022cea:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8022cee:	4293      	cmp	r3, r2
 8022cf0:	d104      	bne.n	8022cfc <HAL_TIMEx_MasterConfigSynchronization+0x6c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8022cf2:	684a      	ldr	r2, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8022cf4:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8022cf8:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8022cfa:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8022cfc:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8022cfe:	2201      	movs	r2, #1
 8022d00:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8022d04:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 8022d08:	bc70      	pop	{r4, r5, r6}
  return HAL_OK;
 8022d0a:	4618      	mov	r0, r3
}
 8022d0c:	4770      	bx	lr
  __HAL_LOCK(htim);
 8022d0e:	2002      	movs	r0, #2
 8022d10:	4770      	bx	lr
 8022d12:	bf00      	nop
 8022d14:	40010000 	.word	0x40010000
 8022d18:	40000400 	.word	0x40000400

08022d1c <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8022d1c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8022d20:	2b01      	cmp	r3, #1
 8022d22:	d021      	beq.n	8022d68 <HAL_TIMEx_ConfigBreakDeadTime+0x4c>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8022d24:	68ca      	ldr	r2, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8022d26:	684b      	ldr	r3, [r1, #4]
{
 8022d28:	b4f0      	push	{r4, r5, r6, r7}
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8022d2a:	688f      	ldr	r7, [r1, #8]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8022d2c:	680e      	ldr	r6, [r1, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8022d2e:	690d      	ldr	r5, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8022d30:	694c      	ldr	r4, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8022d32:	69c9      	ldr	r1, [r1, #28]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8022d34:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8022d38:	433a      	orrs	r2, r7
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8022d3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8022d3e:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8022d40:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8022d44:	4333      	orrs	r3, r6
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8022d46:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8022d4a:	432b      	orrs	r3, r5
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8022d4c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8022d50:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8022d52:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8022d56:	6804      	ldr	r4, [r0, #0]

  __HAL_UNLOCK(htim);
 8022d58:	2200      	movs	r2, #0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8022d5a:	430b      	orrs	r3, r1
  htim->Instance->BDTR = tmpbdtr;
 8022d5c:	6463      	str	r3, [r4, #68]	; 0x44
  __HAL_UNLOCK(htim);
 8022d5e:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c

  return HAL_OK;
}
 8022d62:	bcf0      	pop	{r4, r5, r6, r7}
 8022d64:	4610      	mov	r0, r2
 8022d66:	4770      	bx	lr
  __HAL_LOCK(htim);
 8022d68:	2302      	movs	r3, #2
}
 8022d6a:	4618      	mov	r0, r3
 8022d6c:	4770      	bx	lr
 8022d6e:	bf00      	nop

08022d70 <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 8022d70:	2800      	cmp	r0, #0
 8022d72:	f000 809a 	beq.w	8022eaa <HAL_UART_Init+0x13a>
{
 8022d76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8022d78:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8022d7c:	4604      	mov	r4, r0
 8022d7e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8022d82:	2b00      	cmp	r3, #0
 8022d84:	d05c      	beq.n	8022e40 <HAL_UART_Init+0xd0>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8022d86:	6823      	ldr	r3, [r4, #0]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8022d88:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8022d8a:	f8d4 e00c 	ldr.w	lr, [r4, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8022d8e:	6927      	ldr	r7, [r4, #16]
 8022d90:	6966      	ldr	r6, [r4, #20]
  huart->gState = HAL_UART_STATE_BUSY;
 8022d92:	2224      	movs	r2, #36	; 0x24
 8022d94:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8022d98:	68dd      	ldr	r5, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8022d9a:	68a2      	ldr	r2, [r4, #8]
  __HAL_UART_DISABLE(huart);
 8022d9c:	f425 5500 	bic.w	r5, r5, #8192	; 0x2000
 8022da0:	60dd      	str	r5, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8022da2:	6919      	ldr	r1, [r3, #16]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8022da4:	69a5      	ldr	r5, [r4, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8022da6:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8022daa:	ea41 010e 	orr.w	r1, r1, lr
 8022dae:	6119      	str	r1, [r3, #16]
  MODIFY_REG(huart->Instance->CR1,
 8022db0:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8022db2:	433a      	orrs	r2, r7
  MODIFY_REG(huart->Instance->CR1,
 8022db4:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8022db8:	4332      	orrs	r2, r6
  MODIFY_REG(huart->Instance->CR1,
 8022dba:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8022dbe:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8022dc0:	430a      	orrs	r2, r1
 8022dc2:	60da      	str	r2, [r3, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8022dc4:	695a      	ldr	r2, [r3, #20]
 8022dc6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8022dca:	432a      	orrs	r2, r5

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8022dcc:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8022dd0:	615a      	str	r2, [r3, #20]
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8022dd2:	4a37      	ldr	r2, [pc, #220]	; (8022eb0 <HAL_UART_Init+0x140>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8022dd4:	d039      	beq.n	8022e4a <HAL_UART_Init+0xda>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8022dd6:	4293      	cmp	r3, r2
 8022dd8:	d061      	beq.n	8022e9e <HAL_UART_Init+0x12e>
 8022dda:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8022dde:	4293      	cmp	r3, r2
 8022de0:	d05d      	beq.n	8022e9e <HAL_UART_Init+0x12e>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8022de2:	f7ff fa79 	bl	80222d8 <HAL_RCC_GetPCLK1Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8022de6:	6863      	ldr	r3, [r4, #4]
 8022de8:	6825      	ldr	r5, [r4, #0]
 8022dea:	2219      	movs	r2, #25
 8022dec:	fba0 0102 	umull	r0, r1, r0, r2
 8022df0:	009a      	lsls	r2, r3, #2
 8022df2:	0f9b      	lsrs	r3, r3, #30
 8022df4:	f7fd ff3c 	bl	8020c70 <__aeabi_uldivmod>
 8022df8:	492e      	ldr	r1, [pc, #184]	; (8022eb4 <HAL_UART_Init+0x144>)
 8022dfa:	fba1 3200 	umull	r3, r2, r1, r0
 8022dfe:	0952      	lsrs	r2, r2, #5
 8022e00:	2364      	movs	r3, #100	; 0x64
 8022e02:	fb03 0312 	mls	r3, r3, r2, r0
 8022e06:	011b      	lsls	r3, r3, #4
 8022e08:	3332      	adds	r3, #50	; 0x32
 8022e0a:	fba1 1303 	umull	r1, r3, r1, r3
 8022e0e:	0112      	lsls	r2, r2, #4
 8022e10:	eb02 1353 	add.w	r3, r2, r3, lsr #5
 8022e14:	60ab      	str	r3, [r5, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8022e16:	692b      	ldr	r3, [r5, #16]
 8022e18:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8022e1c:	612b      	str	r3, [r5, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8022e1e:	696b      	ldr	r3, [r5, #20]
 8022e20:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8022e24:	616b      	str	r3, [r5, #20]
  __HAL_UART_ENABLE(huart);
 8022e26:	68eb      	ldr	r3, [r5, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8022e28:	2100      	movs	r1, #0
  huart->gState = HAL_UART_STATE_READY;
 8022e2a:	2220      	movs	r2, #32
  __HAL_UART_ENABLE(huart);
 8022e2c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8022e30:	60eb      	str	r3, [r5, #12]
  return HAL_OK;
 8022e32:	4608      	mov	r0, r1
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8022e34:	63e1      	str	r1, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8022e36:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8022e3a:	f884 203a 	strb.w	r2, [r4, #58]	; 0x3a
  return HAL_OK;
 8022e3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    huart->Lock = HAL_UNLOCKED;
 8022e40:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8022e44:	f000 ff74 	bl	8023d30 <HAL_UART_MspInit>
 8022e48:	e79d      	b.n	8022d86 <HAL_UART_Init+0x16>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8022e4a:	4293      	cmp	r3, r2
 8022e4c:	d02a      	beq.n	8022ea4 <HAL_UART_Init+0x134>
 8022e4e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8022e52:	4293      	cmp	r3, r2
 8022e54:	d026      	beq.n	8022ea4 <HAL_UART_Init+0x134>
      pclk = HAL_RCC_GetPCLK1Freq();
 8022e56:	f7ff fa3f 	bl	80222d8 <HAL_RCC_GetPCLK1Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8022e5a:	6862      	ldr	r2, [r4, #4]
 8022e5c:	4e15      	ldr	r6, [pc, #84]	; (8022eb4 <HAL_UART_Init+0x144>)
 8022e5e:	6825      	ldr	r5, [r4, #0]
 8022e60:	1892      	adds	r2, r2, r2
 8022e62:	f04f 0300 	mov.w	r3, #0
 8022e66:	f04f 0119 	mov.w	r1, #25
 8022e6a:	415b      	adcs	r3, r3
 8022e6c:	fba0 0101 	umull	r0, r1, r0, r1
 8022e70:	f7fd fefe 	bl	8020c70 <__aeabi_uldivmod>
 8022e74:	fba6 3200 	umull	r3, r2, r6, r0
 8022e78:	0951      	lsrs	r1, r2, #5
 8022e7a:	2364      	movs	r3, #100	; 0x64
 8022e7c:	fb03 0311 	mls	r3, r3, r1, r0
 8022e80:	00db      	lsls	r3, r3, #3
 8022e82:	3332      	adds	r3, #50	; 0x32
 8022e84:	fba6 2303 	umull	r2, r3, r6, r3
 8022e88:	095b      	lsrs	r3, r3, #5
 8022e8a:	f003 0207 	and.w	r2, r3, #7
 8022e8e:	005b      	lsls	r3, r3, #1
 8022e90:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8022e94:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8022e98:	4413      	add	r3, r2
 8022e9a:	60ab      	str	r3, [r5, #8]
 8022e9c:	e7bb      	b.n	8022e16 <HAL_UART_Init+0xa6>
      pclk = HAL_RCC_GetPCLK2Freq();
 8022e9e:	f7ff fa2b 	bl	80222f8 <HAL_RCC_GetPCLK2Freq>
 8022ea2:	e7a0      	b.n	8022de6 <HAL_UART_Init+0x76>
      pclk = HAL_RCC_GetPCLK2Freq();
 8022ea4:	f7ff fa28 	bl	80222f8 <HAL_RCC_GetPCLK2Freq>
 8022ea8:	e7d7      	b.n	8022e5a <HAL_UART_Init+0xea>
    return HAL_ERROR;
 8022eaa:	2001      	movs	r0, #1
 8022eac:	4770      	bx	lr
 8022eae:	bf00      	nop
 8022eb0:	40011000 	.word	0x40011000
 8022eb4:	51eb851f 	.word	0x51eb851f

08022eb8 <HAL_UART_Transmit>:
{
 8022eb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022ebc:	460e      	mov	r6, r1
  if (huart->gState == HAL_UART_STATE_READY)
 8022ebe:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
 8022ec2:	2920      	cmp	r1, #32
{
 8022ec4:	b082      	sub	sp, #8
  if (huart->gState == HAL_UART_STATE_READY)
 8022ec6:	d003      	beq.n	8022ed0 <HAL_UART_Transmit+0x18>
    return HAL_BUSY;
 8022ec8:	2002      	movs	r0, #2
}
 8022eca:	b002      	add	sp, #8
 8022ecc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((pData == NULL) || (Size == 0U))
 8022ed0:	2e00      	cmp	r6, #0
 8022ed2:	d030      	beq.n	8022f36 <HAL_UART_Transmit+0x7e>
 8022ed4:	2a00      	cmp	r2, #0
 8022ed6:	d02e      	beq.n	8022f36 <HAL_UART_Transmit+0x7e>
 8022ed8:	461f      	mov	r7, r3
    __HAL_LOCK(huart);
 8022eda:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8022ede:	2b01      	cmp	r3, #1
 8022ee0:	4604      	mov	r4, r0
 8022ee2:	d0f1      	beq.n	8022ec8 <HAL_UART_Transmit+0x10>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8022ee4:	f04f 0800 	mov.w	r8, #0
    __HAL_LOCK(huart);
 8022ee8:	2101      	movs	r1, #1
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8022eea:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8022eec:	f8c0 803c 	str.w	r8, [r0, #60]	; 0x3c
    __HAL_LOCK(huart);
 8022ef0:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8022ef4:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
 8022ef8:	9201      	str	r2, [sp, #4]
    tickstart = HAL_GetTick();
 8022efa:	f7fe f8b5 	bl	8021068 <HAL_GetTick>
    huart->TxXferSize = Size;
 8022efe:	9a01      	ldr	r2, [sp, #4]
    __HAL_UNLOCK(huart);
 8022f00:	f884 8038 	strb.w	r8, [r4, #56]	; 0x38
    tickstart = HAL_GetTick();
 8022f04:	4605      	mov	r5, r0
 8022f06:	6820      	ldr	r0, [r4, #0]
    huart->TxXferSize = Size;
 8022f08:	84a2      	strh	r2, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8022f0a:	84e2      	strh	r2, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8022f0c:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8022f0e:	b29b      	uxth	r3, r3
 8022f10:	2b00      	cmp	r3, #0
 8022f12:	d035      	beq.n	8022f80 <HAL_UART_Transmit+0xc8>
      huart->TxXferCount--;
 8022f14:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8022f16:	68a1      	ldr	r1, [r4, #8]
      huart->TxXferCount--;
 8022f18:	3a01      	subs	r2, #1
 8022f1a:	b292      	uxth	r2, r2
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8022f1c:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
      huart->TxXferCount--;
 8022f20:	84e2      	strh	r2, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8022f22:	d015      	beq.n	8022f50 <HAL_UART_Transmit+0x98>
 8022f24:	1c79      	adds	r1, r7, #1
 8022f26:	d135      	bne.n	8022f94 <HAL_UART_Transmit+0xdc>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8022f28:	6802      	ldr	r2, [r0, #0]
 8022f2a:	0612      	lsls	r2, r2, #24
 8022f2c:	d5fc      	bpl.n	8022f28 <HAL_UART_Transmit+0x70>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8022f2e:	7833      	ldrb	r3, [r6, #0]
 8022f30:	6043      	str	r3, [r0, #4]
 8022f32:	3601      	adds	r6, #1
 8022f34:	e7ea      	b.n	8022f0c <HAL_UART_Transmit+0x54>
      return  HAL_ERROR;
 8022f36:	2001      	movs	r0, #1
 8022f38:	e7c7      	b.n	8022eca <HAL_UART_Transmit+0x12>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8022f3a:	6803      	ldr	r3, [r0, #0]
 8022f3c:	061b      	lsls	r3, r3, #24
 8022f3e:	d40c      	bmi.n	8022f5a <HAL_UART_Transmit+0xa2>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8022f40:	2f00      	cmp	r7, #0
 8022f42:	d031      	beq.n	8022fa8 <HAL_UART_Transmit+0xf0>
 8022f44:	f7fe f890 	bl	8021068 <HAL_GetTick>
 8022f48:	1b40      	subs	r0, r0, r5
 8022f4a:	4287      	cmp	r7, r0
 8022f4c:	6820      	ldr	r0, [r4, #0]
 8022f4e:	d32b      	bcc.n	8022fa8 <HAL_UART_Transmit+0xf0>
 8022f50:	1c79      	adds	r1, r7, #1
 8022f52:	d1f2      	bne.n	8022f3a <HAL_UART_Transmit+0x82>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8022f54:	6802      	ldr	r2, [r0, #0]
 8022f56:	0612      	lsls	r2, r2, #24
 8022f58:	d5fc      	bpl.n	8022f54 <HAL_UART_Transmit+0x9c>
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8022f5a:	8833      	ldrh	r3, [r6, #0]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8022f5c:	6922      	ldr	r2, [r4, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8022f5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8022f62:	6043      	str	r3, [r0, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8022f64:	2a00      	cmp	r2, #0
 8022f66:	d1e4      	bne.n	8022f32 <HAL_UART_Transmit+0x7a>
          pData += 2U;
 8022f68:	3602      	adds	r6, #2
 8022f6a:	e7cf      	b.n	8022f0c <HAL_UART_Transmit+0x54>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8022f6c:	6803      	ldr	r3, [r0, #0]
 8022f6e:	065b      	lsls	r3, r3, #25
 8022f70:	d40b      	bmi.n	8022f8a <HAL_UART_Transmit+0xd2>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8022f72:	b1cf      	cbz	r7, 8022fa8 <HAL_UART_Transmit+0xf0>
 8022f74:	f7fe f878 	bl	8021068 <HAL_GetTick>
 8022f78:	1b40      	subs	r0, r0, r5
 8022f7a:	4287      	cmp	r7, r0
 8022f7c:	6820      	ldr	r0, [r4, #0]
 8022f7e:	d313      	bcc.n	8022fa8 <HAL_UART_Transmit+0xf0>
 8022f80:	1c79      	adds	r1, r7, #1
 8022f82:	d1f3      	bne.n	8022f6c <HAL_UART_Transmit+0xb4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8022f84:	6803      	ldr	r3, [r0, #0]
 8022f86:	065a      	lsls	r2, r3, #25
 8022f88:	d5fc      	bpl.n	8022f84 <HAL_UART_Transmit+0xcc>
    huart->gState = HAL_UART_STATE_READY;
 8022f8a:	2320      	movs	r3, #32
 8022f8c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 8022f90:	2000      	movs	r0, #0
 8022f92:	e79a      	b.n	8022eca <HAL_UART_Transmit+0x12>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8022f94:	6803      	ldr	r3, [r0, #0]
 8022f96:	061b      	lsls	r3, r3, #24
 8022f98:	d4c9      	bmi.n	8022f2e <HAL_UART_Transmit+0x76>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8022f9a:	b12f      	cbz	r7, 8022fa8 <HAL_UART_Transmit+0xf0>
 8022f9c:	f7fe f864 	bl	8021068 <HAL_GetTick>
 8022fa0:	1b40      	subs	r0, r0, r5
 8022fa2:	4287      	cmp	r7, r0
 8022fa4:	6820      	ldr	r0, [r4, #0]
 8022fa6:	d2bd      	bcs.n	8022f24 <HAL_UART_Transmit+0x6c>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8022fa8:	68c3      	ldr	r3, [r0, #12]
 8022faa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8022fae:	60c3      	str	r3, [r0, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8022fb0:	6943      	ldr	r3, [r0, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8022fb2:	2220      	movs	r2, #32
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8022fb4:	f023 0301 	bic.w	r3, r3, #1
        __HAL_UNLOCK(huart);
 8022fb8:	2100      	movs	r1, #0
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8022fba:	6143      	str	r3, [r0, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8022fbc:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
      return HAL_TIMEOUT;
 8022fc0:	2003      	movs	r0, #3
        __HAL_UNLOCK(huart);
 8022fc2:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
        huart->RxState = HAL_UART_STATE_READY;
 8022fc6:	f884 203a 	strb.w	r2, [r4, #58]	; 0x3a
 8022fca:	e77e      	b.n	8022eca <HAL_UART_Transmit+0x12>

08022fcc <HAL_UART_TxCpltCallback>:
 8022fcc:	4770      	bx	lr
 8022fce:	bf00      	nop

08022fd0 <HAL_UART_RxCpltCallback>:
 8022fd0:	4770      	bx	lr
 8022fd2:	bf00      	nop

08022fd4 <UART_Receive_IT.part.1>:
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8022fd4:	6883      	ldr	r3, [r0, #8]
 8022fd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8022fda:	d02c      	beq.n	8023036 <UART_Receive_IT.part.1+0x62>
      if (huart->Init.Parity == UART_PARITY_NONE)
 8022fdc:	6903      	ldr	r3, [r0, #16]
 8022fde:	b173      	cbz	r3, 8022ffe <UART_Receive_IT.part.1+0x2a>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8022fe0:	6803      	ldr	r3, [r0, #0]
 8022fe2:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8022fe4:	685b      	ldr	r3, [r3, #4]
 8022fe6:	1c51      	adds	r1, r2, #1
 8022fe8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8022fec:	6281      	str	r1, [r0, #40]	; 0x28
 8022fee:	7013      	strb	r3, [r2, #0]
    if (--huart->RxXferCount == 0U)
 8022ff0:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8022ff2:	3b01      	subs	r3, #1
 8022ff4:	b29b      	uxth	r3, r3
 8022ff6:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8022ff8:	b143      	cbz	r3, 802300c <UART_Receive_IT.part.1+0x38>
}
 8022ffa:	2000      	movs	r0, #0
 8022ffc:	4770      	bx	lr
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8022ffe:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8023000:	6802      	ldr	r2, [r0, #0]
 8023002:	1c59      	adds	r1, r3, #1
 8023004:	6852      	ldr	r2, [r2, #4]
 8023006:	6281      	str	r1, [r0, #40]	; 0x28
 8023008:	701a      	strb	r2, [r3, #0]
 802300a:	e7f1      	b.n	8022ff0 <UART_Receive_IT.part.1+0x1c>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 802300c:	6802      	ldr	r2, [r0, #0]
 802300e:	68d1      	ldr	r1, [r2, #12]
 8023010:	f021 0120 	bic.w	r1, r1, #32
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 8023014:	b510      	push	{r4, lr}
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8023016:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8023018:	68d1      	ldr	r1, [r2, #12]
 802301a:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 802301e:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8023020:	6951      	ldr	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8023022:	2420      	movs	r4, #32
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8023024:	f021 0101 	bic.w	r1, r1, #1
 8023028:	6151      	str	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 802302a:	f880 403a 	strb.w	r4, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 802302e:	f7ff ffcf 	bl	8022fd0 <HAL_UART_RxCpltCallback>
}
 8023032:	2000      	movs	r0, #0
 8023034:	bd10      	pop	{r4, pc}
      if (huart->Init.Parity == UART_PARITY_NONE)
 8023036:	6902      	ldr	r2, [r0, #16]
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8023038:	6a83      	ldr	r3, [r0, #40]	; 0x28
      if (huart->Init.Parity == UART_PARITY_NONE)
 802303a:	b93a      	cbnz	r2, 802304c <UART_Receive_IT.part.1+0x78>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 802303c:	6802      	ldr	r2, [r0, #0]
 802303e:	6852      	ldr	r2, [r2, #4]
 8023040:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8023044:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 2U;
 8023048:	6283      	str	r3, [r0, #40]	; 0x28
 802304a:	e7d1      	b.n	8022ff0 <UART_Receive_IT.part.1+0x1c>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 802304c:	6802      	ldr	r2, [r0, #0]
 802304e:	6852      	ldr	r2, [r2, #4]
 8023050:	b2d2      	uxtb	r2, r2
 8023052:	f823 2b01 	strh.w	r2, [r3], #1
        huart->pRxBuffPtr += 1U;
 8023056:	6283      	str	r3, [r0, #40]	; 0x28
 8023058:	e7ca      	b.n	8022ff0 <UART_Receive_IT.part.1+0x1c>
 802305a:	bf00      	nop

0802305c <HAL_UART_ErrorCallback>:
 802305c:	4770      	bx	lr
 802305e:	bf00      	nop

08023060 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8023060:	6803      	ldr	r3, [r0, #0]
 8023062:	681a      	ldr	r2, [r3, #0]
{
 8023064:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 8023066:	0716      	lsls	r6, r2, #28
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8023068:	68dd      	ldr	r5, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 802306a:	6959      	ldr	r1, [r3, #20]
{
 802306c:	4604      	mov	r4, r0
  if (errorflags == RESET)
 802306e:	d047      	beq.n	8023100 <HAL_UART_IRQHandler+0xa0>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8023070:	f011 0101 	ands.w	r1, r1, #1
 8023074:	d050      	beq.n	8023118 <HAL_UART_IRQHandler+0xb8>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8023076:	07d0      	lsls	r0, r2, #31
 8023078:	d505      	bpl.n	8023086 <HAL_UART_IRQHandler+0x26>
 802307a:	05ee      	lsls	r6, r5, #23
 802307c:	d503      	bpl.n	8023086 <HAL_UART_IRQHandler+0x26>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 802307e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8023080:	f040 0001 	orr.w	r0, r0, #1
 8023084:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8023086:	0750      	lsls	r0, r2, #29
 8023088:	d578      	bpl.n	802317c <HAL_UART_IRQHandler+0x11c>
 802308a:	b129      	cbz	r1, 8023098 <HAL_UART_IRQHandler+0x38>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 802308c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 802308e:	0796      	lsls	r6, r2, #30
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8023090:	f040 0002 	orr.w	r0, r0, #2
 8023094:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8023096:	d475      	bmi.n	8023184 <HAL_UART_IRQHandler+0x124>
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8023098:	0716      	lsls	r6, r2, #28
 802309a:	d503      	bpl.n	80230a4 <HAL_UART_IRQHandler+0x44>
 802309c:	06a8      	lsls	r0, r5, #26
 802309e:	d476      	bmi.n	802318e <HAL_UART_IRQHandler+0x12e>
 80230a0:	2900      	cmp	r1, #0
 80230a2:	d174      	bne.n	802318e <HAL_UART_IRQHandler+0x12e>
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80230a4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80230a6:	2900      	cmp	r1, #0
 80230a8:	d029      	beq.n	80230fe <HAL_UART_IRQHandler+0x9e>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80230aa:	0696      	lsls	r6, r2, #26
 80230ac:	d505      	bpl.n	80230ba <HAL_UART_IRQHandler+0x5a>
 80230ae:	06a8      	lsls	r0, r5, #26
 80230b0:	d503      	bpl.n	80230ba <HAL_UART_IRQHandler+0x5a>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80230b2:	f894 203a 	ldrb.w	r2, [r4, #58]	; 0x3a
 80230b6:	2a22      	cmp	r2, #34	; 0x22
 80230b8:	d077      	beq.n	80231aa <HAL_UART_IRQHandler+0x14a>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80230ba:	695d      	ldr	r5, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80230bc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80230be:	0709      	lsls	r1, r1, #28
 80230c0:	d402      	bmi.n	80230c8 <HAL_UART_IRQHandler+0x68>
 80230c2:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 80230c6:	d075      	beq.n	80231b4 <HAL_UART_IRQHandler+0x154>
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80230c8:	68da      	ldr	r2, [r3, #12]
 80230ca:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80230ce:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80230d0:	695a      	ldr	r2, [r3, #20]
  huart->RxState = HAL_UART_STATE_READY;
 80230d2:	2120      	movs	r1, #32
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80230d4:	f022 0201 	bic.w	r2, r2, #1
 80230d8:	615a      	str	r2, [r3, #20]
  huart->RxState = HAL_UART_STATE_READY;
 80230da:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80230de:	695a      	ldr	r2, [r3, #20]
 80230e0:	0652      	lsls	r2, r2, #25
 80230e2:	d559      	bpl.n	8023198 <HAL_UART_IRQHandler+0x138>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80230e4:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 80230e6:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80230e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80230ec:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 80230ee:	2800      	cmp	r0, #0
 80230f0:	d052      	beq.n	8023198 <HAL_UART_IRQHandler+0x138>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80230f2:	4b39      	ldr	r3, [pc, #228]	; (80231d8 <HAL_UART_IRQHandler+0x178>)
 80230f4:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80230f6:	f7fe fbe5 	bl	80218c4 <HAL_DMA_Abort_IT>
 80230fa:	2800      	cmp	r0, #0
 80230fc:	d150      	bne.n	80231a0 <HAL_UART_IRQHandler+0x140>
 80230fe:	bd70      	pop	{r4, r5, r6, pc}
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8023100:	0691      	lsls	r1, r2, #26
 8023102:	d50c      	bpl.n	802311e <HAL_UART_IRQHandler+0xbe>
 8023104:	06ae      	lsls	r6, r5, #26
 8023106:	d50a      	bpl.n	802311e <HAL_UART_IRQHandler+0xbe>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8023108:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 802310c:	2b22      	cmp	r3, #34	; 0x22
 802310e:	d1f6      	bne.n	80230fe <HAL_UART_IRQHandler+0x9e>
}
 8023110:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8023114:	f7ff bf5e 	b.w	8022fd4 <UART_Receive_IT.part.1>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8023118:	f415 7f90 	tst.w	r5, #288	; 0x120
 802311c:	d1ab      	bne.n	8023076 <HAL_UART_IRQHandler+0x16>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 802311e:	0616      	lsls	r6, r2, #24
 8023120:	d40e      	bmi.n	8023140 <HAL_UART_IRQHandler+0xe0>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8023122:	0651      	lsls	r1, r2, #25
 8023124:	d5eb      	bpl.n	80230fe <HAL_UART_IRQHandler+0x9e>
 8023126:	066a      	lsls	r2, r5, #25
 8023128:	d5e9      	bpl.n	80230fe <HAL_UART_IRQHandler+0x9e>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 802312a:	68da      	ldr	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 802312c:	2120      	movs	r1, #32
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 802312e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8023132:	60da      	str	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 8023134:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_READY;
 8023136:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 802313a:	f7ff ff47 	bl	8022fcc <HAL_UART_TxCpltCallback>
 802313e:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8023140:	0628      	lsls	r0, r5, #24
 8023142:	d5ee      	bpl.n	8023122 <HAL_UART_IRQHandler+0xc2>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8023144:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8023148:	2a21      	cmp	r2, #33	; 0x21
 802314a:	d1d8      	bne.n	80230fe <HAL_UART_IRQHandler+0x9e>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 802314c:	68a2      	ldr	r2, [r4, #8]
 802314e:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8023152:	6a22      	ldr	r2, [r4, #32]
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8023154:	d033      	beq.n	80231be <HAL_UART_IRQHandler+0x15e>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8023156:	1c51      	adds	r1, r2, #1
 8023158:	6221      	str	r1, [r4, #32]
 802315a:	7812      	ldrb	r2, [r2, #0]
 802315c:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 802315e:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8023160:	3a01      	subs	r2, #1
 8023162:	b292      	uxth	r2, r2
 8023164:	84e2      	strh	r2, [r4, #38]	; 0x26
 8023166:	2a00      	cmp	r2, #0
 8023168:	d1c9      	bne.n	80230fe <HAL_UART_IRQHandler+0x9e>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 802316a:	68da      	ldr	r2, [r3, #12]
 802316c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8023170:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8023172:	68da      	ldr	r2, [r3, #12]
 8023174:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8023178:	60da      	str	r2, [r3, #12]
 802317a:	bd70      	pop	{r4, r5, r6, pc}
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 802317c:	0790      	lsls	r0, r2, #30
 802317e:	d58b      	bpl.n	8023098 <HAL_UART_IRQHandler+0x38>
 8023180:	2900      	cmp	r1, #0
 8023182:	d089      	beq.n	8023098 <HAL_UART_IRQHandler+0x38>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8023184:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8023186:	f040 0004 	orr.w	r0, r0, #4
 802318a:	63e0      	str	r0, [r4, #60]	; 0x3c
 802318c:	e784      	b.n	8023098 <HAL_UART_IRQHandler+0x38>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 802318e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8023190:	f041 0108 	orr.w	r1, r1, #8
 8023194:	63e1      	str	r1, [r4, #60]	; 0x3c
 8023196:	e785      	b.n	80230a4 <HAL_UART_IRQHandler+0x44>
            HAL_UART_ErrorCallback(huart);
 8023198:	4620      	mov	r0, r4
 802319a:	f7ff ff5f 	bl	802305c <HAL_UART_ErrorCallback>
 802319e:	bd70      	pop	{r4, r5, r6, pc}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80231a0:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 80231a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80231a6:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80231a8:	4718      	bx	r3
 80231aa:	4620      	mov	r0, r4
 80231ac:	f7ff ff12 	bl	8022fd4 <UART_Receive_IT.part.1>
 80231b0:	6823      	ldr	r3, [r4, #0]
 80231b2:	e782      	b.n	80230ba <HAL_UART_IRQHandler+0x5a>
        HAL_UART_ErrorCallback(huart);
 80231b4:	4620      	mov	r0, r4
 80231b6:	f7ff ff51 	bl	802305c <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80231ba:	63e5      	str	r5, [r4, #60]	; 0x3c
 80231bc:	bd70      	pop	{r4, r5, r6, pc}
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80231be:	8811      	ldrh	r1, [r2, #0]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80231c0:	6920      	ldr	r0, [r4, #16]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80231c2:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80231c6:	6059      	str	r1, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80231c8:	b910      	cbnz	r0, 80231d0 <HAL_UART_IRQHandler+0x170>
        huart->pTxBuffPtr += 2U;
 80231ca:	3202      	adds	r2, #2
 80231cc:	6222      	str	r2, [r4, #32]
 80231ce:	e7c6      	b.n	802315e <HAL_UART_IRQHandler+0xfe>
        huart->pTxBuffPtr += 1U;
 80231d0:	3201      	adds	r2, #1
 80231d2:	6222      	str	r2, [r4, #32]
 80231d4:	e7c3      	b.n	802315e <HAL_UART_IRQHandler+0xfe>
 80231d6:	bf00      	nop
 80231d8:	080231dd 	.word	0x080231dd

080231dc <UART_DMAAbortOnError>:
{
 80231dc:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80231de:	6b83      	ldr	r3, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 80231e0:	2200      	movs	r2, #0
 80231e2:	85da      	strh	r2, [r3, #46]	; 0x2e
  HAL_UART_ErrorCallback(huart);
 80231e4:	4618      	mov	r0, r3
  huart->TxXferCount = 0x00U;
 80231e6:	84da      	strh	r2, [r3, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 80231e8:	f7ff ff38 	bl	802305c <HAL_UART_ErrorCallback>
 80231ec:	bd08      	pop	{r3, pc}
 80231ee:	bf00      	nop

080231f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80231f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80231f2:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80231f4:	a808      	add	r0, sp, #32
 80231f6:	2230      	movs	r2, #48	; 0x30
 80231f8:	2100      	movs	r1, #0
 80231fa:	f002 f9d6 	bl	80255aa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80231fe:	2300      	movs	r3, #0

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8023200:	491d      	ldr	r1, [pc, #116]	; (8023278 <SystemClock_Config+0x88>)
 8023202:	9301      	str	r3, [sp, #4]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8023204:	9304      	str	r3, [sp, #16]
 8023206:	9303      	str	r3, [sp, #12]
 8023208:	9305      	str	r3, [sp, #20]
 802320a:	9306      	str	r3, [sp, #24]
 802320c:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 802320e:	6c08      	ldr	r0, [r1, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8023210:	4a1a      	ldr	r2, [pc, #104]	; (802327c <SystemClock_Config+0x8c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8023212:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 8023216:	6408      	str	r0, [r1, #64]	; 0x40
 8023218:	6c09      	ldr	r1, [r1, #64]	; 0x40
 802321a:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 802321e:	9101      	str	r1, [sp, #4]
 8023220:	9901      	ldr	r1, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8023222:	9302      	str	r3, [sp, #8]
 8023224:	6811      	ldr	r1, [r2, #0]
 8023226:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 802322a:	6011      	str	r1, [r2, #0]
 802322c:	6812      	ldr	r2, [r2, #0]
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 802322e:	930f      	str	r3, [sp, #60]	; 0x3c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8023230:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8023234:	2402      	movs	r4, #2
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8023236:	9202      	str	r2, [sp, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8023238:	2501      	movs	r5, #1
  RCC_OscInitStruct.PLL.PLLM = 8;
 802323a:	2108      	movs	r1, #8
  RCC_OscInitStruct.PLL.PLLN = 96;
 802323c:	2260      	movs	r2, #96	; 0x60
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
 802323e:	2304      	movs	r3, #4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8023240:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8023242:	2610      	movs	r6, #16
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8023244:	950b      	str	r5, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8023246:	9110      	str	r1, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8023248:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 802324a:	9313      	str	r3, [sp, #76]	; 0x4c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 802324c:	9f02      	ldr	r7, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 802324e:	9408      	str	r4, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8023250:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8023252:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8023254:	960c      	str	r6, [sp, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8023256:	f7fe fd91 	bl	8021d7c <HAL_RCC_OscConfig>
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 802325a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 802325e:	4629      	mov	r1, r5
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8023260:	2280      	movs	r2, #128	; 0x80
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8023262:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8023264:	250f      	movs	r5, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8023266:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8023268:	9503      	str	r5, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 802326a:	9205      	str	r2, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 802326c:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 802326e:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8023270:	f7fe ff98 	bl	80221a4 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8023274:	b015      	add	sp, #84	; 0x54
 8023276:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023278:	40023800 	.word	0x40023800
 802327c:	40007000 	.word	0x40007000

08023280 <main>:
{
 8023280:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
    SCB->VTOR = ADDR_APP;
 8023284:	4bbb      	ldr	r3, [pc, #748]	; (8023574 <main+0x2f4>)
 8023286:	4abc      	ldr	r2, [pc, #752]	; (8023578 <main+0x2f8>)
 8023288:	609a      	str	r2, [r3, #8]
{
 802328a:	b099      	sub	sp, #100	; 0x64
  __ASM volatile ("cpsie i" : : : "memory");
 802328c:	b662      	cpsie	i
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 802328e:	2400      	movs	r4, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8023290:	f8df a320 	ldr.w	sl, [pc, #800]	; 80235b4 <main+0x334>
  hadc1.Instance = ADC1;
 8023294:	4db9      	ldr	r5, [pc, #740]	; (802357c <main+0x2fc>)
  htim1.Instance = TIM1;
 8023296:	4eba      	ldr	r6, [pc, #744]	; (8023580 <main+0x300>)
  htim2.Instance = TIM2;
 8023298:	f8df b31c 	ldr.w	fp, [pc, #796]	; 80235b8 <main+0x338>
  htim4.Instance = TIM4;
 802329c:	4fb9      	ldr	r7, [pc, #740]	; (8023584 <main+0x304>)
  HAL_Init();
 802329e:	f7fd febd 	bl	802101c <HAL_Init>
  SystemClock_Config();
 80232a2:	f7ff ffa5 	bl	80231f0 <SystemClock_Config>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80232a6:	9403      	str	r4, [sp, #12]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80232a8:	9411      	str	r4, [sp, #68]	; 0x44
 80232aa:	9412      	str	r4, [sp, #72]	; 0x48
 80232ac:	9413      	str	r4, [sp, #76]	; 0x4c
 80232ae:	9414      	str	r4, [sp, #80]	; 0x50
 80232b0:	9410      	str	r4, [sp, #64]	; 0x40
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80232b2:	f8da 2030 	ldr.w	r2, [sl, #48]	; 0x30
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80232b6:	48b4      	ldr	r0, [pc, #720]	; (8023588 <main+0x308>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80232b8:	f042 0204 	orr.w	r2, r2, #4
 80232bc:	f8ca 2030 	str.w	r2, [sl, #48]	; 0x30
 80232c0:	f8da 2030 	ldr.w	r2, [sl, #48]	; 0x30
 80232c4:	f002 0204 	and.w	r2, r2, #4
 80232c8:	9203      	str	r2, [sp, #12]
 80232ca:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80232cc:	9404      	str	r4, [sp, #16]
 80232ce:	f8da 2030 	ldr.w	r2, [sl, #48]	; 0x30
 80232d2:	f042 0201 	orr.w	r2, r2, #1
 80232d6:	f8ca 2030 	str.w	r2, [sl, #48]	; 0x30
 80232da:	f8da 2030 	ldr.w	r2, [sl, #48]	; 0x30
 80232de:	f002 0201 	and.w	r2, r2, #1
 80232e2:	9204      	str	r2, [sp, #16]
 80232e4:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80232e6:	9405      	str	r4, [sp, #20]
 80232e8:	f8da 2030 	ldr.w	r2, [sl, #48]	; 0x30
 80232ec:	f042 0202 	orr.w	r2, r2, #2
 80232f0:	f8ca 2030 	str.w	r2, [sl, #48]	; 0x30
 80232f4:	f8da 2030 	ldr.w	r2, [sl, #48]	; 0x30
 80232f8:	f002 0202 	and.w	r2, r2, #2
 80232fc:	9205      	str	r2, [sp, #20]
 80232fe:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8023300:	9406      	str	r4, [sp, #24]
 8023302:	f8da 2030 	ldr.w	r2, [sl, #48]	; 0x30
 8023306:	f042 0208 	orr.w	r2, r2, #8
 802330a:	f8ca 2030 	str.w	r2, [sl, #48]	; 0x30
 802330e:	f8da 1030 	ldr.w	r1, [sl, #48]	; 0x30
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8023312:	2201      	movs	r2, #1
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8023314:	f001 0108 	and.w	r1, r1, #8
 8023318:	9106      	str	r1, [sp, #24]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 802331a:	4611      	mov	r1, r2
  __HAL_RCC_GPIOD_CLK_ENABLE();
 802331c:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 802331e:	f7fe fcdb 	bl	8021cd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PWR_EN_GPIO_Port, PWR_EN_Pin, GPIO_PIN_RESET);
 8023322:	4622      	mov	r2, r4
 8023324:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8023328:	4898      	ldr	r0, [pc, #608]	; (802358c <main+0x30c>)
 802332a:	f7fe fcd5 	bl	8021cd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RFM_CS_GPIO_Port, RFM_CS_Pin, GPIO_PIN_SET);
 802332e:	2201      	movs	r2, #1
 8023330:	2104      	movs	r1, #4
 8023332:	4897      	ldr	r0, [pc, #604]	; (8023590 <main+0x310>)
 8023334:	f7fe fcd0 	bl	8021cd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8023338:	f04f 0901 	mov.w	r9, #1
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 802333c:	a910      	add	r1, sp, #64	; 0x40
 802333e:	4892      	ldr	r0, [pc, #584]	; (8023588 <main+0x308>)
  GPIO_InitStruct.Pin = LED_Pin;
 8023340:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8023344:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8023348:	9412      	str	r4, [sp, #72]	; 0x48
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802334a:	9413      	str	r4, [sp, #76]	; 0x4c
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 802334c:	f7fe fb9c 	bl	8021a88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PWR_EN_Pin */
  GPIO_InitStruct.Pin = PWR_EN_Pin;
 8023350:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8023354:	a910      	add	r1, sp, #64	; 0x40
 8023356:	488d      	ldr	r0, [pc, #564]	; (802358c <main+0x30c>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8023358:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
  GPIO_InitStruct.Pin = PWR_EN_Pin;
 802335c:	9310      	str	r3, [sp, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 802335e:	9412      	str	r4, [sp, #72]	; 0x48
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8023360:	9413      	str	r4, [sp, #76]	; 0x4c
  HAL_GPIO_Init(PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8023362:	f7fe fb91 	bl	8021a88 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_SNS_Pin */
  GPIO_InitStruct.Pin = BTN_SNS_Pin;
 8023366:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(BTN_SNS_GPIO_Port, &GPIO_InitStruct);
 802336a:	a910      	add	r1, sp, #64	; 0x40
 802336c:	4889      	ldr	r0, [pc, #548]	; (8023594 <main+0x314>)
  GPIO_InitStruct.Pin = BTN_SNS_Pin;
 802336e:	9310      	str	r3, [sp, #64]	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8023370:	9411      	str	r4, [sp, #68]	; 0x44
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8023372:	9412      	str	r4, [sp, #72]	; 0x48
  HAL_GPIO_Init(BTN_SNS_GPIO_Port, &GPIO_InitStruct);
 8023374:	f7fe fb88 	bl	8021a88 <HAL_GPIO_Init>

  /*Configure GPIO pin : RFM_IRQ_Pin */
  GPIO_InitStruct.Pin = RFM_IRQ_Pin;
 8023378:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 802337c:	4a86      	ldr	r2, [pc, #536]	; (8023598 <main+0x318>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(RFM_IRQ_GPIO_Port, &GPIO_InitStruct);
 802337e:	4882      	ldr	r0, [pc, #520]	; (8023588 <main+0x308>)
  GPIO_InitStruct.Pin = RFM_IRQ_Pin;
 8023380:	9310      	str	r3, [sp, #64]	; 0x40
  HAL_GPIO_Init(RFM_IRQ_GPIO_Port, &GPIO_InitStruct);
 8023382:	a910      	add	r1, sp, #64	; 0x40

  /*Configure GPIO pin : RFM_CS_Pin */
  GPIO_InitStruct.Pin = RFM_CS_Pin;
 8023384:	f04f 0804 	mov.w	r8, #4
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8023388:	9211      	str	r2, [sp, #68]	; 0x44
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 802338a:	9412      	str	r4, [sp, #72]	; 0x48
  HAL_GPIO_Init(RFM_IRQ_GPIO_Port, &GPIO_InitStruct);
 802338c:	f7fe fb7c 	bl	8021a88 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(RFM_CS_GPIO_Port, &GPIO_InitStruct);
 8023390:	a910      	add	r1, sp, #64	; 0x40
 8023392:	487f      	ldr	r0, [pc, #508]	; (8023590 <main+0x310>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8023394:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8023398:	9412      	str	r4, [sp, #72]	; 0x48
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802339a:	9413      	str	r4, [sp, #76]	; 0x4c
  GPIO_InitStruct.Pin = RFM_CS_Pin;
 802339c:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
  HAL_GPIO_Init(RFM_CS_GPIO_Port, &GPIO_InitStruct);
 80233a0:	f7fe fb72 	bl	8021a88 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80233a4:	4622      	mov	r2, r4
 80233a6:	4621      	mov	r1, r4
 80233a8:	2028      	movs	r0, #40	; 0x28
 80233aa:	f7fe f92d 	bl	8021608 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80233ae:	2028      	movs	r0, #40	; 0x28
 80233b0:	f7fe f960 	bl	8021674 <HAL_NVIC_EnableIRQ>
  __HAL_RCC_DMA2_CLK_ENABLE();
 80233b4:	9402      	str	r4, [sp, #8]
 80233b6:	f8da 2030 	ldr.w	r2, [sl, #48]	; 0x30
 80233ba:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80233be:	f8ca 2030 	str.w	r2, [sl, #48]	; 0x30
 80233c2:	f8da 2030 	ldr.w	r2, [sl, #48]	; 0x30
 80233c6:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 80233ca:	9202      	str	r2, [sp, #8]
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80233cc:	4621      	mov	r1, r4
 80233ce:	4622      	mov	r2, r4
 80233d0:	2038      	movs	r0, #56	; 0x38
  __HAL_RCC_DMA2_CLK_ENABLE();
 80233d2:	9b02      	ldr	r3, [sp, #8]
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80233d4:	f7fe f918 	bl	8021608 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80233d8:	2038      	movs	r0, #56	; 0x38
 80233da:	f7fe f94b 	bl	8021674 <HAL_NVIC_EnableIRQ>
  hadc1.Instance = ADC1;
 80233de:	f8df c1dc 	ldr.w	ip, [pc, #476]	; 80235bc <main+0x33c>
 80233e2:	f8c5 c000 	str.w	ip, [r5]
  hadc1.Init.NbrOfConversion = 9;
 80233e6:	2209      	movs	r2, #9
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80233e8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 80233ec:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80233f0:	4628      	mov	r0, r5
  hadc1.Init.NbrOfConversion = 9;
 80233f2:	61ea      	str	r2, [r5, #28]
 80233f4:	9201      	str	r2, [sp, #4]
  hadc1.Init.ScanConvMode = ENABLE;
 80233f6:	f8c5 9010 	str.w	r9, [r5, #16]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80233fa:	f885 9030 	strb.w	r9, [r5, #48]	; 0x30
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80233fe:	62eb      	str	r3, [r5, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8023400:	62a9      	str	r1, [r5, #40]	; 0x28
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8023402:	606c      	str	r4, [r5, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8023404:	60ac      	str	r4, [r5, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8023406:	762c      	strb	r4, [r5, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8023408:	f885 4020 	strb.w	r4, [r5, #32]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 802340c:	60ec      	str	r4, [r5, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 802340e:	616c      	str	r4, [r5, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 8023410:	9411      	str	r4, [sp, #68]	; 0x44
 8023412:	9412      	str	r4, [sp, #72]	; 0x48
 8023414:	9413      	str	r4, [sp, #76]	; 0x4c
 8023416:	9410      	str	r4, [sp, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8023418:	f7fd fe2c 	bl	8021074 <HAL_ADC_Init>
  sConfig.Channel = ADC_CHANNEL_13;
 802341c:	230d      	movs	r3, #13
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 802341e:	a910      	add	r1, sp, #64	; 0x40
 8023420:	4628      	mov	r0, r5
  sConfig.Rank = 1;
 8023422:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8023426:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  sConfig.Channel = ADC_CHANNEL_13;
 802342a:	9310      	str	r3, [sp, #64]	; 0x40
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 802342c:	f7fe f838 	bl	80214a0 <HAL_ADC_ConfigChannel>
  sConfig.Rank = 2;
 8023430:	2302      	movs	r3, #2
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8023432:	a910      	add	r1, sp, #64	; 0x40
 8023434:	4628      	mov	r0, r5
  sConfig.Rank = 2;
 8023436:	9311      	str	r3, [sp, #68]	; 0x44
  sConfig.Rank = 3;
 8023438:	f04f 0a03 	mov.w	sl, #3
  sConfig.Channel = ADC_CHANNEL_0;
 802343c:	9410      	str	r4, [sp, #64]	; 0x40
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 802343e:	f7fe f82f 	bl	80214a0 <HAL_ADC_ConfigChannel>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8023442:	a910      	add	r1, sp, #64	; 0x40
 8023444:	4628      	mov	r0, r5
  sConfig.Channel = ADC_CHANNEL_1;
 8023446:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
  sConfig.Rank = 3;
 802344a:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 802344e:	f7fe f827 	bl	80214a0 <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_2;
 8023452:	2302      	movs	r3, #2
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8023454:	a910      	add	r1, sp, #64	; 0x40
 8023456:	4628      	mov	r0, r5
  sConfig.Channel = ADC_CHANNEL_2;
 8023458:	9310      	str	r3, [sp, #64]	; 0x40
  sConfig.Rank = 4;
 802345a:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 802345e:	f7fe f81f 	bl	80214a0 <HAL_ADC_ConfigChannel>
  sConfig.Rank = 5;
 8023462:	2305      	movs	r3, #5
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8023464:	a910      	add	r1, sp, #64	; 0x40
 8023466:	4628      	mov	r0, r5
  sConfig.Rank = 5;
 8023468:	9311      	str	r3, [sp, #68]	; 0x44
  sConfig.Channel = ADC_CHANNEL_3;
 802346a:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 802346e:	f7fe f817 	bl	80214a0 <HAL_ADC_ConfigChannel>
  sConfig.Rank = 6;
 8023472:	f04f 0a06 	mov.w	sl, #6
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8023476:	a910      	add	r1, sp, #64	; 0x40
 8023478:	4628      	mov	r0, r5
  sConfig.Rank = 6;
 802347a:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
  sConfig.Channel = ADC_CHANNEL_4;
 802347e:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8023482:	9412      	str	r4, [sp, #72]	; 0x48
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8023484:	f7fe f80c 	bl	80214a0 <HAL_ADC_ConfigChannel>
  sConfig.Rank = 7;
 8023488:	2307      	movs	r3, #7
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 802348a:	a910      	add	r1, sp, #64	; 0x40
 802348c:	4628      	mov	r0, r5
  sConfig.Channel = ADC_CHANNEL_6;
 802348e:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8023492:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  sConfig.Rank = 8;
 8023496:	f04f 0a08 	mov.w	sl, #8
  sConfig.Rank = 7;
 802349a:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 802349c:	f7fe f800 	bl	80214a0 <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_14;
 80234a0:	230e      	movs	r3, #14
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80234a2:	a910      	add	r1, sp, #64	; 0x40
 80234a4:	4628      	mov	r0, r5
  sConfig.Channel = ADC_CHANNEL_14;
 80234a6:	9310      	str	r3, [sp, #64]	; 0x40
  sConfig.Rank = 8;
 80234a8:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80234ac:	f7fd fff8 	bl	80214a0 <HAL_ADC_ConfigChannel>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80234b0:	a910      	add	r1, sp, #64	; 0x40
  sConfig.Rank = 9;
 80234b2:	9a01      	ldr	r2, [sp, #4]
 80234b4:	9211      	str	r2, [sp, #68]	; 0x44
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80234b6:	4628      	mov	r0, r5
  sConfig.Channel = ADC_CHANNEL_15;
 80234b8:	250f      	movs	r5, #15
 80234ba:	9510      	str	r5, [sp, #64]	; 0x40
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80234bc:	f7fd fff0 	bl	80214a0 <HAL_ADC_ConfigChannel>
  hcrc.Instance = CRC;
 80234c0:	4836      	ldr	r0, [pc, #216]	; (802359c <main+0x31c>)
 80234c2:	4a37      	ldr	r2, [pc, #220]	; (80235a0 <main+0x320>)
 80234c4:	6002      	str	r2, [r0, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80234c6:	f7fe f911 	bl	80216ec <HAL_CRC_Init>
  hrng.Instance = RNG;
 80234ca:	4836      	ldr	r0, [pc, #216]	; (80235a4 <main+0x324>)
 80234cc:	4a36      	ldr	r2, [pc, #216]	; (80235a8 <main+0x328>)
 80234ce:	6002      	str	r2, [r0, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80234d0:	f7fe ff22 	bl	8022318 <HAL_RNG_Init>
  hspi3.Instance = SPI3;
 80234d4:	4a35      	ldr	r2, [pc, #212]	; (80235ac <main+0x32c>)
 80234d6:	f8df e0e8 	ldr.w	lr, [pc, #232]	; 80235c0 <main+0x340>
 80234da:	f8c2 e000 	str.w	lr, [r2]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80234de:	f04f 0c18 	mov.w	ip, #24
  hspi3.Init.CRCPolynomial = 10;
 80234e2:	230a      	movs	r3, #10
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80234e4:	f44f 7100 	mov.w	r1, #512	; 0x200
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80234e8:	f44f 7582 	mov.w	r5, #260	; 0x104
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80234ec:	4610      	mov	r0, r2
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80234ee:	f8c2 c01c 	str.w	ip, [r2, #28]
  hspi3.Init.CRCPolynomial = 10;
 80234f2:	62d3      	str	r3, [r2, #44]	; 0x2c
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80234f4:	6055      	str	r5, [r2, #4]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80234f6:	6191      	str	r1, [r2, #24]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80234f8:	6094      	str	r4, [r2, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80234fa:	60d4      	str	r4, [r2, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80234fc:	6114      	str	r4, [r2, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80234fe:	6154      	str	r4, [r2, #20]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8023500:	6214      	str	r4, [r2, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8023502:	6254      	str	r4, [r2, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8023504:	6294      	str	r4, [r2, #40]	; 0x28
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8023506:	f7fe fbf9 	bl	8021cfc <HAL_SPI_Init>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 802350a:	4621      	mov	r1, r4
 802350c:	2220      	movs	r2, #32
 802350e:	a810      	add	r0, sp, #64	; 0x40
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8023510:	9407      	str	r4, [sp, #28]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8023512:	9409      	str	r4, [sp, #36]	; 0x24
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8023514:	9408      	str	r4, [sp, #32]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8023516:	940a      	str	r4, [sp, #40]	; 0x28
 8023518:	940b      	str	r4, [sp, #44]	; 0x2c
 802351a:	940c      	str	r4, [sp, #48]	; 0x30
 802351c:	940d      	str	r4, [sp, #52]	; 0x34
 802351e:	940e      	str	r4, [sp, #56]	; 0x38
 8023520:	940f      	str	r4, [sp, #60]	; 0x3c
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8023522:	f002 f842 	bl	80255aa <memset>
  htim1.Init.Prescaler = 11;
 8023526:	230b      	movs	r3, #11
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8023528:	2580      	movs	r5, #128	; 0x80
  htim1.Instance = TIM1;
 802352a:	4a21      	ldr	r2, [pc, #132]	; (80235b0 <main+0x330>)
  htim1.Init.Prescaler = 11;
 802352c:	6073      	str	r3, [r6, #4]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 802352e:	4630      	mov	r0, r6
  htim1.Init.Period = 39999;
 8023530:	f649 433f 	movw	r3, #39999	; 0x9c3f
  htim1.Instance = TIM1;
 8023534:	6032      	str	r2, [r6, #0]
  htim1.Init.Period = 39999;
 8023536:	60f3      	str	r3, [r6, #12]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8023538:	60b4      	str	r4, [r6, #8]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 802353a:	6134      	str	r4, [r6, #16]
  htim1.Init.RepetitionCounter = 0;
 802353c:	6174      	str	r4, [r6, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 802353e:	61b5      	str	r5, [r6, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8023540:	f7fe ffa6 	bl	8022490 <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8023544:	a907      	add	r1, sp, #28
 8023546:	4630      	mov	r0, r6
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8023548:	9407      	str	r4, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 802354a:	9408      	str	r4, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 802354c:	f7ff fba0 	bl	8022c90 <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8023550:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8023552:	a909      	add	r1, sp, #36	; 0x24
 8023554:	4622      	mov	r2, r4
 8023556:	4630      	mov	r0, r6
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8023558:	9309      	str	r3, [sp, #36]	; 0x24
  sConfigOC.Pulse = 0;
 802355a:	940a      	str	r4, [sp, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 802355c:	940b      	str	r4, [sp, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 802355e:	940c      	str	r4, [sp, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8023560:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8023564:	940e      	str	r4, [sp, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8023566:	940f      	str	r4, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8023568:	f7ff f9e6 	bl	8022938 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 802356c:	4642      	mov	r2, r8
 802356e:	a909      	add	r1, sp, #36	; 0x24
 8023570:	4630      	mov	r0, r6
 8023572:	e027      	b.n	80235c4 <main+0x344>
 8023574:	e000ed00 	.word	0xe000ed00
 8023578:	08020000 	.word	0x08020000
 802357c:	20000694 	.word	0x20000694
 8023580:	2000073c 	.word	0x2000073c
 8023584:	20000574 	.word	0x20000574
 8023588:	40020800 	.word	0x40020800
 802358c:	40020400 	.word	0x40020400
 8023590:	40020c00 	.word	0x40020c00
 8023594:	40020000 	.word	0x40020000
 8023598:	10210000 	.word	0x10210000
 802359c:	200005f4 	.word	0x200005f4
 80235a0:	40023000 	.word	0x40023000
 80235a4:	2000077c 	.word	0x2000077c
 80235a8:	50060800 	.word	0x50060800
 80235ac:	2000063c 	.word	0x2000063c
 80235b0:	40010000 	.word	0x40010000
 80235b4:	40023800 	.word	0x40023800
 80235b8:	2000078c 	.word	0x2000078c
 80235bc:	40012000 	.word	0x40012000
 80235c0:	40003c00 	.word	0x40003c00
 80235c4:	f7ff f9b8 	bl	8022938 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80235c8:	4652      	mov	r2, sl
 80235ca:	a909      	add	r1, sp, #36	; 0x24
 80235cc:	4630      	mov	r0, r6
 80235ce:	f7ff f9b3 	bl	8022938 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80235d2:	a909      	add	r1, sp, #36	; 0x24
 80235d4:	4630      	mov	r0, r6
 80235d6:	220c      	movs	r2, #12
 80235d8:	f7ff f9ae 	bl	8022938 <HAL_TIM_PWM_ConfigChannel>
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80235dc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80235e0:	a910      	add	r1, sp, #64	; 0x40
 80235e2:	4630      	mov	r0, r6
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80235e4:	9215      	str	r2, [sp, #84]	; 0x54
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80235e6:	9410      	str	r4, [sp, #64]	; 0x40
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80235e8:	9411      	str	r4, [sp, #68]	; 0x44
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80235ea:	9412      	str	r4, [sp, #72]	; 0x48
  sBreakDeadTimeConfig.DeadTime = 0;
 80235ec:	9413      	str	r4, [sp, #76]	; 0x4c
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80235ee:	9414      	str	r4, [sp, #80]	; 0x50
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80235f0:	9417      	str	r4, [sp, #92]	; 0x5c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80235f2:	f7ff fb93 	bl	8022d1c <HAL_TIMEx_ConfigBreakDeadTime>
  HAL_TIM_MspPostInit(&htim1);
 80235f6:	4630      	mov	r0, r6
 80235f8:	f000 fb06 	bl	8023c08 <HAL_TIM_MspPostInit>
  htim2.Init.Prescaler = 14;
 80235fc:	230e      	movs	r3, #14
  htim2.Instance = TIM2;
 80235fe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  htim2.Init.Prescaler = 14;
 8023602:	f8cb 3004 	str.w	r3, [fp, #4]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8023606:	4658      	mov	r0, fp
  htim2.Init.Period = 99;
 8023608:	2363      	movs	r3, #99	; 0x63
  htim2.Instance = TIM2;
 802360a:	f8cb 2000 	str.w	r2, [fp]
  htim2.Init.Period = 99;
 802360e:	f8cb 300c 	str.w	r3, [fp, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8023612:	940a      	str	r4, [sp, #40]	; 0x28
  TIM_OC_InitTypeDef sConfigOC = {0};
 8023614:	9411      	str	r4, [sp, #68]	; 0x44
 8023616:	9412      	str	r4, [sp, #72]	; 0x48
 8023618:	9413      	str	r4, [sp, #76]	; 0x4c
 802361a:	9414      	str	r4, [sp, #80]	; 0x50
 802361c:	9415      	str	r4, [sp, #84]	; 0x54
 802361e:	9416      	str	r4, [sp, #88]	; 0x58
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8023620:	9409      	str	r4, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8023622:	9410      	str	r4, [sp, #64]	; 0x40
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8023624:	f8cb 4008 	str.w	r4, [fp, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8023628:	f8cb 4010 	str.w	r4, [fp, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 802362c:	f8cb 5018 	str.w	r5, [fp, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8023630:	f7fe ff2e 	bl	8022490 <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8023634:	a909      	add	r1, sp, #36	; 0x24
 8023636:	4658      	mov	r0, fp
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8023638:	9409      	str	r4, [sp, #36]	; 0x24
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 802363a:	940a      	str	r4, [sp, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 802363c:	f7ff fb28 	bl	8022c90 <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8023640:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8023642:	a910      	add	r1, sp, #64	; 0x40
 8023644:	4622      	mov	r2, r4
 8023646:	4658      	mov	r0, fp
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8023648:	9310      	str	r3, [sp, #64]	; 0x40
  sConfigOC.Pulse = 0;
 802364a:	9411      	str	r4, [sp, #68]	; 0x44
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 802364c:	9412      	str	r4, [sp, #72]	; 0x48
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 802364e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8023652:	f7ff f971 	bl	8022938 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8023656:	4652      	mov	r2, sl
 8023658:	a910      	add	r1, sp, #64	; 0x40
 802365a:	4658      	mov	r0, fp
 802365c:	f7ff f96c 	bl	8022938 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8023660:	a910      	add	r1, sp, #64	; 0x40
 8023662:	220c      	movs	r2, #12
 8023664:	4658      	mov	r0, fp
 8023666:	f7ff f967 	bl	8022938 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim2);
 802366a:	4658      	mov	r0, fp
 802366c:	f000 facc 	bl	8023c08 <HAL_TIM_MspPostInit>
  htim4.Init.Prescaler = 11;
 8023670:	220b      	movs	r2, #11
  htim4.Instance = TIM4;
 8023672:	4b66      	ldr	r3, [pc, #408]	; (802380c <main+0x58c>)
  htim4.Init.Prescaler = 11;
 8023674:	607a      	str	r2, [r7, #4]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8023676:	4638      	mov	r0, r7
  htim4.Init.Period = 39999;
 8023678:	f649 423f 	movw	r2, #39999	; 0x9c3f
 802367c:	60fa      	str	r2, [r7, #12]
  htim4.Instance = TIM4;
 802367e:	603b      	str	r3, [r7, #0]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8023680:	60bc      	str	r4, [r7, #8]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8023682:	613c      	str	r4, [r7, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8023684:	61bd      	str	r5, [r7, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8023686:	940a      	str	r4, [sp, #40]	; 0x28
  TIM_OC_InitTypeDef sConfigOC = {0};
 8023688:	9411      	str	r4, [sp, #68]	; 0x44
 802368a:	9412      	str	r4, [sp, #72]	; 0x48
 802368c:	9413      	str	r4, [sp, #76]	; 0x4c
 802368e:	9414      	str	r4, [sp, #80]	; 0x50
 8023690:	9415      	str	r4, [sp, #84]	; 0x54
 8023692:	9416      	str	r4, [sp, #88]	; 0x58
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8023694:	9409      	str	r4, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8023696:	9410      	str	r4, [sp, #64]	; 0x40
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8023698:	f7fe fefa 	bl	8022490 <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 802369c:	a909      	add	r1, sp, #36	; 0x24
 802369e:	4638      	mov	r0, r7
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80236a0:	9409      	str	r4, [sp, #36]	; 0x24
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80236a2:	940a      	str	r4, [sp, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80236a4:	f7ff faf4 	bl	8022c90 <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80236a8:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80236aa:	a910      	add	r1, sp, #64	; 0x40
 80236ac:	4622      	mov	r2, r4
 80236ae:	4638      	mov	r0, r7
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80236b0:	9310      	str	r3, [sp, #64]	; 0x40
  sConfigOC.Pulse = 0;
 80236b2:	9411      	str	r4, [sp, #68]	; 0x44
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80236b4:	9412      	str	r4, [sp, #72]	; 0x48
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80236b6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80236ba:	f7ff f93d 	bl	8022938 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80236be:	4642      	mov	r2, r8
 80236c0:	a910      	add	r1, sp, #64	; 0x40
 80236c2:	4638      	mov	r0, r7
 80236c4:	f7ff f938 	bl	8022938 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80236c8:	a910      	add	r1, sp, #64	; 0x40
 80236ca:	4652      	mov	r2, sl
 80236cc:	4638      	mov	r0, r7
  htim8.Instance = TIM8;
 80236ce:	4e50      	ldr	r6, [pc, #320]	; (8023810 <main+0x590>)
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80236d0:	f7ff f932 	bl	8022938 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim4);
 80236d4:	4638      	mov	r0, r7
 80236d6:	f000 fa97 	bl	8023c08 <HAL_TIM_MspPostInit>
  htim8.Init.Period = 39999;
 80236da:	f649 423f 	movw	r2, #39999	; 0x9c3f
  htim8.Instance = TIM8;
 80236de:	4b4d      	ldr	r3, [pc, #308]	; (8023814 <main+0x594>)
  htim8.Init.Period = 39999;
 80236e0:	60f2      	str	r2, [r6, #12]
  if (HAL_TIM_IC_Init(&htim8) != HAL_OK)
 80236e2:	4630      	mov	r0, r6
  htim8.Init.Prescaler = 11;
 80236e4:	220b      	movs	r2, #11
  htim8.Instance = TIM8;
 80236e6:	6033      	str	r3, [r6, #0]
  htim8.Init.Prescaler = 11;
 80236e8:	6072      	str	r2, [r6, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80236ea:	60b4      	str	r4, [r6, #8]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80236ec:	6134      	str	r4, [r6, #16]
  htim8.Init.RepetitionCounter = 0;
 80236ee:	6174      	str	r4, [r6, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80236f0:	61b5      	str	r5, [r6, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80236f2:	940a      	str	r4, [sp, #40]	; 0x28
  TIM_IC_InitTypeDef sConfigIC = {0};
 80236f4:	9411      	str	r4, [sp, #68]	; 0x44
 80236f6:	9412      	str	r4, [sp, #72]	; 0x48
 80236f8:	9413      	str	r4, [sp, #76]	; 0x4c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80236fa:	9409      	str	r4, [sp, #36]	; 0x24
  TIM_IC_InitTypeDef sConfigIC = {0};
 80236fc:	9410      	str	r4, [sp, #64]	; 0x40
  if (HAL_TIM_IC_Init(&htim8) != HAL_OK)
 80236fe:	f7fe ff93 	bl	8022628 <HAL_TIM_IC_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8023702:	a909      	add	r1, sp, #36	; 0x24
 8023704:	4630      	mov	r0, r6
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8023706:	9409      	str	r4, [sp, #36]	; 0x24
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8023708:	940a      	str	r4, [sp, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 802370a:	f7ff fac1 	bl	8022c90 <HAL_TIMEx_MasterConfigSynchronization>
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 802370e:	a910      	add	r1, sp, #64	; 0x40
 8023710:	4622      	mov	r2, r4
 8023712:	4630      	mov	r0, r6
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8023714:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8023718:	9410      	str	r4, [sp, #64]	; 0x40
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 802371a:	9412      	str	r4, [sp, #72]	; 0x48
  sConfigIC.ICFilter = 0;
 802371c:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 802371e:	f7ff f83d 	bl	802279c <HAL_TIM_IC_ConfigChannel>
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8023722:	4642      	mov	r2, r8
 8023724:	a910      	add	r1, sp, #64	; 0x40
 8023726:	4630      	mov	r0, r6
 8023728:	f7ff f838 	bl	802279c <HAL_TIM_IC_ConfigChannel>
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 802372c:	4652      	mov	r2, sl
 802372e:	a910      	add	r1, sp, #64	; 0x40
 8023730:	4630      	mov	r0, r6
  htim12.Instance = TIM12;
 8023732:	4f39      	ldr	r7, [pc, #228]	; (8023818 <main+0x598>)
  htim3.Instance = TIM3;
 8023734:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 802382c <main+0x5ac>
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8023738:	f7ff f830 	bl	802279c <HAL_TIM_IC_ConfigChannel>
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 802373c:	a910      	add	r1, sp, #64	; 0x40
 802373e:	4630      	mov	r0, r6
 8023740:	220c      	movs	r2, #12
 8023742:	f7ff f82b 	bl	802279c <HAL_TIM_IC_ConfigChannel>
  htim12.Init.Prescaler = 14;
 8023746:	220e      	movs	r2, #14
  htim12.Instance = TIM12;
 8023748:	4b34      	ldr	r3, [pc, #208]	; (802381c <main+0x59c>)
  htim12.Init.Prescaler = 14;
 802374a:	607a      	str	r2, [r7, #4]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 802374c:	4638      	mov	r0, r7
  htim12.Init.Period = 99;
 802374e:	2263      	movs	r2, #99	; 0x63
 8023750:	60fa      	str	r2, [r7, #12]
  htim12.Instance = TIM12;
 8023752:	603b      	str	r3, [r7, #0]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8023754:	9411      	str	r4, [sp, #68]	; 0x44
 8023756:	9412      	str	r4, [sp, #72]	; 0x48
 8023758:	9413      	str	r4, [sp, #76]	; 0x4c
 802375a:	9414      	str	r4, [sp, #80]	; 0x50
 802375c:	9415      	str	r4, [sp, #84]	; 0x54
 802375e:	9416      	str	r4, [sp, #88]	; 0x58
 8023760:	9410      	str	r4, [sp, #64]	; 0x40
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8023762:	60bc      	str	r4, [r7, #8]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8023764:	613c      	str	r4, [r7, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8023766:	61bd      	str	r5, [r7, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8023768:	f7fe fe92 	bl	8022490 <HAL_TIM_PWM_Init>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 802376c:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 802376e:	a910      	add	r1, sp, #64	; 0x40
 8023770:	4622      	mov	r2, r4
 8023772:	4638      	mov	r0, r7
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8023774:	9310      	str	r3, [sp, #64]	; 0x40
  sConfigOC.Pulse = 0;
 8023776:	9411      	str	r4, [sp, #68]	; 0x44
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8023778:	9412      	str	r4, [sp, #72]	; 0x48
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 802377a:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 802377e:	f7ff f8db 	bl	8022938 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8023782:	4642      	mov	r2, r8
 8023784:	a910      	add	r1, sp, #64	; 0x40
 8023786:	4638      	mov	r0, r7
 8023788:	f7ff f8d6 	bl	8022938 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim12);
 802378c:	4638      	mov	r0, r7
 802378e:	f000 fa3b 	bl	8023c08 <HAL_TIM_MspPostInit>
  huart3.Instance = USART3;
 8023792:	4b23      	ldr	r3, [pc, #140]	; (8023820 <main+0x5a0>)
 8023794:	4e23      	ldr	r6, [pc, #140]	; (8023824 <main+0x5a4>)
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8023796:	609c      	str	r4, [r3, #8]
  huart3.Init.BaudRate = 115200;
 8023798:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
  huart3.Init.Mode = UART_MODE_TX_RX;
 802379c:	220c      	movs	r2, #12
  if (HAL_UART_Init(&huart3) != HAL_OK)
 802379e:	4618      	mov	r0, r3
  huart3.Init.BaudRate = 115200;
 80237a0:	6059      	str	r1, [r3, #4]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80237a2:	615a      	str	r2, [r3, #20]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80237a4:	60dc      	str	r4, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80237a6:	611c      	str	r4, [r3, #16]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80237a8:	619c      	str	r4, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80237aa:	61dc      	str	r4, [r3, #28]
  huart3.Instance = USART3;
 80237ac:	601e      	str	r6, [r3, #0]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80237ae:	f7ff fadf 	bl	8022d70 <HAL_UART_Init>
  htim3.Instance = TIM3;
 80237b2:	4a1d      	ldr	r2, [pc, #116]	; (8023828 <main+0x5a8>)
 80237b4:	f8c9 2000 	str.w	r2, [r9]
  htim3.Init.Period = 999;
 80237b8:	f240 33e7 	movw	r3, #999	; 0x3e7
  htim3.Init.Prescaler = 11;
 80237bc:	210b      	movs	r1, #11
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80237be:	4648      	mov	r0, r9
  htim3.Init.Prescaler = 11;
 80237c0:	f8c9 1004 	str.w	r1, [r9, #4]
  htim3.Init.Period = 999;
 80237c4:	f8c9 300c 	str.w	r3, [r9, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80237c8:	940a      	str	r4, [sp, #40]	; 0x28
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80237ca:	9411      	str	r4, [sp, #68]	; 0x44
 80237cc:	9412      	str	r4, [sp, #72]	; 0x48
 80237ce:	9413      	str	r4, [sp, #76]	; 0x4c
 80237d0:	9410      	str	r4, [sp, #64]	; 0x40
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80237d2:	9409      	str	r4, [sp, #36]	; 0x24
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80237d4:	f8c9 4008 	str.w	r4, [r9, #8]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80237d8:	f8c9 4010 	str.w	r4, [r9, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80237dc:	f8c9 5018 	str.w	r5, [r9, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80237e0:	f7fe fdb4 	bl	802234c <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80237e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80237e8:	a910      	add	r1, sp, #64	; 0x40
 80237ea:	4648      	mov	r0, r9
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80237ec:	9310      	str	r3, [sp, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80237ee:	f7ff f9a9 	bl	8022b44 <HAL_TIM_ConfigClockSource>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80237f2:	2320      	movs	r3, #32
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80237f4:	a909      	add	r1, sp, #36	; 0x24
 80237f6:	4648      	mov	r0, r9
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80237f8:	9309      	str	r3, [sp, #36]	; 0x24
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80237fa:	940a      	str	r4, [sp, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80237fc:	f7ff fa48 	bl	8022c90 <HAL_TIMEx_MasterConfigSynchronization>
init();
 8023800:	f000 fbe8 	bl	8023fd4 <init>
      loop();
 8023804:	f000 fc5c 	bl	80240c0 <loop>
 8023808:	e7fc      	b.n	8023804 <main+0x584>
 802380a:	bf00      	nop
 802380c:	40000800 	.word	0x40000800
 8023810:	20000534 	.word	0x20000534
 8023814:	40010400 	.word	0x40010400
 8023818:	200007cc 	.word	0x200007cc
 802381c:	40001800 	.word	0x40001800
 8023820:	200005b4 	.word	0x200005b4
 8023824:	40004800 	.word	0x40004800
 8023828:	40000400 	.word	0x40000400
 802382c:	200005fc 	.word	0x200005fc

08023830 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8023830:	4770      	bx	lr
 8023832:	bf00      	nop

08023834 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8023834:	4b05      	ldr	r3, [pc, #20]	; (802384c <SystemInit+0x18>)
 8023836:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 802383a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 802383e:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8023842:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8023846:	6099      	str	r1, [r3, #8]
 8023848:	4770      	bx	lr
 802384a:	bf00      	nop
 802384c:	e000ed00 	.word	0xe000ed00

08023850 <NMI_Handler>:
 8023850:	4770      	bx	lr
 8023852:	bf00      	nop

08023854 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8023854:	e7fe      	b.n	8023854 <HardFault_Handler>
 8023856:	bf00      	nop

08023858 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8023858:	e7fe      	b.n	8023858 <MemManage_Handler>
 802385a:	bf00      	nop

0802385c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 802385c:	e7fe      	b.n	802385c <BusFault_Handler>
 802385e:	bf00      	nop

08023860 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8023860:	e7fe      	b.n	8023860 <UsageFault_Handler>
 8023862:	bf00      	nop

08023864 <SVC_Handler>:
 8023864:	4770      	bx	lr
 8023866:	bf00      	nop

08023868 <DebugMon_Handler>:
 8023868:	4770      	bx	lr
 802386a:	bf00      	nop

0802386c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 802386c:	4770      	bx	lr
 802386e:	bf00      	nop

08023870 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8023870:	f7fd bbee 	b.w	8021050 <HAL_IncTick>

08023874 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8023874:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART3_IRQn 0 */
    debug_rx(huart3.Instance->DR);
 8023876:	4c05      	ldr	r4, [pc, #20]	; (802388c <USART3_IRQHandler+0x18>)
 8023878:	6823      	ldr	r3, [r4, #0]
 802387a:	6858      	ldr	r0, [r3, #4]
 802387c:	b2c0      	uxtb	r0, r0
 802387e:	f000 fceb 	bl	8024258 <debug_rx>
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8023882:	4620      	mov	r0, r4
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8023884:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_UART_IRQHandler(&huart3);
 8023888:	f7ff bbea 	b.w	8023060 <HAL_UART_IRQHandler>
 802388c:	200005b4 	.word	0x200005b4

08023890 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8023890:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8023892:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8023896:	f7fe fa25 	bl	8021ce4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
    if((RFM_IRQ_GPIO_Port->IDR & RFM_IRQ_Pin) == false) rfm12b_irq_handler();
 802389a:	4b04      	ldr	r3, [pc, #16]	; (80238ac <EXTI15_10_IRQHandler+0x1c>)
 802389c:	691b      	ldr	r3, [r3, #16]
 802389e:	04db      	lsls	r3, r3, #19
 80238a0:	d500      	bpl.n	80238a4 <EXTI15_10_IRQHandler+0x14>
 80238a2:	bd08      	pop	{r3, pc}
  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80238a4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    if((RFM_IRQ_GPIO_Port->IDR & RFM_IRQ_Pin) == false) rfm12b_irq_handler();
 80238a8:	f001 bc38 	b.w	802511c <rfm12b_irq_handler>
 80238ac:	40020800 	.word	0x40020800

080238b0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80238b0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */
    if(DMA2->LISR & DMA_FLAG_TCIF0_4)
 80238b2:	4b0d      	ldr	r3, [pc, #52]	; (80238e8 <DMA2_Stream0_IRQHandler+0x38>)
 80238b4:	681a      	ldr	r2, [r3, #0]
 80238b6:	0692      	lsls	r2, r2, #26
 80238b8:	d40e      	bmi.n	80238d8 <DMA2_Stream0_IRQHandler+0x28>
    {
        adc_drv_conv_complete_full();
    }
    else if(DMA2->LISR & DMA_FLAG_HTIF0_4)
 80238ba:	681b      	ldr	r3, [r3, #0]
 80238bc:	06db      	lsls	r3, r3, #27
 80238be:	d404      	bmi.n	80238ca <DMA2_Stream0_IRQHandler+0x1a>
    {
        adc_drv_conv_complete_half();
    }

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80238c0:	480a      	ldr	r0, [pc, #40]	; (80238ec <DMA2_Stream0_IRQHandler+0x3c>)
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80238c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_DMA_IRQHandler(&hdma_adc1);
 80238c6:	f7fe b80f 	b.w	80218e8 <HAL_DMA_IRQHandler>
        adc_drv_conv_complete_half();
 80238ca:	f000 fb3f 	bl	8023f4c <adc_drv_conv_complete_half>
  HAL_DMA_IRQHandler(&hdma_adc1);
 80238ce:	4807      	ldr	r0, [pc, #28]	; (80238ec <DMA2_Stream0_IRQHandler+0x3c>)
}
 80238d0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_DMA_IRQHandler(&hdma_adc1);
 80238d4:	f7fe b808 	b.w	80218e8 <HAL_DMA_IRQHandler>
        adc_drv_conv_complete_full();
 80238d8:	f000 fb3e 	bl	8023f58 <adc_drv_conv_complete_full>
  HAL_DMA_IRQHandler(&hdma_adc1);
 80238dc:	4803      	ldr	r0, [pc, #12]	; (80238ec <DMA2_Stream0_IRQHandler+0x3c>)
}
 80238de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_DMA_IRQHandler(&hdma_adc1);
 80238e2:	f7fe b801 	b.w	80218e8 <HAL_DMA_IRQHandler>
 80238e6:	bf00      	nop
 80238e8:	40026400 	.word	0x40026400
 80238ec:	200006dc 	.word	0x200006dc

080238f0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80238f0:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80238f2:	4b0c      	ldr	r3, [pc, #48]	; (8023924 <HAL_MspInit+0x34>)
 80238f4:	2100      	movs	r1, #0
 80238f6:	9100      	str	r1, [sp, #0]
 80238f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80238fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80238fe:	645a      	str	r2, [r3, #68]	; 0x44
 8023900:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8023902:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8023906:	9200      	str	r2, [sp, #0]
 8023908:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 802390a:	9101      	str	r1, [sp, #4]
 802390c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 802390e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8023912:	641a      	str	r2, [r3, #64]	; 0x40
 8023914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023916:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 802391a:	9301      	str	r3, [sp, #4]
 802391c:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 802391e:	b002      	add	sp, #8
 8023920:	4770      	bx	lr
 8023922:	bf00      	nop
 8023924:	40023800 	.word	0x40023800

08023928 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8023928:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 802392a:	6802      	ldr	r2, [r0, #0]
 802392c:	4b2e      	ldr	r3, [pc, #184]	; (80239e8 <HAL_ADC_MspInit+0xc0>)
{
 802392e:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8023930:	2400      	movs	r4, #0
  if(hadc->Instance==ADC1)
 8023932:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8023934:	9404      	str	r4, [sp, #16]
 8023936:	9403      	str	r4, [sp, #12]
 8023938:	9405      	str	r4, [sp, #20]
 802393a:	9406      	str	r4, [sp, #24]
 802393c:	9407      	str	r4, [sp, #28]
  if(hadc->Instance==ADC1)
 802393e:	d001      	beq.n	8023944 <HAL_ADC_MspInit+0x1c>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8023940:	b009      	add	sp, #36	; 0x24
 8023942:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 8023944:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8023948:	9400      	str	r4, [sp, #0]
 802394a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    hdma_adc1.Instance = DMA2_Stream0;
 802394c:	4e27      	ldr	r6, [pc, #156]	; (80239ec <HAL_ADC_MspInit+0xc4>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 802394e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8023952:	645a      	str	r2, [r3, #68]	; 0x44
 8023954:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8023956:	f402 7280 	and.w	r2, r2, #256	; 0x100
 802395a:	9200      	str	r2, [sp, #0]
 802395c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 802395e:	9401      	str	r4, [sp, #4]
 8023960:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8023962:	f042 0204 	orr.w	r2, r2, #4
 8023966:	631a      	str	r2, [r3, #48]	; 0x30
 8023968:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 802396a:	f002 0204 	and.w	r2, r2, #4
 802396e:	9201      	str	r2, [sp, #4]
 8023970:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8023972:	9402      	str	r4, [sp, #8]
 8023974:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8023976:	f042 0201 	orr.w	r2, r2, #1
 802397a:	631a      	str	r2, [r3, #48]	; 0x30
 802397c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802397e:	f003 0301 	and.w	r3, r3, #1
 8023982:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8023984:	2703      	movs	r7, #3
    GPIO_InitStruct.Pin = SAIN0_Pin|NTC1_Pin|RSSI_Pin;
 8023986:	2338      	movs	r3, #56	; 0x38
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8023988:	a903      	add	r1, sp, #12
 802398a:	4605      	mov	r5, r0
 802398c:	4818      	ldr	r0, [pc, #96]	; (80239f0 <HAL_ADC_MspInit+0xc8>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 802398e:	9a02      	ldr	r2, [sp, #8]
    GPIO_InitStruct.Pin = SAIN0_Pin|NTC1_Pin|RSSI_Pin;
 8023990:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8023992:	9704      	str	r7, [sp, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8023994:	f7fe f878 	bl	8021a88 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SAIN1_Pin|SAIN2_Pin|SAIN3_Pin|SAIN4_Pin 
 8023998:	23ff      	movs	r3, #255	; 0xff
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 802399a:	a903      	add	r1, sp, #12
 802399c:	4815      	ldr	r0, [pc, #84]	; (80239f4 <HAL_ADC_MspInit+0xcc>)
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 802399e:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pin = SAIN1_Pin|SAIN2_Pin|SAIN3_Pin|SAIN4_Pin 
 80239a0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80239a2:	9405      	str	r4, [sp, #20]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80239a4:	f44f 6780 	mov.w	r7, #1024	; 0x400
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80239a8:	f7fe f86e 	bl	8021a88 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA2_Stream0;
 80239ac:	f8df e048 	ldr.w	lr, [pc, #72]	; 80239f8 <HAL_ADC_MspInit+0xd0>
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80239b0:	6074      	str	r4, [r6, #4]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80239b2:	f44f 6100 	mov.w	r1, #2048	; 0x800
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80239b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80239ba:	f44f 7380 	mov.w	r3, #256	; 0x100
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80239be:	4630      	mov	r0, r6
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80239c0:	60b4      	str	r4, [r6, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80239c2:	60f4      	str	r4, [r6, #12]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80239c4:	6234      	str	r4, [r6, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80239c6:	6274      	str	r4, [r6, #36]	; 0x24
    hdma_adc1.Instance = DMA2_Stream0;
 80239c8:	f8c6 e000 	str.w	lr, [r6]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80239cc:	6137      	str	r7, [r6, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80239ce:	6171      	str	r1, [r6, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80239d0:	61b2      	str	r2, [r6, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80239d2:	61f3      	str	r3, [r6, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80239d4:	f7fd fe9e 	bl	8021714 <HAL_DMA_Init>
 80239d8:	b918      	cbnz	r0, 80239e2 <HAL_ADC_MspInit+0xba>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80239da:	63ae      	str	r6, [r5, #56]	; 0x38
 80239dc:	63b5      	str	r5, [r6, #56]	; 0x38
}
 80239de:	b009      	add	sp, #36	; 0x24
 80239e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      Error_Handler();
 80239e2:	f7ff ff25 	bl	8023830 <Error_Handler>
 80239e6:	e7f8      	b.n	80239da <HAL_ADC_MspInit+0xb2>
 80239e8:	40012000 	.word	0x40012000
 80239ec:	200006dc 	.word	0x200006dc
 80239f0:	40020800 	.word	0x40020800
 80239f4:	40020000 	.word	0x40020000
 80239f8:	40026410 	.word	0x40026410

080239fc <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 80239fc:	6802      	ldr	r2, [r0, #0]
 80239fe:	4b0b      	ldr	r3, [pc, #44]	; (8023a2c <HAL_CRC_MspInit+0x30>)
 8023a00:	429a      	cmp	r2, r3
 8023a02:	d000      	beq.n	8023a06 <HAL_CRC_MspInit+0xa>
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8023a04:	4770      	bx	lr
{
 8023a06:	b082      	sub	sp, #8
    __HAL_RCC_CRC_CLK_ENABLE();
 8023a08:	2200      	movs	r2, #0
 8023a0a:	9201      	str	r2, [sp, #4]
 8023a0c:	f8d3 2830 	ldr.w	r2, [r3, #2096]	; 0x830
 8023a10:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8023a14:	f8c3 2830 	str.w	r2, [r3, #2096]	; 0x830
 8023a18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8023a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023a1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8023a22:	9301      	str	r3, [sp, #4]
 8023a24:	9b01      	ldr	r3, [sp, #4]
}
 8023a26:	b002      	add	sp, #8
 8023a28:	4770      	bx	lr
 8023a2a:	bf00      	nop
 8023a2c:	40023000 	.word	0x40023000

08023a30 <HAL_RNG_MspInit>:
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
  if(hrng->Instance==RNG)
 8023a30:	6802      	ldr	r2, [r0, #0]
 8023a32:	4b09      	ldr	r3, [pc, #36]	; (8023a58 <HAL_RNG_MspInit+0x28>)
 8023a34:	429a      	cmp	r2, r3
 8023a36:	d000      	beq.n	8023a3a <HAL_RNG_MspInit+0xa>
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8023a38:	4770      	bx	lr
{
 8023a3a:	b082      	sub	sp, #8
    __HAL_RCC_RNG_CLK_ENABLE();
 8023a3c:	4b07      	ldr	r3, [pc, #28]	; (8023a5c <HAL_RNG_MspInit+0x2c>)
 8023a3e:	2200      	movs	r2, #0
 8023a40:	9201      	str	r2, [sp, #4]
 8023a42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8023a44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8023a48:	635a      	str	r2, [r3, #52]	; 0x34
 8023a4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8023a4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8023a50:	9301      	str	r3, [sp, #4]
 8023a52:	9b01      	ldr	r3, [sp, #4]
}
 8023a54:	b002      	add	sp, #8
 8023a56:	4770      	bx	lr
 8023a58:	50060800 	.word	0x50060800
 8023a5c:	40023800 	.word	0x40023800

08023a60 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8023a60:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hspi->Instance==SPI3)
 8023a62:	6801      	ldr	r1, [r0, #0]
 8023a64:	4a17      	ldr	r2, [pc, #92]	; (8023ac4 <HAL_SPI_MspInit+0x64>)
{
 8023a66:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8023a68:	2300      	movs	r3, #0
  if(hspi->Instance==SPI3)
 8023a6a:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8023a6c:	9304      	str	r3, [sp, #16]
 8023a6e:	9303      	str	r3, [sp, #12]
 8023a70:	9305      	str	r3, [sp, #20]
 8023a72:	9306      	str	r3, [sp, #24]
 8023a74:	9307      	str	r3, [sp, #28]
  if(hspi->Instance==SPI3)
 8023a76:	d001      	beq.n	8023a7c <HAL_SPI_MspInit+0x1c>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8023a78:	b008      	add	sp, #32
 8023a7a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_SPI3_CLK_ENABLE();
 8023a7c:	f502 32fe 	add.w	r2, r2, #130048	; 0x1fc00
 8023a80:	9301      	str	r3, [sp, #4]
 8023a82:	6c11      	ldr	r1, [r2, #64]	; 0x40
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8023a84:	4810      	ldr	r0, [pc, #64]	; (8023ac8 <HAL_SPI_MspInit+0x68>)
    __HAL_RCC_SPI3_CLK_ENABLE();
 8023a86:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8023a8a:	6411      	str	r1, [r2, #64]	; 0x40
 8023a8c:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8023a8e:	f401 4100 	and.w	r1, r1, #32768	; 0x8000
 8023a92:	9101      	str	r1, [sp, #4]
 8023a94:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8023a96:	9302      	str	r3, [sp, #8]
 8023a98:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8023a9a:	f043 0302 	orr.w	r3, r3, #2
 8023a9e:	6313      	str	r3, [r2, #48]	; 0x30
 8023aa0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8023aa2:	f003 0302 	and.w	r3, r3, #2
 8023aa6:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8023aa8:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8023aaa:	2306      	movs	r3, #6
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8023aac:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8023aae:	2538      	movs	r5, #56	; 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8023ab0:	2402      	movs	r4, #2
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8023ab2:	9e02      	ldr	r6, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8023ab4:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8023ab6:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8023ab8:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8023aba:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8023abc:	f7fd ffe4 	bl	8021a88 <HAL_GPIO_Init>
}
 8023ac0:	b008      	add	sp, #32
 8023ac2:	bd70      	pop	{r4, r5, r6, pc}
 8023ac4:	40003c00 	.word	0x40003c00
 8023ac8:	40020400 	.word	0x40020400

08023acc <HAL_TIM_PWM_MspInit>:
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
  if(htim_pwm->Instance==TIM1)
 8023acc:	6803      	ldr	r3, [r0, #0]
 8023ace:	4a23      	ldr	r2, [pc, #140]	; (8023b5c <HAL_TIM_PWM_MspInit+0x90>)
 8023ad0:	4293      	cmp	r3, r2
{
 8023ad2:	b084      	sub	sp, #16
  if(htim_pwm->Instance==TIM1)
 8023ad4:	d018      	beq.n	8023b08 <HAL_TIM_PWM_MspInit+0x3c>
    __HAL_RCC_TIM1_CLK_ENABLE();
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_pwm->Instance==TIM2)
 8023ad6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8023ada:	d023      	beq.n	8023b24 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_pwm->Instance==TIM4)
 8023adc:	4a20      	ldr	r2, [pc, #128]	; (8023b60 <HAL_TIM_PWM_MspInit+0x94>)
 8023ade:	4293      	cmp	r3, r2
 8023ae0:	d02e      	beq.n	8023b40 <HAL_TIM_PWM_MspInit+0x74>
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
  else if(htim_pwm->Instance==TIM12)
 8023ae2:	4a20      	ldr	r2, [pc, #128]	; (8023b64 <HAL_TIM_PWM_MspInit+0x98>)
 8023ae4:	4293      	cmp	r3, r2
 8023ae6:	d001      	beq.n	8023aec <HAL_TIM_PWM_MspInit+0x20>
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8023ae8:	b004      	add	sp, #16
 8023aea:	4770      	bx	lr
    __HAL_RCC_TIM12_CLK_ENABLE();
 8023aec:	4b1e      	ldr	r3, [pc, #120]	; (8023b68 <HAL_TIM_PWM_MspInit+0x9c>)
 8023aee:	2200      	movs	r2, #0
 8023af0:	9203      	str	r2, [sp, #12]
 8023af2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8023af4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8023af8:	641a      	str	r2, [r3, #64]	; 0x40
 8023afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023afc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8023b00:	9303      	str	r3, [sp, #12]
 8023b02:	9b03      	ldr	r3, [sp, #12]
}
 8023b04:	b004      	add	sp, #16
 8023b06:	4770      	bx	lr
    __HAL_RCC_TIM1_CLK_ENABLE();
 8023b08:	4b17      	ldr	r3, [pc, #92]	; (8023b68 <HAL_TIM_PWM_MspInit+0x9c>)
 8023b0a:	2200      	movs	r2, #0
 8023b0c:	9200      	str	r2, [sp, #0]
 8023b0e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8023b10:	f042 0201 	orr.w	r2, r2, #1
 8023b14:	645a      	str	r2, [r3, #68]	; 0x44
 8023b16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8023b18:	f003 0301 	and.w	r3, r3, #1
 8023b1c:	9300      	str	r3, [sp, #0]
 8023b1e:	9b00      	ldr	r3, [sp, #0]
}
 8023b20:	b004      	add	sp, #16
 8023b22:	4770      	bx	lr
    __HAL_RCC_TIM2_CLK_ENABLE();
 8023b24:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 8023b28:	2200      	movs	r2, #0
 8023b2a:	9201      	str	r2, [sp, #4]
 8023b2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8023b2e:	f042 0201 	orr.w	r2, r2, #1
 8023b32:	641a      	str	r2, [r3, #64]	; 0x40
 8023b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023b36:	f003 0301 	and.w	r3, r3, #1
 8023b3a:	9301      	str	r3, [sp, #4]
 8023b3c:	9b01      	ldr	r3, [sp, #4]
 8023b3e:	e7d3      	b.n	8023ae8 <HAL_TIM_PWM_MspInit+0x1c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8023b40:	4b09      	ldr	r3, [pc, #36]	; (8023b68 <HAL_TIM_PWM_MspInit+0x9c>)
 8023b42:	2200      	movs	r2, #0
 8023b44:	9202      	str	r2, [sp, #8]
 8023b46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8023b48:	f042 0204 	orr.w	r2, r2, #4
 8023b4c:	641a      	str	r2, [r3, #64]	; 0x40
 8023b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023b50:	f003 0304 	and.w	r3, r3, #4
 8023b54:	9302      	str	r3, [sp, #8]
 8023b56:	9b02      	ldr	r3, [sp, #8]
 8023b58:	e7c6      	b.n	8023ae8 <HAL_TIM_PWM_MspInit+0x1c>
 8023b5a:	bf00      	nop
 8023b5c:	40010000 	.word	0x40010000
 8023b60:	40000800 	.word	0x40000800
 8023b64:	40001800 	.word	0x40001800
 8023b68:	40023800 	.word	0x40023800

08023b6c <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM3)
 8023b6c:	6802      	ldr	r2, [r0, #0]
 8023b6e:	4b0a      	ldr	r3, [pc, #40]	; (8023b98 <HAL_TIM_Base_MspInit+0x2c>)
 8023b70:	429a      	cmp	r2, r3
 8023b72:	d000      	beq.n	8023b76 <HAL_TIM_Base_MspInit+0xa>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8023b74:	4770      	bx	lr
{
 8023b76:	b082      	sub	sp, #8
    __HAL_RCC_TIM3_CLK_ENABLE();
 8023b78:	f503 330d 	add.w	r3, r3, #144384	; 0x23400
 8023b7c:	2200      	movs	r2, #0
 8023b7e:	9201      	str	r2, [sp, #4]
 8023b80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8023b82:	f042 0202 	orr.w	r2, r2, #2
 8023b86:	641a      	str	r2, [r3, #64]	; 0x40
 8023b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023b8a:	f003 0302 	and.w	r3, r3, #2
 8023b8e:	9301      	str	r3, [sp, #4]
 8023b90:	9b01      	ldr	r3, [sp, #4]
}
 8023b92:	b002      	add	sp, #8
 8023b94:	4770      	bx	lr
 8023b96:	bf00      	nop
 8023b98:	40000400 	.word	0x40000400

08023b9c <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8023b9c:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim_ic->Instance==TIM8)
 8023b9e:	6801      	ldr	r1, [r0, #0]
 8023ba0:	4a17      	ldr	r2, [pc, #92]	; (8023c00 <HAL_TIM_IC_MspInit+0x64>)
{
 8023ba2:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8023ba4:	2300      	movs	r3, #0
  if(htim_ic->Instance==TIM8)
 8023ba6:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8023ba8:	9304      	str	r3, [sp, #16]
 8023baa:	9303      	str	r3, [sp, #12]
 8023bac:	9305      	str	r3, [sp, #20]
 8023bae:	9306      	str	r3, [sp, #24]
 8023bb0:	9307      	str	r3, [sp, #28]
  if(htim_ic->Instance==TIM8)
 8023bb2:	d001      	beq.n	8023bb8 <HAL_TIM_IC_MspInit+0x1c>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8023bb4:	b009      	add	sp, #36	; 0x24
 8023bb6:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_TIM8_CLK_ENABLE();
 8023bb8:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8023bbc:	9301      	str	r3, [sp, #4]
 8023bbe:	6c51      	ldr	r1, [r2, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8023bc0:	4810      	ldr	r0, [pc, #64]	; (8023c04 <HAL_TIM_IC_MspInit+0x68>)
    __HAL_RCC_TIM8_CLK_ENABLE();
 8023bc2:	f041 0102 	orr.w	r1, r1, #2
 8023bc6:	6451      	str	r1, [r2, #68]	; 0x44
 8023bc8:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8023bca:	f001 0102 	and.w	r1, r1, #2
 8023bce:	9101      	str	r1, [sp, #4]
 8023bd0:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8023bd2:	9302      	str	r3, [sp, #8]
 8023bd4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8023bd6:	f043 0304 	orr.w	r3, r3, #4
 8023bda:	6313      	str	r3, [r2, #48]	; 0x30
 8023bdc:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8023bde:	f003 0304 	and.w	r3, r3, #4
 8023be2:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8023be4:	2202      	movs	r2, #2
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8023be6:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8023be8:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = SIN0_Pin|SIN1_Pin|SIN2_Pin|SIN3_Pin;
 8023bea:	f44f 7470 	mov.w	r4, #960	; 0x3c0
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8023bee:	9d02      	ldr	r5, [sp, #8]
    GPIO_InitStruct.Pin = SIN0_Pin|SIN1_Pin|SIN2_Pin|SIN3_Pin;
 8023bf0:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8023bf2:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8023bf4:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8023bf6:	f7fd ff47 	bl	8021a88 <HAL_GPIO_Init>
}
 8023bfa:	b009      	add	sp, #36	; 0x24
 8023bfc:	bd30      	pop	{r4, r5, pc}
 8023bfe:	bf00      	nop
 8023c00:	40010400 	.word	0x40010400
 8023c04:	40020800 	.word	0x40020800

08023c08 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8023c08:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM1)
 8023c0a:	6803      	ldr	r3, [r0, #0]
 8023c0c:	4a42      	ldr	r2, [pc, #264]	; (8023d18 <HAL_TIM_MspPostInit+0x110>)
{
 8023c0e:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8023c10:	2400      	movs	r4, #0
  if(htim->Instance==TIM1)
 8023c12:	4293      	cmp	r3, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8023c14:	9406      	str	r4, [sp, #24]
 8023c16:	9405      	str	r4, [sp, #20]
 8023c18:	9407      	str	r4, [sp, #28]
 8023c1a:	9408      	str	r4, [sp, #32]
 8023c1c:	9409      	str	r4, [sp, #36]	; 0x24
  if(htim->Instance==TIM1)
 8023c1e:	d021      	beq.n	8023c64 <HAL_TIM_MspPostInit+0x5c>

  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }
  else if(htim->Instance==TIM2)
 8023c20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8023c24:	d035      	beq.n	8023c92 <HAL_TIM_MspPostInit+0x8a>

  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }
  else if(htim->Instance==TIM4)
 8023c26:	4a3d      	ldr	r2, [pc, #244]	; (8023d1c <HAL_TIM_MspPostInit+0x114>)
 8023c28:	4293      	cmp	r3, r2
 8023c2a:	d05f      	beq.n	8023cec <HAL_TIM_MspPostInit+0xe4>

  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }
  else if(htim->Instance==TIM12)
 8023c2c:	4a3c      	ldr	r2, [pc, #240]	; (8023d20 <HAL_TIM_MspPostInit+0x118>)
 8023c2e:	4293      	cmp	r3, r2
 8023c30:	d001      	beq.n	8023c36 <HAL_TIM_MspPostInit+0x2e>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8023c32:	b00a      	add	sp, #40	; 0x28
 8023c34:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8023c36:	4b3b      	ldr	r3, [pc, #236]	; (8023d24 <HAL_TIM_MspPostInit+0x11c>)
 8023c38:	9404      	str	r4, [sp, #16]
 8023c3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8023c3c:	483a      	ldr	r0, [pc, #232]	; (8023d28 <HAL_TIM_MspPostInit+0x120>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8023c3e:	f042 0202 	orr.w	r2, r2, #2
 8023c42:	631a      	str	r2, [r3, #48]	; 0x30
 8023c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023c46:	f003 0302 	and.w	r3, r3, #2
 8023c4a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pin = FAN0_Pin|FAN1_Pin;
 8023c4c:	f44f 4440 	mov.w	r4, #49152	; 0xc000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8023c50:	2202      	movs	r2, #2
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8023c52:	2309      	movs	r3, #9
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8023c54:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8023c56:	9d04      	ldr	r5, [sp, #16]
    GPIO_InitStruct.Pin = FAN0_Pin|FAN1_Pin;
 8023c58:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8023c5a:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8023c5c:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8023c5e:	f7fd ff13 	bl	8021a88 <HAL_GPIO_Init>
}
 8023c62:	e7e6      	b.n	8023c32 <HAL_TIM_MspPostInit+0x2a>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8023c64:	4b2f      	ldr	r3, [pc, #188]	; (8023d24 <HAL_TIM_MspPostInit+0x11c>)
 8023c66:	9400      	str	r4, [sp, #0]
 8023c68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8023c6a:	4830      	ldr	r0, [pc, #192]	; (8023d2c <HAL_TIM_MspPostInit+0x124>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8023c6c:	f042 0201 	orr.w	r2, r2, #1
 8023c70:	631a      	str	r2, [r3, #48]	; 0x30
 8023c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023c74:	f003 0301 	and.w	r3, r3, #1
 8023c78:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Pin = SRV0_Pin|SRV1_Pin|SRV2_Pin|SRV3_Pin;
 8023c7a:	f44f 6470 	mov.w	r4, #3840	; 0xf00
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8023c7e:	2202      	movs	r2, #2
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8023c80:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8023c82:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8023c84:	9d00      	ldr	r5, [sp, #0]
    GPIO_InitStruct.Pin = SRV0_Pin|SRV1_Pin|SRV2_Pin|SRV3_Pin;
 8023c86:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8023c88:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8023c8a:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8023c8c:	f7fd fefc 	bl	8021a88 <HAL_GPIO_Init>
 8023c90:	e7cf      	b.n	8023c32 <HAL_TIM_MspPostInit+0x2a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8023c92:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 8023c96:	9401      	str	r4, [sp, #4]
 8023c98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8023c9a:	4823      	ldr	r0, [pc, #140]	; (8023d28 <HAL_TIM_MspPostInit+0x120>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8023c9c:	f042 0202 	orr.w	r2, r2, #2
 8023ca0:	631a      	str	r2, [r3, #48]	; 0x30
 8023ca2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8023ca4:	f002 0202 	and.w	r2, r2, #2
 8023ca8:	9201      	str	r2, [sp, #4]
 8023caa:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8023cac:	9402      	str	r4, [sp, #8]
 8023cae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8023cb0:	f042 0201 	orr.w	r2, r2, #1
 8023cb4:	631a      	str	r2, [r3, #48]	; 0x30
 8023cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023cb8:	f003 0301 	and.w	r3, r3, #1
 8023cbc:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8023cbe:	2602      	movs	r6, #2
    GPIO_InitStruct.Pin = RGB0_Pin|RGB1_Pin;
 8023cc0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8023cc4:	2501      	movs	r5, #1
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8023cc6:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pin = RGB0_Pin|RGB1_Pin;
 8023cc8:	9305      	str	r3, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8023cca:	9a02      	ldr	r2, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8023ccc:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8023cce:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8023cd0:	f7fd feda 	bl	8021a88 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RGB2_Pin;
 8023cd4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    HAL_GPIO_Init(RGB2_GPIO_Port, &GPIO_InitStruct);
 8023cd8:	a905      	add	r1, sp, #20
 8023cda:	4814      	ldr	r0, [pc, #80]	; (8023d2c <HAL_TIM_MspPostInit+0x124>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8023cdc:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8023cde:	9509      	str	r5, [sp, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8023ce0:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8023ce2:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Pin = RGB2_Pin;
 8023ce4:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(RGB2_GPIO_Port, &GPIO_InitStruct);
 8023ce6:	f7fd fecf 	bl	8021a88 <HAL_GPIO_Init>
 8023cea:	e7a2      	b.n	8023c32 <HAL_TIM_MspPostInit+0x2a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8023cec:	4b0d      	ldr	r3, [pc, #52]	; (8023d24 <HAL_TIM_MspPostInit+0x11c>)
 8023cee:	9403      	str	r4, [sp, #12]
 8023cf0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8023cf2:	480d      	ldr	r0, [pc, #52]	; (8023d28 <HAL_TIM_MspPostInit+0x120>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8023cf4:	f042 0202 	orr.w	r2, r2, #2
 8023cf8:	631a      	str	r2, [r3, #48]	; 0x30
 8023cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023cfc:	f003 0302 	and.w	r3, r3, #2
 8023d00:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = SRV4_Pin|SRV5_Pin|SRV6_Pin;
 8023d02:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8023d06:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8023d08:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8023d0a:	9c03      	ldr	r4, [sp, #12]
    GPIO_InitStruct.Pin = SRV4_Pin|SRV5_Pin|SRV6_Pin;
 8023d0c:	9205      	str	r2, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8023d0e:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8023d10:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8023d12:	f7fd feb9 	bl	8021a88 <HAL_GPIO_Init>
 8023d16:	e78c      	b.n	8023c32 <HAL_TIM_MspPostInit+0x2a>
 8023d18:	40010000 	.word	0x40010000
 8023d1c:	40000800 	.word	0x40000800
 8023d20:	40001800 	.word	0x40001800
 8023d24:	40023800 	.word	0x40023800
 8023d28:	40020400 	.word	0x40020400
 8023d2c:	40020000 	.word	0x40020000

08023d30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8023d30:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==USART3)
 8023d32:	6802      	ldr	r2, [r0, #0]
 8023d34:	4b1d      	ldr	r3, [pc, #116]	; (8023dac <HAL_UART_MspInit+0x7c>)
{
 8023d36:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8023d38:	2400      	movs	r4, #0
  if(huart->Instance==USART3)
 8023d3a:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8023d3c:	9404      	str	r4, [sp, #16]
 8023d3e:	9403      	str	r4, [sp, #12]
 8023d40:	9405      	str	r4, [sp, #20]
 8023d42:	9406      	str	r4, [sp, #24]
 8023d44:	9407      	str	r4, [sp, #28]
  if(huart->Instance==USART3)
 8023d46:	d001      	beq.n	8023d4c <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8023d48:	b009      	add	sp, #36	; 0x24
 8023d4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_USART3_CLK_ENABLE();
 8023d4c:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
 8023d50:	9401      	str	r4, [sp, #4]
 8023d52:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8023d54:	4816      	ldr	r0, [pc, #88]	; (8023db0 <HAL_UART_MspInit+0x80>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8023d56:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8023d5a:	641a      	str	r2, [r3, #64]	; 0x40
 8023d5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8023d5e:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8023d62:	9201      	str	r2, [sp, #4]
 8023d64:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8023d66:	9402      	str	r4, [sp, #8]
 8023d68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8023d6a:	f042 0204 	orr.w	r2, r2, #4
 8023d6e:	631a      	str	r2, [r3, #48]	; 0x30
 8023d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023d72:	f003 0304 	and.w	r3, r3, #4
 8023d76:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8023d78:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8023d7a:	2307      	movs	r3, #7
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8023d7c:	2203      	movs	r2, #3
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8023d7e:	f44f 6740 	mov.w	r7, #3072	; 0xc00
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8023d82:	2602      	movs	r6, #2
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8023d84:	2501      	movs	r5, #1
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8023d86:	f8dd e008 	ldr.w	lr, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8023d8a:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8023d8c:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8023d8e:	9703      	str	r7, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8023d90:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8023d92:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8023d94:	f7fd fe78 	bl	8021a88 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8023d98:	4622      	mov	r2, r4
 8023d9a:	4621      	mov	r1, r4
 8023d9c:	2027      	movs	r0, #39	; 0x27
 8023d9e:	f7fd fc33 	bl	8021608 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8023da2:	2027      	movs	r0, #39	; 0x27
 8023da4:	f7fd fc66 	bl	8021674 <HAL_NVIC_EnableIRQ>
}
 8023da8:	b009      	add	sp, #36	; 0x24
 8023daa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023dac:	40004800 	.word	0x40004800
 8023db0:	40020800 	.word	0x40020800

08023db4 <adc_logic_get_temp>:

    ADC_CH_NUM
};

float adc_logic_get_temp(void)
{
 8023db4:	b508      	push	{r3, lr}
        debug("ADC: %d %d\n", i, adc_get_raw(i));
    }
    debug("Temp: %.1f\n", adc_logic_get_temp());
}

uint16_t adc_get_raw(uint32_t channel) { return adc_raw[adc_sel + channel]; }
 8023db6:	4b15      	ldr	r3, [pc, #84]	; (8023e0c <adc_logic_get_temp+0x58>)
 8023db8:	4a15      	ldr	r2, [pc, #84]	; (8023e10 <adc_logic_get_temp+0x5c>)
 8023dba:	681b      	ldr	r3, [r3, #0]
    return NTC_TEMP_LO_SIDE(adc_get_raw(ADC_SAIN_NTC0), NTC_COEF);
 8023dbc:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8023e14 <adc_logic_get_temp+0x60>
 8023dc0:	eddf 6a15 	vldr	s13, [pc, #84]	; 8023e18 <adc_logic_get_temp+0x64>
 8023dc4:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8023e1c <adc_logic_get_temp+0x68>
uint16_t adc_get_raw(uint32_t channel) { return adc_raw[adc_sel + channel]; }
 8023dc8:	3307      	adds	r3, #7
    return NTC_TEMP_LO_SIDE(adc_get_raw(ADC_SAIN_NTC0), NTC_COEF);
 8023dca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8023dce:	ee07 3a90 	vmov	s15, r3
 8023dd2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8023dd6:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8023dda:	ee77 7a67 	vsub.f32	s15, s14, s15
 8023dde:	ee86 0aa7 	vdiv.f32	s0, s13, s15
 8023de2:	ee80 0a06 	vdiv.f32	s0, s0, s12
 8023de6:	f004 f923 	bl	8028030 <logf>
 8023dea:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8023e20 <adc_logic_get_temp+0x6c>
 8023dee:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8023e24 <adc_logic_get_temp+0x70>
 8023df2:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8023e28 <adc_logic_get_temp+0x74>
 8023df6:	ee80 0a26 	vdiv.f32	s0, s0, s13
 8023dfa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8023dfe:	ee70 7a27 	vadd.f32	s15, s0, s15
 8023e02:	ee86 0aa7 	vdiv.f32	s0, s13, s15
}
 8023e06:	ee30 0a47 	vsub.f32	s0, s0, s14
 8023e0a:	bd08      	pop	{r3, pc}
 8023e0c:	2000023c 	.word	0x2000023c
 8023e10:	20000218 	.word	0x20000218
 8023e14:	457ff000 	.word	0x457ff000
 8023e18:	461c4000 	.word	0x461c4000
 8023e1c:	47379800 	.word	0x47379800
 8023e20:	4556a000 	.word	0x4556a000
 8023e24:	3b5bcf0f 	.word	0x3b5bcf0f
 8023e28:	43889333 	.word	0x43889333

08023e2c <adc_logic_get_vbat>:
uint16_t adc_get_raw(uint32_t channel) { return adc_raw[adc_sel + channel]; }
 8023e2c:	4b0b      	ldr	r3, [pc, #44]	; (8023e5c <adc_logic_get_vbat+0x30>)
 8023e2e:	4a0c      	ldr	r2, [pc, #48]	; (8023e60 <adc_logic_get_vbat+0x34>)
 8023e30:	681b      	ldr	r3, [r3, #0]
    return (float)adc_get_raw(ADC_SAIN_VBAT) / adc_max_cnt * v_ref * (1.0f + 47.0f / 10.0f);
 8023e32:	ed9f 6a0c 	vldr	s12, [pc, #48]	; 8023e64 <adc_logic_get_vbat+0x38>
 8023e36:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8023e68 <adc_logic_get_vbat+0x3c>
 8023e3a:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8023e6c <adc_logic_get_vbat+0x40>
uint16_t adc_get_raw(uint32_t channel) { return adc_raw[adc_sel + channel]; }
 8023e3e:	3306      	adds	r3, #6
    return (float)adc_get_raw(ADC_SAIN_VBAT) / adc_max_cnt * v_ref * (1.0f + 47.0f / 10.0f);
 8023e40:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8023e44:	ee07 3a10 	vmov	s14, r3
 8023e48:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8023e4c:	eec7 7a06 	vdiv.f32	s15, s14, s12
 8023e50:	ee67 7aa6 	vmul.f32	s15, s15, s13
}
 8023e54:	ee27 0a80 	vmul.f32	s0, s15, s0
 8023e58:	4770      	bx	lr
 8023e5a:	bf00      	nop
 8023e5c:	2000023c 	.word	0x2000023c
 8023e60:	20000218 	.word	0x20000218
 8023e64:	457ff000 	.word	0x457ff000
 8023e68:	40533333 	.word	0x40533333
 8023e6c:	40b66666 	.word	0x40b66666

08023e70 <adc_init>:
{
 8023e70:	b510      	push	{r4, lr}
    HAL_ADC_Start(&hadc1);
 8023e72:	4c08      	ldr	r4, [pc, #32]	; (8023e94 <adc_init+0x24>)
 8023e74:	4620      	mov	r0, r4
 8023e76:	f7fd f9ad 	bl	80211d4 <HAL_ADC_Start>
    HAL_ADC_Start_DMA(&hadc1, (uint32_t *)&adc_raw, ADC_CH_NUM * 2);
 8023e7a:	2212      	movs	r2, #18
 8023e7c:	4620      	mov	r0, r4
 8023e7e:	4906      	ldr	r1, [pc, #24]	; (8023e98 <adc_init+0x28>)
 8023e80:	f7fd fa26 	bl	80212d0 <HAL_ADC_Start_DMA>
    __HAL_TIM_ENABLE(&htim3);
 8023e84:	4b05      	ldr	r3, [pc, #20]	; (8023e9c <adc_init+0x2c>)
 8023e86:	681a      	ldr	r2, [r3, #0]
 8023e88:	6813      	ldr	r3, [r2, #0]
 8023e8a:	f043 0301 	orr.w	r3, r3, #1
 8023e8e:	6013      	str	r3, [r2, #0]
 8023e90:	bd10      	pop	{r4, pc}
 8023e92:	bf00      	nop
 8023e94:	20000694 	.word	0x20000694
 8023e98:	20000218 	.word	0x20000218
 8023e9c:	200005fc 	.word	0x200005fc

08023ea0 <adc_print>:
{
 8023ea0:	b570      	push	{r4, r5, r6, lr}
 8023ea2:	4d20      	ldr	r5, [pc, #128]	; (8023f24 <adc_print+0x84>)
 8023ea4:	4e20      	ldr	r6, [pc, #128]	; (8023f28 <adc_print+0x88>)
    for(uint32_t i = 0; i < ADC_CH_NUM; i++)
 8023ea6:	2400      	movs	r4, #0
uint16_t adc_get_raw(uint32_t channel) { return adc_raw[adc_sel + channel]; }
 8023ea8:	6833      	ldr	r3, [r6, #0]
        debug("ADC: %d %d\n", i, adc_get_raw(i));
 8023eaa:	4820      	ldr	r0, [pc, #128]	; (8023f2c <adc_print+0x8c>)
uint16_t adc_get_raw(uint32_t channel) { return adc_raw[adc_sel + channel]; }
 8023eac:	4423      	add	r3, r4
        debug("ADC: %d %d\n", i, adc_get_raw(i));
 8023eae:	4621      	mov	r1, r4
 8023eb0:	f835 2013 	ldrh.w	r2, [r5, r3, lsl #1]
    for(uint32_t i = 0; i < ADC_CH_NUM; i++)
 8023eb4:	3401      	adds	r4, #1
        debug("ADC: %d %d\n", i, adc_get_raw(i));
 8023eb6:	f000 f9a1 	bl	80241fc <debug>
    for(uint32_t i = 0; i < ADC_CH_NUM; i++)
 8023eba:	2c09      	cmp	r4, #9
 8023ebc:	d1f4      	bne.n	8023ea8 <adc_print+0x8>
uint16_t adc_get_raw(uint32_t channel) { return adc_raw[adc_sel + channel]; }
 8023ebe:	6833      	ldr	r3, [r6, #0]
    return NTC_TEMP_LO_SIDE(adc_get_raw(ADC_SAIN_NTC0), NTC_COEF);
 8023ec0:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8023f30 <adc_print+0x90>
 8023ec4:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8023f34 <adc_print+0x94>
 8023ec8:	ed9f 6a1b 	vldr	s12, [pc, #108]	; 8023f38 <adc_print+0x98>
uint16_t adc_get_raw(uint32_t channel) { return adc_raw[adc_sel + channel]; }
 8023ecc:	3307      	adds	r3, #7
    return NTC_TEMP_LO_SIDE(adc_get_raw(ADC_SAIN_NTC0), NTC_COEF);
 8023ece:	f835 3013 	ldrh.w	r3, [r5, r3, lsl #1]
 8023ed2:	ee07 3a90 	vmov	s15, r3
 8023ed6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8023eda:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8023ede:	ee77 7a67 	vsub.f32	s15, s14, s15
 8023ee2:	ee86 0aa7 	vdiv.f32	s0, s13, s15
 8023ee6:	ee80 0a06 	vdiv.f32	s0, s0, s12
 8023eea:	f004 f8a1 	bl	8028030 <logf>
 8023eee:	eddf 6a13 	vldr	s13, [pc, #76]	; 8023f3c <adc_print+0x9c>
 8023ef2:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8023f40 <adc_print+0xa0>
 8023ef6:	eddf 7a13 	vldr	s15, [pc, #76]	; 8023f44 <adc_print+0xa4>
 8023efa:	ee80 0a26 	vdiv.f32	s0, s0, s13
 8023efe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8023f02:	ee30 0a07 	vadd.f32	s0, s0, s14
 8023f06:	ee86 7a80 	vdiv.f32	s14, s13, s0
    debug("Temp: %.1f\n", adc_logic_get_temp());
 8023f0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8023f0e:	ee17 0a90 	vmov	r0, s15
 8023f12:	f7fc fb31 	bl	8020578 <__aeabi_f2d>
}
 8023f16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    debug("Temp: %.1f\n", adc_logic_get_temp());
 8023f1a:	4602      	mov	r2, r0
 8023f1c:	460b      	mov	r3, r1
 8023f1e:	480a      	ldr	r0, [pc, #40]	; (8023f48 <adc_print+0xa8>)
 8023f20:	f000 b96c 	b.w	80241fc <debug>
 8023f24:	20000218 	.word	0x20000218
 8023f28:	2000023c 	.word	0x2000023c
 8023f2c:	080283ec 	.word	0x080283ec
 8023f30:	457ff000 	.word	0x457ff000
 8023f34:	461c4000 	.word	0x461c4000
 8023f38:	47379800 	.word	0x47379800
 8023f3c:	4556a000 	.word	0x4556a000
 8023f40:	3b5bcf0f 	.word	0x3b5bcf0f
 8023f44:	43889333 	.word	0x43889333
 8023f48:	080283f8 	.word	0x080283f8

08023f4c <adc_drv_conv_complete_half>:

void adc_drv_conv_complete_half(void)
{
    adc_sel = 0;
 8023f4c:	4b01      	ldr	r3, [pc, #4]	; (8023f54 <adc_drv_conv_complete_half+0x8>)
 8023f4e:	2200      	movs	r2, #0
 8023f50:	601a      	str	r2, [r3, #0]
 8023f52:	4770      	bx	lr
 8023f54:	2000023c 	.word	0x2000023c

08023f58 <adc_drv_conv_complete_full>:
    // filter_values();
}

void adc_drv_conv_complete_full(void)
{
    adc_sel = ADC_CH_NUM;
 8023f58:	4b01      	ldr	r3, [pc, #4]	; (8023f60 <adc_drv_conv_complete_full+0x8>)
 8023f5a:	2209      	movs	r2, #9
 8023f5c:	601a      	str	r2, [r3, #0]
 8023f5e:	4770      	bx	lr
 8023f60:	2000023c 	.word	0x2000023c

08023f64 <fan_set>:
#include "main.h"

bool fan_set(uint8_t fan, uint32_t value)
{
    if(value > 100) value = 100;
    __IO uint32_t *ptr[] = {
 8023f64:	4a0a      	ldr	r2, [pc, #40]	; (8023f90 <fan_set+0x2c>)
 8023f66:	4b0b      	ldr	r3, [pc, #44]	; (8023f94 <fan_set+0x30>)
{
 8023f68:	b082      	sub	sp, #8
        &TIM12->CCR1,
        &TIM12->CCR2};
    if(fan > 1) return true;
 8023f6a:	2801      	cmp	r0, #1
    __IO uint32_t *ptr[] = {
 8023f6c:	e88d 000c 	stmia.w	sp, {r2, r3}
    if(fan > 1) return true;
 8023f70:	d902      	bls.n	8023f78 <fan_set+0x14>
 8023f72:	2001      	movs	r0, #1
    *ptr[fan] = value;
    return false;
 8023f74:	b002      	add	sp, #8
 8023f76:	4770      	bx	lr
    *ptr[fan] = value;
 8023f78:	ab02      	add	r3, sp, #8
 8023f7a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8023f7e:	2964      	cmp	r1, #100	; 0x64
 8023f80:	f850 3c08 	ldr.w	r3, [r0, #-8]
 8023f84:	bf28      	it	cs
 8023f86:	2164      	movcs	r1, #100	; 0x64
    return false;
 8023f88:	2000      	movs	r0, #0
    *ptr[fan] = value;
 8023f8a:	6019      	str	r1, [r3, #0]
 8023f8c:	b002      	add	sp, #8
 8023f8e:	4770      	bx	lr
 8023f90:	40001834 	.word	0x40001834
 8023f94:	40001838 	.word	0x40001838

08023f98 <led_set>:
    144, 146, 148, 150, 152, 154, 156, 158, 160, 162, 164, 167, 169, 171, 173, 175,
    177, 180, 182, 184, 186, 189, 191, 193, 196, 198, 200, 203, 205, 208, 210, 213,
    215, 218, 220, 223, 225, 228, 231, 233, 236, 239, 241, 244, 247, 249, 252, 255};

bool led_set(uint8_t led, uint32_t value)
{
 8023f98:	b430      	push	{r4, r5}
    if(value > 100) value = 100;
    __IO uint32_t *ptr[] = {
 8023f9a:	4b0d      	ldr	r3, [pc, #52]	; (8023fd0 <led_set+0x38>)
{
 8023f9c:	4604      	mov	r4, r0
 8023f9e:	460d      	mov	r5, r1
    __IO uint32_t *ptr[] = {
 8023fa0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
{
 8023fa4:	b084      	sub	sp, #16
    __IO uint32_t *ptr[] = {
 8023fa6:	ab04      	add	r3, sp, #16
        &TIM2->CCR1,
        &TIM2->CCR3,
        &TIM2->CCR4};
    if(led > 2) return true;
 8023fa8:	2c02      	cmp	r4, #2
    __IO uint32_t *ptr[] = {
 8023faa:	e903 0007 	stmdb	r3, {r0, r1, r2}
    if(led > 2) return true;
 8023fae:	d80b      	bhi.n	8023fc8 <led_set+0x30>
    *ptr[led] = value;
 8023fb0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8023fb4:	2d64      	cmp	r5, #100	; 0x64
 8023fb6:	f854 3c0c 	ldr.w	r3, [r4, #-12]
 8023fba:	bf28      	it	cs
 8023fbc:	2564      	movcs	r5, #100	; 0x64
    return false;
 8023fbe:	2000      	movs	r0, #0
    *ptr[led] = value;
 8023fc0:	601d      	str	r5, [r3, #0]
}
 8023fc2:	b004      	add	sp, #16
 8023fc4:	bc30      	pop	{r4, r5}
 8023fc6:	4770      	bx	lr
    if(led > 2) return true;
 8023fc8:	2001      	movs	r0, #1
}
 8023fca:	b004      	add	sp, #16
 8023fcc:	bc30      	pop	{r4, r5}
 8023fce:	4770      	bx	lr
 8023fd0:	08028398 	.word	0x08028398

08023fd4 <init>:
#warning "Add WDT"

hbt_node_t *hbt_ctrl;

void init(void)
{
 8023fd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8023fd8:	4d31      	ldr	r5, [pc, #196]	; (80240a0 <init+0xcc>)
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);

    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8023fda:	4f32      	ldr	r7, [pc, #200]	; (80240a4 <init+0xd0>)
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);

    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8023fdc:	4e32      	ldr	r6, [pc, #200]	; (80240a8 <init+0xd4>)
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);

    HAL_TIM_IC_Start(&htim8, TIM_CHANNEL_1);
 8023fde:	4c33      	ldr	r4, [pc, #204]	; (80240ac <init+0xd8>)
    HAL_TIM_IC_Start(&htim8, TIM_CHANNEL_2);
    HAL_TIM_IC_Start(&htim8, TIM_CHANNEL_3);
    HAL_TIM_IC_Start(&htim8, TIM_CHANNEL_4);

    HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 8023fe0:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 80240bc <init+0xe8>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8023fe4:	4628      	mov	r0, r5
 8023fe6:	2100      	movs	r1, #0
 8023fe8:	f7fe faf4 	bl	80225d4 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8023fec:	4628      	mov	r0, r5
 8023fee:	2104      	movs	r1, #4
 8023ff0:	f7fe faf0 	bl	80225d4 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8023ff4:	4628      	mov	r0, r5
 8023ff6:	2108      	movs	r1, #8
 8023ff8:	f7fe faec 	bl	80225d4 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8023ffc:	4628      	mov	r0, r5
 8023ffe:	210c      	movs	r1, #12
 8024000:	f7fe fae8 	bl	80225d4 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8024004:	4638      	mov	r0, r7
 8024006:	2100      	movs	r1, #0
 8024008:	f7fe fae4 	bl	80225d4 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 802400c:	4638      	mov	r0, r7
 802400e:	2108      	movs	r1, #8
 8024010:	f7fe fae0 	bl	80225d4 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8024014:	4638      	mov	r0, r7
 8024016:	210c      	movs	r1, #12
 8024018:	f7fe fadc 	bl	80225d4 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 802401c:	4630      	mov	r0, r6
 802401e:	2100      	movs	r1, #0
 8024020:	f7fe fad8 	bl	80225d4 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8024024:	4630      	mov	r0, r6
 8024026:	2104      	movs	r1, #4
 8024028:	f7fe fad4 	bl	80225d4 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 802402c:	4630      	mov	r0, r6
 802402e:	2108      	movs	r1, #8
 8024030:	f7fe fad0 	bl	80225d4 <HAL_TIM_PWM_Start>
    HAL_TIM_IC_Start(&htim8, TIM_CHANNEL_1);
 8024034:	4620      	mov	r0, r4
 8024036:	2100      	movs	r1, #0
 8024038:	f7fe fb98 	bl	802276c <HAL_TIM_IC_Start>
    HAL_TIM_IC_Start(&htim8, TIM_CHANNEL_2);
 802403c:	4620      	mov	r0, r4
 802403e:	2104      	movs	r1, #4
 8024040:	f7fe fb94 	bl	802276c <HAL_TIM_IC_Start>
    HAL_TIM_IC_Start(&htim8, TIM_CHANNEL_3);
 8024044:	4620      	mov	r0, r4
 8024046:	2108      	movs	r1, #8
 8024048:	f7fe fb90 	bl	802276c <HAL_TIM_IC_Start>
    HAL_TIM_IC_Start(&htim8, TIM_CHANNEL_4);
 802404c:	4620      	mov	r0, r4
 802404e:	210c      	movs	r1, #12
 8024050:	f7fe fb8c 	bl	802276c <HAL_TIM_IC_Start>
    HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 8024054:	4640      	mov	r0, r8
 8024056:	2100      	movs	r1, #0
 8024058:	f7fe fabc 	bl	80225d4 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_2);
 802405c:	2104      	movs	r1, #4
 802405e:	4640      	mov	r0, r8
 8024060:	f7fe fab8 	bl	80225d4 <HAL_TIM_PWM_Start>

    __HAL_UART_ENABLE(&huart3);
 8024064:	4b12      	ldr	r3, [pc, #72]	; (80240b0 <init+0xdc>)
 8024066:	681b      	ldr	r3, [r3, #0]
 8024068:	68da      	ldr	r2, [r3, #12]
 802406a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 802406e:	60da      	str	r2, [r3, #12]
    __HAL_UART_ENABLE_IT(&huart3, UART_IT_RXNE);
 8024070:	68da      	ldr	r2, [r3, #12]
 8024072:	f042 0220 	orr.w	r2, r2, #32
 8024076:	60da      	str	r2, [r3, #12]

    adc_init();
 8024078:	f7ff fefa 	bl	8023e70 <adc_init>

    PWR_EN_GPIO_Port->ODR |= PWR_EN_Pin;
 802407c:	4a0d      	ldr	r2, [pc, #52]	; (80240b4 <init+0xe0>)
 802407e:	6953      	ldr	r3, [r2, #20]
 8024080:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8024084:	6153      	str	r3, [r2, #20]

    hbt_ctrl = hb_tracker_init(RFM_NET_ID_CTRL, 700 /* 2x HB + 100 ms*/);
 8024086:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 802408a:	2032      	movs	r0, #50	; 0x32
 802408c:	f001 f9a2 	bl	80253d4 <hb_tracker_init>
 8024090:	4b09      	ldr	r3, [pc, #36]	; (80240b8 <init+0xe4>)

    trx_init(RFM_NET_ID_HEAD);
}
 8024092:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hbt_ctrl = hb_tracker_init(RFM_NET_ID_CTRL, 700 /* 2x HB + 100 ms*/);
 8024096:	6018      	str	r0, [r3, #0]
    trx_init(RFM_NET_ID_HEAD);
 8024098:	2033      	movs	r0, #51	; 0x33
 802409a:	f001 b9ed 	b.w	8025478 <trx_init>
 802409e:	bf00      	nop
 80240a0:	2000073c 	.word	0x2000073c
 80240a4:	2000078c 	.word	0x2000078c
 80240a8:	20000574 	.word	0x20000574
 80240ac:	20000534 	.word	0x20000534
 80240b0:	200005b4 	.word	0x200005b4
 80240b4:	40020400 	.word	0x40020400
 80240b8:	2000080c 	.word	0x2000080c
 80240bc:	200007cc 	.word	0x200007cc

080240c0 <loop>:

void loop(void)
{
 80240c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    static uint32_t prev_tick = 0;
    if(prev_tick < HAL_GetTick())
 80240c2:	4c3e      	ldr	r4, [pc, #248]	; (80241bc <loop+0xfc>)
{
 80240c4:	b089      	sub	sp, #36	; 0x24
    if(prev_tick < HAL_GetTick())
 80240c6:	f7fc ffcf 	bl	8021068 <HAL_GetTick>
 80240ca:	6823      	ldr	r3, [r4, #0]
 80240cc:	4298      	cmp	r0, r3
 80240ce:	d86b      	bhi.n	80241a8 <loop+0xe8>
    {
        prev_tick = HAL_GetTick() + 500;
    }

    trx_poll_rx();
    trx_poll_tx_hb(280, hb_tracker_is_timeout(hbt_ctrl), 1, RFM_NET_ID_CTRL);
 80240d0:	4e3b      	ldr	r6, [pc, #236]	; (80241c0 <loop+0x100>)

    static uint32_t ctrl_hb = 5000;
    if(ctrl_hb < HAL_GetTick())
 80240d2:	4f3c      	ldr	r7, [pc, #240]	; (80241c4 <loop+0x104>)
    trx_poll_rx();
 80240d4:	f001 f9de 	bl	8025494 <trx_poll_rx>
    trx_poll_tx_hb(280, hb_tracker_is_timeout(hbt_ctrl), 1, RFM_NET_ID_CTRL);
 80240d8:	6830      	ldr	r0, [r6, #0]
 80240da:	f001 f9b7 	bl	802544c <hb_tracker_is_timeout>
 80240de:	2332      	movs	r3, #50	; 0x32
 80240e0:	4601      	mov	r1, r0
 80240e2:	2201      	movs	r2, #1
 80240e4:	f44f 708c 	mov.w	r0, #280	; 0x118
 80240e8:	f001 f9fc 	bl	80254e4 <trx_poll_tx_hb>
    if(ctrl_hb < HAL_GetTick())
 80240ec:	f7fc ffbc 	bl	8021068 <HAL_GetTick>
 80240f0:	683b      	ldr	r3, [r7, #0]
 80240f2:	4298      	cmp	r0, r3
 80240f4:	d843      	bhi.n	802417e <loop+0xbe>

        // LED_GPIO_Port->ODR ^= LED_Pin;
    }

    static uint32_t hbtt = 0;
    if(hbtt < HAL_GetTick())
 80240f6:	4c34      	ldr	r4, [pc, #208]	; (80241c8 <loop+0x108>)
 80240f8:	f7fc ffb6 	bl	8021068 <HAL_GetTick>
 80240fc:	6823      	ldr	r3, [r4, #0]
 80240fe:	4298      	cmp	r0, r3
 8024100:	d82e      	bhi.n	8024160 <loop+0xa0>
            LED_GPIO_Port->ODR ^= LED_Pin;
        }
    }

    static uint32_t ctr_sts_head = 0;
    if(ctr_sts_head < HAL_GetTick())
 8024102:	4c32      	ldr	r4, [pc, #200]	; (80241cc <loop+0x10c>)
 8024104:	f7fc ffb0 	bl	8021068 <HAL_GetTick>
 8024108:	6823      	ldr	r3, [r4, #0]
 802410a:	4298      	cmp	r0, r3
 802410c:	d926      	bls.n	802415c <loop+0x9c>
    {
        ctr_sts_head = HAL_GetTick() + 2000;
 802410e:	f7fc ffab 	bl	8021068 <HAL_GetTick>

        uint8_t data[1 + 4 + 4] = {RFM_NET_CMD_STS_HEAD};
 8024112:	2300      	movs	r3, #0
        ctr_sts_head = HAL_GetTick() + 2000;
 8024114:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
        uint8_t data[1 + 4 + 4] = {RFM_NET_CMD_STS_HEAD};
 8024118:	220a      	movs	r2, #10
 802411a:	9302      	str	r3, [sp, #8]
 802411c:	9303      	str	r3, [sp, #12]
 802411e:	f88d 3010 	strb.w	r3, [sp, #16]
        ctr_sts_head = HAL_GetTick() + 2000;
 8024122:	6020      	str	r0, [r4, #0]
        uint8_t data[1 + 4 + 4] = {RFM_NET_CMD_STS_HEAD};
 8024124:	f88d 2008 	strb.w	r2, [sp, #8]
        float vbat = adc_logic_get_vbat();
 8024128:	f7ff fe80 	bl	8023e2c <adc_logic_get_vbat>
 802412c:	ed8d 0a00 	vstr	s0, [sp]
        float temp = adc_logic_get_temp();
 8024130:	f7ff fe40 	bl	8023db4 <adc_logic_get_temp>
        memcpy(data + 1, &vbat, 4);
 8024134:	2204      	movs	r2, #4
 8024136:	4669      	mov	r1, sp
 8024138:	f10d 0009 	add.w	r0, sp, #9
        float temp = adc_logic_get_temp();
 802413c:	ed8d 0a01 	vstr	s0, [sp, #4]
        memcpy(data + 1, &vbat, 4);
 8024140:	f001 fa28 	bl	8025594 <memcpy>
        memcpy(data + 1 + 4, &temp, 4);
 8024144:	2204      	movs	r2, #4
 8024146:	eb0d 0102 	add.w	r1, sp, r2
 802414a:	f10d 000d 	add.w	r0, sp, #13
 802414e:	f001 fa21 	bl	8025594 <memcpy>
        trx_send_nack(RFM_NET_ID_CTRL, data, sizeof(data));
 8024152:	a902      	add	r1, sp, #8
 8024154:	2209      	movs	r2, #9
 8024156:	2032      	movs	r0, #50	; 0x32
 8024158:	f001 f984 	bl	8025464 <trx_send_nack>
    }
}
 802415c:	b009      	add	sp, #36	; 0x24
 802415e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        hbtt = HAL_GetTick() + 100;
 8024160:	f7fc ff82 	bl	8021068 <HAL_GetTick>
 8024164:	f100 0364 	add.w	r3, r0, #100	; 0x64
        if(hb_tracker_is_timeout(hbt_ctrl))
 8024168:	6830      	ldr	r0, [r6, #0]
        hbtt = HAL_GetTick() + 100;
 802416a:	6023      	str	r3, [r4, #0]
        if(hb_tracker_is_timeout(hbt_ctrl))
 802416c:	f001 f96e 	bl	802544c <hb_tracker_is_timeout>
            LED_GPIO_Port->ODR |= LED_Pin;
 8024170:	4a17      	ldr	r2, [pc, #92]	; (80241d0 <loop+0x110>)
 8024172:	6953      	ldr	r3, [r2, #20]
        if(hb_tracker_is_timeout(hbt_ctrl))
 8024174:	b1f0      	cbz	r0, 80241b4 <loop+0xf4>
            LED_GPIO_Port->ODR |= LED_Pin;
 8024176:	f043 0301 	orr.w	r3, r3, #1
 802417a:	6153      	str	r3, [r2, #20]
 802417c:	e7c1      	b.n	8024102 <loop+0x42>
        ctrl_hb = HAL_GetTick() + 500;
 802417e:	f7fc ff73 	bl	8021068 <HAL_GetTick>
        uint8_t data[] = "\x28"
 8024182:	4d14      	ldr	r5, [pc, #80]	; (80241d4 <loop+0x114>)
        ctrl_hb = HAL_GetTick() + 500;
 8024184:	f500 7efa 	add.w	lr, r0, #500	; 0x1f4
        uint8_t data[] = "\x28"
 8024188:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 802418a:	ac02      	add	r4, sp, #8
 802418c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 802418e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8024192:	f844 0b04 	str.w	r0, [r4], #4
        trx_send_nack(RFM_NET_ID_CTRL, data, sizeof(data));
 8024196:	2216      	movs	r2, #22
        uint8_t data[] = "\x28"
 8024198:	8021      	strh	r1, [r4, #0]
        trx_send_nack(RFM_NET_ID_CTRL, data, sizeof(data));
 802419a:	2032      	movs	r0, #50	; 0x32
 802419c:	a902      	add	r1, sp, #8
        ctrl_hb = HAL_GetTick() + 500;
 802419e:	f8c7 e000 	str.w	lr, [r7]
        trx_send_nack(RFM_NET_ID_CTRL, data, sizeof(data));
 80241a2:	f001 f95f 	bl	8025464 <trx_send_nack>
 80241a6:	e7a6      	b.n	80240f6 <loop+0x36>
        prev_tick = HAL_GetTick() + 500;
 80241a8:	f7fc ff5e 	bl	8021068 <HAL_GetTick>
 80241ac:	f500 70fa 	add.w	r0, r0, #500	; 0x1f4
 80241b0:	6020      	str	r0, [r4, #0]
 80241b2:	e78d      	b.n	80240d0 <loop+0x10>
            LED_GPIO_Port->ODR ^= LED_Pin;
 80241b4:	f083 0301 	eor.w	r3, r3, #1
 80241b8:	6153      	str	r3, [r2, #20]
 80241ba:	e7a2      	b.n	8024102 <loop+0x42>
 80241bc:	20000248 	.word	0x20000248
 80241c0:	2000080c 	.word	0x2000080c
 80241c4:	2000000c 	.word	0x2000000c
 80241c8:	20000244 	.word	0x20000244
 80241cc:	20000240 	.word	0x20000240
 80241d0:	40020800 	.word	0x40020800
 80241d4:	08028404 	.word	0x08028404

080241d8 <process_data>:

void process_data(uint8_t sender_node_id, const volatile uint8_t *data, uint8_t data_len)
{
    // debug("RX: %d > Size: %d\n", sender_node_id, data_len);if(data_len > 0)
    {
        switch(data[0])
 80241d8:	780b      	ldrb	r3, [r1, #0]
 80241da:	b103      	cbz	r3, 80241de <process_data+0x6>
 80241dc:	4770      	bx	lr
{
 80241de:	b510      	push	{r4, lr}
 80241e0:	4604      	mov	r4, r0
        {
        case RFM_NET_CMD_HB:
        {
            bool not_found = hb_tracker_update(sender_node_id);
 80241e2:	f001 f911 	bl	8025408 <hb_tracker_update>
            if(not_found) debug("HB unknown %d\n", sender_node_id);
 80241e6:	b900      	cbnz	r0, 80241ea <process_data+0x12>
 80241e8:	bd10      	pop	{r4, pc}
 80241ea:	4621      	mov	r1, r4
 80241ec:	4802      	ldr	r0, [pc, #8]	; (80241f8 <process_data+0x20>)
        default:
            // debug("Unknown cmd %d\n", data[0]);
            break;
        }
    }
 80241ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            if(not_found) debug("HB unknown %d\n", sender_node_id);
 80241f2:	f000 b803 	b.w	80241fc <debug>
 80241f6:	bf00      	nop
 80241f8:	0802841c 	.word	0x0802841c

080241fc <debug>:
{
    __HAL_UART_ENABLE(&huart3);
}

void debug(char *format, ...)
{
 80241fc:	b40f      	push	{r0, r1, r2, r3}
 80241fe:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(is_tx) return;
 8024200:	4c12      	ldr	r4, [pc, #72]	; (802424c <debug+0x50>)
 8024202:	7823      	ldrb	r3, [r4, #0]
{
 8024204:	b083      	sub	sp, #12
    if(is_tx) return;
 8024206:	b123      	cbz	r3, 8024212 <debug+0x16>
    va_end(ap);

    HAL_UART_Transmit(&huart3, buffer, strlen(buffer), 200);

    is_tx = false;
}
 8024208:	b003      	add	sp, #12
 802420a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 802420e:	b004      	add	sp, #16
 8024210:	4770      	bx	lr
    va_start(ap, format);
 8024212:	ae09      	add	r6, sp, #36	; 0x24
    vsnprintf(buffer, CON_OUT_BUF_SZ, format, ap);
 8024214:	9a08      	ldr	r2, [sp, #32]
 8024216:	480e      	ldr	r0, [pc, #56]	; (8024250 <debug+0x54>)
    va_start(ap, format);
 8024218:	9601      	str	r6, [sp, #4]
 802421a:	f003 05ff 	and.w	r5, r3, #255	; 0xff
    vsnprintf(buffer, CON_OUT_BUF_SZ, format, ap);
 802421e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8024222:	4633      	mov	r3, r6
    is_tx = true;
 8024224:	2701      	movs	r7, #1
 8024226:	7027      	strb	r7, [r4, #0]
    vsnprintf(buffer, CON_OUT_BUF_SZ, format, ap);
 8024228:	f001 fe8c 	bl	8025f44 <vsniprintf>
    HAL_UART_Transmit(&huart3, buffer, strlen(buffer), 200);
 802422c:	4808      	ldr	r0, [pc, #32]	; (8024250 <debug+0x54>)
 802422e:	f7fb ffe5 	bl	80201fc <strlen>
 8024232:	23c8      	movs	r3, #200	; 0xc8
 8024234:	b282      	uxth	r2, r0
 8024236:	4906      	ldr	r1, [pc, #24]	; (8024250 <debug+0x54>)
 8024238:	4806      	ldr	r0, [pc, #24]	; (8024254 <debug+0x58>)
 802423a:	f7fe fe3d 	bl	8022eb8 <HAL_UART_Transmit>
    is_tx = false;
 802423e:	7025      	strb	r5, [r4, #0]
}
 8024240:	b003      	add	sp, #12
 8024242:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8024246:	b004      	add	sp, #16
 8024248:	4770      	bx	lr
 802424a:	bf00      	nop
 802424c:	20000454 	.word	0x20000454
 8024250:	2000024c 	.word	0x2000024c
 8024254:	200005b4 	.word	0x200005b4

08024258 <debug_rx>:

void debug_rx(char x)
{
    if(x == '\n')
 8024258:	280a      	cmp	r0, #10
{
 802425a:	b570      	push	{r4, r5, r6, lr}
    if(x == '\n')
 802425c:	d006      	beq.n	802426c <debug_rx+0x14>
        debug_parse(buffer_rx);
        buffer_rx_cnt = 0;
    }
    else
    {
        buffer_rx[buffer_rx_cnt] = x;
 802425e:	4b0a      	ldr	r3, [pc, #40]	; (8024288 <debug_rx+0x30>)
 8024260:	4c0a      	ldr	r4, [pc, #40]	; (802428c <debug_rx+0x34>)
 8024262:	681a      	ldr	r2, [r3, #0]
 8024264:	54a0      	strb	r0, [r4, r2]
        buffer_rx_cnt++;
 8024266:	1c51      	adds	r1, r2, #1
 8024268:	6019      	str	r1, [r3, #0]
 802426a:	bd70      	pop	{r4, r5, r6, pc}
        buffer_rx[buffer_rx_cnt] = x;
 802426c:	4c06      	ldr	r4, [pc, #24]	; (8024288 <debug_rx+0x30>)
 802426e:	4a07      	ldr	r2, [pc, #28]	; (802428c <debug_rx+0x34>)
 8024270:	6821      	ldr	r1, [r4, #0]
        buffer_rx[buffer_rx_cnt + 1] = '\0';
 8024272:	1856      	adds	r6, r2, r1
 8024274:	4603      	mov	r3, r0
 8024276:	2500      	movs	r5, #0
        debug_parse(buffer_rx);
 8024278:	4610      	mov	r0, r2
        buffer_rx[buffer_rx_cnt] = x;
 802427a:	5453      	strb	r3, [r2, r1]
        buffer_rx[buffer_rx_cnt + 1] = '\0';
 802427c:	7075      	strb	r5, [r6, #1]
        debug_parse(buffer_rx);
 802427e:	f000 f807 	bl	8024290 <debug_parse>
        buffer_rx_cnt = 0;
 8024282:	6025      	str	r5, [r4, #0]
 8024284:	bd70      	pop	{r4, r5, r6, pc}
 8024286:	bf00      	nop
 8024288:	20000450 	.word	0x20000450
 802428c:	20000810 	.word	0x20000810

08024290 <debug_parse>:
        if(*ss == ' ') return ss - s + 1;
    }
}

void debug_parse(char *s)
{
 8024290:	b510      	push	{r4, lr}
        if(*s1 == '\n' || *s1 == '\0') return 1;
 8024292:	7803      	ldrb	r3, [r0, #0]
 8024294:	2b0a      	cmp	r3, #10
{
 8024296:	b082      	sub	sp, #8
        if(*s1 == '\n' || *s1 == '\0') return 1;
 8024298:	d010      	beq.n	80242bc <debug_parse+0x2c>
 802429a:	b17b      	cbz	r3, 80242bc <debug_parse+0x2c>
        if(*s1 != *s2) return 0;
 802429c:	2b69      	cmp	r3, #105	; 0x69
 802429e:	d11e      	bne.n	80242de <debug_parse+0x4e>
 80242a0:	4964      	ldr	r1, [pc, #400]	; (8024434 <debug_parse+0x1a4>)
 80242a2:	e007      	b.n	80242b4 <debug_parse+0x24>
        if(*s1 == '\n' || *s1 == '\0') return 1;
 80242a4:	b153      	cbz	r3, 80242bc <debug_parse+0x2c>
        if(*s2 == '\n' || *s2 == '\0') return 1;
 80242a6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80242aa:	2a0a      	cmp	r2, #10
 80242ac:	d006      	beq.n	80242bc <debug_parse+0x2c>
 80242ae:	b12a      	cbz	r2, 80242bc <debug_parse+0x2c>
        if(*s1 != *s2) return 0;
 80242b0:	429a      	cmp	r2, r3
 80242b2:	d110      	bne.n	80242d6 <debug_parse+0x46>
        if(*s1 == '\n' || *s1 == '\0') return 1;
 80242b4:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 80242b8:	2b0a      	cmp	r3, #10
 80242ba:	d1f3      	bne.n	80242a4 <debug_parse+0x14>
        // int c = sscanf(&s[find_space(s)], "%u", &state);
        // if(c > 0)
        // {
        //     debug("YEAH %d\n", state);
        // }
        servo_print();
 80242bc:	f000 f90c 	bl	80244d8 <servo_print>
        adc_print();
 80242c0:	f7ff fdee 	bl	8023ea0 <adc_print>
        debug("Btn: %d\n", BTN_SNS_GPIO_Port->IDR & BTN_SNS_Pin ? 1 : 0);
 80242c4:	4b5c      	ldr	r3, [pc, #368]	; (8024438 <debug_parse+0x1a8>)
 80242c6:	485d      	ldr	r0, [pc, #372]	; (802443c <debug_parse+0x1ac>)
 80242c8:	6919      	ldr	r1, [r3, #16]
 80242ca:	f3c1 3100 	ubfx	r1, r1, #12, #1
 80242ce:	f7ff ff95 	bl	80241fc <debug>
    }
    else
    {
        debug("Not Found!\n");
    }
 80242d2:	b002      	add	sp, #8
 80242d4:	bd10      	pop	{r4, pc}
        debug("Not Found!\n");
 80242d6:	485a      	ldr	r0, [pc, #360]	; (8024440 <debug_parse+0x1b0>)
 80242d8:	f7ff ff90 	bl	80241fc <debug>
 80242dc:	e7f9      	b.n	80242d2 <debug_parse+0x42>
        if(*s1 != *s2) return 0;
 80242de:	2b73      	cmp	r3, #115	; 0x73
 80242e0:	d136      	bne.n	8024350 <debug_parse+0xc0>
 80242e2:	4c58      	ldr	r4, [pc, #352]	; (8024444 <debug_parse+0x1b4>)
 80242e4:	4601      	mov	r1, r0
 80242e6:	e007      	b.n	80242f8 <debug_parse+0x68>
        if(*s1 == '\n' || *s1 == '\0') return 1;
 80242e8:	b153      	cbz	r3, 8024300 <debug_parse+0x70>
        if(*s2 == '\n' || *s2 == '\0') return 1;
 80242ea:	f814 2f01 	ldrb.w	r2, [r4, #1]!
 80242ee:	2a0a      	cmp	r2, #10
 80242f0:	d006      	beq.n	8024300 <debug_parse+0x70>
 80242f2:	b12a      	cbz	r2, 8024300 <debug_parse+0x70>
        if(*s1 != *s2) return 0;
 80242f4:	4293      	cmp	r3, r2
 80242f6:	d1ee      	bne.n	80242d6 <debug_parse+0x46>
        if(*s1 == '\n' || *s1 == '\0') return 1;
 80242f8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80242fc:	2b0a      	cmp	r3, #10
 80242fe:	d1f3      	bne.n	80242e8 <debug_parse+0x58>
        unsigned int servo = 0, val = 0;
 8024300:	2300      	movs	r3, #0
 8024302:	9300      	str	r3, [sp, #0]
 8024304:	9301      	str	r3, [sp, #4]
 8024306:	4602      	mov	r2, r0
 8024308:	e001      	b.n	802430e <debug_parse+0x7e>
        if(*ss == ' ') return ss - s + 1;
 802430a:	2b20      	cmp	r3, #32
 802430c:	d011      	beq.n	8024332 <debug_parse+0xa2>
        if(*ss == '\n' || ss == '\0') return 0;
 802430e:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8024312:	2b0a      	cmp	r3, #10
 8024314:	d1f9      	bne.n	802430a <debug_parse+0x7a>
 8024316:	2300      	movs	r3, #0
        int c = sscanf(&s[find_space(s)], "%u %u", &servo, &val);
 8024318:	4418      	add	r0, r3
 802431a:	466a      	mov	r2, sp
 802431c:	ab01      	add	r3, sp, #4
 802431e:	494a      	ldr	r1, [pc, #296]	; (8024448 <debug_parse+0x1b8>)
 8024320:	f001 fdb8 	bl	8025e94 <siscanf>
        if(c == 2)
 8024324:	2802      	cmp	r0, #2
 8024326:	d007      	beq.n	8024338 <debug_parse+0xa8>
            debug("servo: fail Input\n");
 8024328:	4848      	ldr	r0, [pc, #288]	; (802444c <debug_parse+0x1bc>)
 802432a:	f7ff ff67 	bl	80241fc <debug>
 802432e:	b002      	add	sp, #8
 8024330:	bd10      	pop	{r4, pc}
 8024332:	1a13      	subs	r3, r2, r0
 8024334:	3301      	adds	r3, #1
 8024336:	e7ef      	b.n	8024318 <debug_parse+0x88>
            debug("Set Servo %d to %d\n", servo, val);
 8024338:	e89d 0006 	ldmia.w	sp, {r1, r2}
 802433c:	4844      	ldr	r0, [pc, #272]	; (8024450 <debug_parse+0x1c0>)
 802433e:	f7ff ff5d 	bl	80241fc <debug>
            servo_set(servo, val);
 8024342:	9901      	ldr	r1, [sp, #4]
 8024344:	f89d 0000 	ldrb.w	r0, [sp]
 8024348:	f000 f890 	bl	802446c <servo_set>
 802434c:	b002      	add	sp, #8
 802434e:	bd10      	pop	{r4, pc}
        if(*s1 != *s2) return 0;
 8024350:	2b66      	cmp	r3, #102	; 0x66
 8024352:	d135      	bne.n	80243c0 <debug_parse+0x130>
 8024354:	4c3f      	ldr	r4, [pc, #252]	; (8024454 <debug_parse+0x1c4>)
 8024356:	4601      	mov	r1, r0
 8024358:	e007      	b.n	802436a <debug_parse+0xda>
        if(*s1 == '\n' || *s1 == '\0') return 1;
 802435a:	b153      	cbz	r3, 8024372 <debug_parse+0xe2>
        if(*s2 == '\n' || *s2 == '\0') return 1;
 802435c:	f814 2f01 	ldrb.w	r2, [r4, #1]!
 8024360:	2a0a      	cmp	r2, #10
 8024362:	d006      	beq.n	8024372 <debug_parse+0xe2>
 8024364:	b12a      	cbz	r2, 8024372 <debug_parse+0xe2>
        if(*s1 != *s2) return 0;
 8024366:	4293      	cmp	r3, r2
 8024368:	d1b5      	bne.n	80242d6 <debug_parse+0x46>
        if(*s1 == '\n' || *s1 == '\0') return 1;
 802436a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 802436e:	2b0a      	cmp	r3, #10
 8024370:	d1f3      	bne.n	802435a <debug_parse+0xca>
        unsigned int fan = 0, val = 0;
 8024372:	2300      	movs	r3, #0
 8024374:	9300      	str	r3, [sp, #0]
 8024376:	9301      	str	r3, [sp, #4]
 8024378:	4602      	mov	r2, r0
 802437a:	e001      	b.n	8024380 <debug_parse+0xf0>
        if(*ss == ' ') return ss - s + 1;
 802437c:	2b20      	cmp	r3, #32
 802437e:	d011      	beq.n	80243a4 <debug_parse+0x114>
        if(*ss == '\n' || ss == '\0') return 0;
 8024380:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8024384:	2b0a      	cmp	r3, #10
 8024386:	d1f9      	bne.n	802437c <debug_parse+0xec>
 8024388:	2300      	movs	r3, #0
        int c = sscanf(&s[find_space(s)], "%u %u", &fan, &val);
 802438a:	4418      	add	r0, r3
 802438c:	466a      	mov	r2, sp
 802438e:	ab01      	add	r3, sp, #4
 8024390:	492d      	ldr	r1, [pc, #180]	; (8024448 <debug_parse+0x1b8>)
 8024392:	f001 fd7f 	bl	8025e94 <siscanf>
        if(c == 2)
 8024396:	2802      	cmp	r0, #2
 8024398:	d007      	beq.n	80243aa <debug_parse+0x11a>
            debug("fan: fail Input\n");
 802439a:	482f      	ldr	r0, [pc, #188]	; (8024458 <debug_parse+0x1c8>)
 802439c:	f7ff ff2e 	bl	80241fc <debug>
 80243a0:	b002      	add	sp, #8
 80243a2:	bd10      	pop	{r4, pc}
 80243a4:	1a13      	subs	r3, r2, r0
 80243a6:	3301      	adds	r3, #1
 80243a8:	e7ef      	b.n	802438a <debug_parse+0xfa>
            debug("Set Fan %d to %d\n", fan, val);
 80243aa:	e89d 0006 	ldmia.w	sp, {r1, r2}
 80243ae:	482b      	ldr	r0, [pc, #172]	; (802445c <debug_parse+0x1cc>)
 80243b0:	f7ff ff24 	bl	80241fc <debug>
            fan_set(fan, val);
 80243b4:	9901      	ldr	r1, [sp, #4]
 80243b6:	f89d 0000 	ldrb.w	r0, [sp]
 80243ba:	f7ff fdd3 	bl	8023f64 <fan_set>
 80243be:	e788      	b.n	80242d2 <debug_parse+0x42>
        if(*s1 != *s2) return 0;
 80243c0:	2b6c      	cmp	r3, #108	; 0x6c
 80243c2:	d188      	bne.n	80242d6 <debug_parse+0x46>
 80243c4:	4c26      	ldr	r4, [pc, #152]	; (8024460 <debug_parse+0x1d0>)
 80243c6:	4601      	mov	r1, r0
 80243c8:	e008      	b.n	80243dc <debug_parse+0x14c>
        if(*s1 == '\n' || *s1 == '\0') return 1;
 80243ca:	b15b      	cbz	r3, 80243e4 <debug_parse+0x154>
        if(*s2 == '\n' || *s2 == '\0') return 1;
 80243cc:	f814 2f01 	ldrb.w	r2, [r4, #1]!
 80243d0:	2a0a      	cmp	r2, #10
 80243d2:	d007      	beq.n	80243e4 <debug_parse+0x154>
 80243d4:	b132      	cbz	r2, 80243e4 <debug_parse+0x154>
        if(*s1 != *s2) return 0;
 80243d6:	4293      	cmp	r3, r2
 80243d8:	f47f af7d 	bne.w	80242d6 <debug_parse+0x46>
        if(*s1 == '\n' || *s1 == '\0') return 1;
 80243dc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80243e0:	2b0a      	cmp	r3, #10
 80243e2:	d1f2      	bne.n	80243ca <debug_parse+0x13a>
        unsigned int led = 0, val = 0;
 80243e4:	2300      	movs	r3, #0
 80243e6:	9300      	str	r3, [sp, #0]
 80243e8:	9301      	str	r3, [sp, #4]
 80243ea:	4602      	mov	r2, r0
 80243ec:	e001      	b.n	80243f2 <debug_parse+0x162>
        if(*ss == ' ') return ss - s + 1;
 80243ee:	2b20      	cmp	r3, #32
 80243f0:	d011      	beq.n	8024416 <debug_parse+0x186>
        if(*ss == '\n' || ss == '\0') return 0;
 80243f2:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 80243f6:	2b0a      	cmp	r3, #10
 80243f8:	d1f9      	bne.n	80243ee <debug_parse+0x15e>
 80243fa:	2300      	movs	r3, #0
        int c = sscanf(&s[find_space(s)], "%u %u", &led, &val);
 80243fc:	4418      	add	r0, r3
 80243fe:	466a      	mov	r2, sp
 8024400:	ab01      	add	r3, sp, #4
 8024402:	4911      	ldr	r1, [pc, #68]	; (8024448 <debug_parse+0x1b8>)
 8024404:	f001 fd46 	bl	8025e94 <siscanf>
        if(c == 2)
 8024408:	2802      	cmp	r0, #2
 802440a:	d007      	beq.n	802441c <debug_parse+0x18c>
            debug("LED: fail Input\n");
 802440c:	4815      	ldr	r0, [pc, #84]	; (8024464 <debug_parse+0x1d4>)
 802440e:	f7ff fef5 	bl	80241fc <debug>
 8024412:	b002      	add	sp, #8
 8024414:	bd10      	pop	{r4, pc}
 8024416:	1a13      	subs	r3, r2, r0
 8024418:	3301      	adds	r3, #1
 802441a:	e7ef      	b.n	80243fc <debug_parse+0x16c>
            debug("Set LED %d to %d\n", led, val);
 802441c:	e89d 0006 	ldmia.w	sp, {r1, r2}
 8024420:	4811      	ldr	r0, [pc, #68]	; (8024468 <debug_parse+0x1d8>)
 8024422:	f7ff feeb 	bl	80241fc <debug>
            led_set(led, val);
 8024426:	9901      	ldr	r1, [sp, #4]
 8024428:	f89d 0000 	ldrb.w	r0, [sp]
 802442c:	f7ff fdb4 	bl	8023f98 <led_set>
 8024430:	e74f      	b.n	80242d2 <debug_parse+0x42>
 8024432:	bf00      	nop
 8024434:	0802842c 	.word	0x0802842c
 8024438:	40020000 	.word	0x40020000
 802443c:	080284c4 	.word	0x080284c4
 8024440:	080284d0 	.word	0x080284d0
 8024444:	08028434 	.word	0x08028434
 8024448:	0802843c 	.word	0x0802843c
 802444c:	08028458 	.word	0x08028458
 8024450:	08028444 	.word	0x08028444
 8024454:	0802846c 	.word	0x0802846c
 8024458:	08028484 	.word	0x08028484
 802445c:	08028470 	.word	0x08028470
 8024460:	08028498 	.word	0x08028498
 8024464:	080284b0 	.word	0x080284b0
 8024468:	0802849c 	.word	0x0802849c

0802446c <servo_set>:
    memset(points_pop, 0, sizeof(points_pop));
    memset(points_timer, 0, sizeof(points_timer));
}

bool servo_set(uint8_t servo, uint32_t value)
{
 802446c:	b4f0      	push	{r4, r5, r6, r7}
 802446e:	4607      	mov	r7, r0
 8024470:	b088      	sub	sp, #32
    uint32_t v = map((int32_t)value, 0, 1000, 400, 5600);
    if(value == 0) v = 0;
 8024472:	b331      	cbz	r1, 80244c2 <servo_set+0x56>
    return (uint32_t)((x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min);
 8024474:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
 8024478:	bfa8      	it	ge
 802447a:	f44f 717a 	movge.w	r1, #1000	; 0x3e8
 802447e:	f241 4650 	movw	r6, #5200	; 0x1450
 8024482:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8024486:	4b12      	ldr	r3, [pc, #72]	; (80244d0 <servo_set+0x64>)
 8024488:	fb06 f101 	mul.w	r1, r6, r1
 802448c:	fb83 3601 	smull	r3, r6, r3, r1
 8024490:	17c9      	asrs	r1, r1, #31
 8024492:	ebc1 11a6 	rsb	r1, r1, r6, asr #6
 8024496:	f501 76c8 	add.w	r6, r1, #400	; 0x190
    __IO uint32_t *ptr[] = {
 802449a:	4d0e      	ldr	r5, [pc, #56]	; (80244d4 <servo_set+0x68>)
 802449c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 802449e:	ac01      	add	r4, sp, #4
 80244a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80244a2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
        &TIM1->CCR3,
        &TIM1->CCR4,
        &TIM4->CCR1,
        &TIM4->CCR2,
        &TIM4->CCR3};
    if(servo > 6) return true;
 80244a6:	2f06      	cmp	r7, #6
    __IO uint32_t *ptr[] = {
 80244a8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    if(servo > 6) return true;
 80244ac:	d80b      	bhi.n	80244c6 <servo_set+0x5a>
    *ptr[servo] = v;
 80244ae:	ab08      	add	r3, sp, #32
 80244b0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
    return false;
 80244b4:	2000      	movs	r0, #0
    *ptr[servo] = v;
 80244b6:	f857 3c1c 	ldr.w	r3, [r7, #-28]
 80244ba:	601e      	str	r6, [r3, #0]
    // {
    //     TIM4->CCR3 = v;
    //     return false;
    // }
    // return true;
}
 80244bc:	b008      	add	sp, #32
 80244be:	bcf0      	pop	{r4, r5, r6, r7}
 80244c0:	4770      	bx	lr
 80244c2:	460e      	mov	r6, r1
 80244c4:	e7e9      	b.n	802449a <servo_set+0x2e>
    if(servo > 6) return true;
 80244c6:	2001      	movs	r0, #1
}
 80244c8:	b008      	add	sp, #32
 80244ca:	bcf0      	pop	{r4, r5, r6, r7}
 80244cc:	4770      	bx	lr
 80244ce:	bf00      	nop
 80244d0:	10624dd3 	.word	0x10624dd3
 80244d4:	080283a4 	.word	0x080283a4

080244d8 <servo_print>:

void servo_print(void)
{
 80244d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    debug("Servo: \n\t 0\t%d\n\t 1\t%d\n\t 2\t%d\n\t 3\t%d\n\t 4\t%d\n\t 5\t%d\n\t 6\t%d\n",
          TIM1->CCR1 / 2,
 80244da:	480d      	ldr	r0, [pc, #52]	; (8024510 <servo_print+0x38>)
          TIM1->CCR2 / 2,
          TIM1->CCR3 / 2,
          TIM1->CCR4 / 2,
          TIM4->CCR1 / 2,
 80244dc:	4d0d      	ldr	r5, [pc, #52]	; (8024514 <servo_print+0x3c>)
          TIM1->CCR1 / 2,
 80244de:	6b41      	ldr	r1, [r0, #52]	; 0x34
          TIM1->CCR2 / 2,
 80244e0:	6b82      	ldr	r2, [r0, #56]	; 0x38
          TIM1->CCR3 / 2,
 80244e2:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
          TIM1->CCR4 / 2,
 80244e4:	6c07      	ldr	r7, [r0, #64]	; 0x40
          TIM4->CCR1 / 2,
 80244e6:	6b6e      	ldr	r6, [r5, #52]	; 0x34
          TIM4->CCR2 / 2,
 80244e8:	6bac      	ldr	r4, [r5, #56]	; 0x38
          TIM4->CCR3 / 2);
 80244ea:	6bed      	ldr	r5, [r5, #60]	; 0x3c
    debug("Servo: \n\t 0\t%d\n\t 1\t%d\n\t 2\t%d\n\t 3\t%d\n\t 4\t%d\n\t 5\t%d\n\t 6\t%d\n",
 80244ec:	480a      	ldr	r0, [pc, #40]	; (8024518 <servo_print+0x40>)
{
 80244ee:	b085      	sub	sp, #20
    debug("Servo: \n\t 0\t%d\n\t 1\t%d\n\t 2\t%d\n\t 3\t%d\n\t 4\t%d\n\t 5\t%d\n\t 6\t%d\n",
 80244f0:	087f      	lsrs	r7, r7, #1
 80244f2:	0876      	lsrs	r6, r6, #1
 80244f4:	086d      	lsrs	r5, r5, #1
 80244f6:	0864      	lsrs	r4, r4, #1
 80244f8:	0849      	lsrs	r1, r1, #1
 80244fa:	0852      	lsrs	r2, r2, #1
 80244fc:	085b      	lsrs	r3, r3, #1
 80244fe:	9700      	str	r7, [sp, #0]
 8024500:	9601      	str	r6, [sp, #4]
 8024502:	9503      	str	r5, [sp, #12]
 8024504:	9402      	str	r4, [sp, #8]
 8024506:	f7ff fe79 	bl	80241fc <debug>
}
 802450a:	b005      	add	sp, #20
 802450c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802450e:	bf00      	nop
 8024510:	40010000 	.word	0x40010000
 8024514:	40000800 	.word	0x40000800
 8024518:	080284dc 	.word	0x080284dc

0802451c <rfm12b_trx_2b>:
  __ASM volatile ("cpsid i" : : : "memory");
 802451c:	b672      	cpsid	i

static uint16_t rfm12b_trx_2b(uint16_t word)
{
    uint8_t rx[2];
__disable_irq();
    PIN_CLR(RFM_CS);
 802451e:	4b27      	ldr	r3, [pc, #156]	; (80245bc <rfm12b_trx_2b+0xa0>)
 8024520:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8024524:	619a      	str	r2, [r3, #24]
    DELAY_US(1);
 8024526:	bf00      	nop
 8024528:	bf00      	nop
 802452a:	bf00      	nop
 802452c:	bf00      	nop
 802452e:	bf00      	nop
 8024530:	bf00      	nop
 8024532:	bf00      	nop
 8024534:	bf00      	nop
 8024536:	bf00      	nop
 8024538:	bf00      	nop
 802453a:	bf00      	nop

    S_WB();
 802453c:	bf00      	nop
 802453e:	4b20      	ldr	r3, [pc, #128]	; (80245c0 <rfm12b_trx_2b+0xa4>)
 8024540:	689b      	ldr	r3, [r3, #8]
 8024542:	061b      	lsls	r3, r3, #24
 8024544:	d4fa      	bmi.n	802453c <rfm12b_trx_2b+0x20>
    S_DT(word >> 8);
 8024546:	bf00      	nop
 8024548:	4b1d      	ldr	r3, [pc, #116]	; (80245c0 <rfm12b_trx_2b+0xa4>)
 802454a:	0a02      	lsrs	r2, r0, #8
 802454c:	60da      	str	r2, [r3, #12]
 802454e:	bf00      	nop
    S_WT();
 8024550:	689b      	ldr	r3, [r3, #8]
 8024552:	0799      	lsls	r1, r3, #30
 8024554:	d404      	bmi.n	8024560 <rfm12b_trx_2b+0x44>
 8024556:	bf00      	nop
 8024558:	4b19      	ldr	r3, [pc, #100]	; (80245c0 <rfm12b_trx_2b+0xa4>)
 802455a:	689b      	ldr	r3, [r3, #8]
 802455c:	079a      	lsls	r2, r3, #30
 802455e:	d5fa      	bpl.n	8024556 <rfm12b_trx_2b+0x3a>
    S_DT(word & 0xFF);
 8024560:	bf00      	nop
 8024562:	4b17      	ldr	r3, [pc, #92]	; (80245c0 <rfm12b_trx_2b+0xa4>)
 8024564:	b2c0      	uxtb	r0, r0
 8024566:	60d8      	str	r0, [r3, #12]
 8024568:	bf00      	nop
    S_WR();
 802456a:	689b      	ldr	r3, [r3, #8]
 802456c:	07db      	lsls	r3, r3, #31
 802456e:	d404      	bmi.n	802457a <rfm12b_trx_2b+0x5e>
 8024570:	bf00      	nop
 8024572:	4b13      	ldr	r3, [pc, #76]	; (80245c0 <rfm12b_trx_2b+0xa4>)
 8024574:	689b      	ldr	r3, [r3, #8]
 8024576:	07d8      	lsls	r0, r3, #31
 8024578:	d5fa      	bpl.n	8024570 <rfm12b_trx_2b+0x54>
    S_DR(rx[0]);
 802457a:	4b11      	ldr	r3, [pc, #68]	; (80245c0 <rfm12b_trx_2b+0xa4>)
 802457c:	68da      	ldr	r2, [r3, #12]
    S_WR();
 802457e:	689b      	ldr	r3, [r3, #8]
 8024580:	07d9      	lsls	r1, r3, #31
 8024582:	d404      	bmi.n	802458e <rfm12b_trx_2b+0x72>
 8024584:	bf00      	nop
 8024586:	4b0e      	ldr	r3, [pc, #56]	; (80245c0 <rfm12b_trx_2b+0xa4>)
 8024588:	689b      	ldr	r3, [r3, #8]
 802458a:	07db      	lsls	r3, r3, #31
 802458c:	d5fa      	bpl.n	8024584 <rfm12b_trx_2b+0x68>
    S_DR(rx[1]);
 802458e:	490c      	ldr	r1, [pc, #48]	; (80245c0 <rfm12b_trx_2b+0xa4>)

    PIN_SET(RFM_CS);
 8024590:	4b0a      	ldr	r3, [pc, #40]	; (80245bc <rfm12b_trx_2b+0xa0>)
    S_DR(rx[1]);
 8024592:	68c8      	ldr	r0, [r1, #12]
    PIN_SET(RFM_CS);
 8024594:	2104      	movs	r1, #4
 8024596:	6199      	str	r1, [r3, #24]
    DELAY_US(1);
 8024598:	bf00      	nop
 802459a:	bf00      	nop
 802459c:	bf00      	nop
 802459e:	bf00      	nop
 80245a0:	bf00      	nop
 80245a2:	bf00      	nop
 80245a4:	bf00      	nop
 80245a6:	bf00      	nop
 80245a8:	bf00      	nop
 80245aa:	bf00      	nop
 80245ac:	bf00      	nop
 80245ae:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 80245b0:	b662      	cpsie	i
__enable_irq();
    return (rx[0] << 8) | rx[1];
 80245b2:	b2c0      	uxtb	r0, r0
 80245b4:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
}
 80245b8:	b280      	uxth	r0, r0
 80245ba:	4770      	bx	lr
 80245bc:	40020c00 	.word	0x40020c00
 80245c0:	40003c00 	.word	0x40003c00

080245c4 <_crypt_function>:
    return crc;
}

// XXTEA by David Wheeler, adapted from http://en.wikipedia.org/wiki/XXTEA
static void _crypt_function(bool sending)
{
 80245c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80245c8:	b083      	sub	sp, #12
// #pragma GCC diagnostic ignored "-Wcast-align"
    volatile uint32_t *v = &rf12_buf_u32[1];
// #pragma GCC diagnostic pop
    uint8_t p, e, rounds = 6;

    if(sending)
 80245ca:	2800      	cmp	r0, #0
 80245cc:	f000 809c 	beq.w	8024708 <_crypt_function+0x144>
    {
        ++seqNum;
 80245d0:	4b9e      	ldr	r3, [pc, #632]	; (802484c <_crypt_function+0x288>)
        // memcpy(rf12_data + rf12_len, &seqNum, sizeof(seqNum));
        for(uint8_t i=0; i<sizeof(seqNum);i++)
        rf12_data[rf12_len + i] = *(((uint8_t*)&seqNum) + i);
 80245d2:	f8df 8288 	ldr.w	r8, [pc, #648]	; 802485c <_crypt_function+0x298>
        ++seqNum;
 80245d6:	6819      	ldr	r1, [r3, #0]
        rf12_data[rf12_len + i] = *(((uint8_t*)&seqNum) + i);
 80245d8:	f898 2003 	ldrb.w	r2, [r8, #3]
        ++seqNum;
 80245dc:	3101      	adds	r1, #1
 80245de:	6019      	str	r1, [r3, #0]
        rf12_data[rf12_len + i] = *(((uint8_t*)&seqNum) + i);
 80245e0:	3204      	adds	r2, #4
 80245e2:	7819      	ldrb	r1, [r3, #0]
 80245e4:	f808 1002 	strb.w	r1, [r8, r2]
 80245e8:	f898 2003 	ldrb.w	r2, [r8, #3]
 80245ec:	78d9      	ldrb	r1, [r3, #3]
 80245ee:	785c      	ldrb	r4, [r3, #1]
 80245f0:	7898      	ldrb	r0, [r3, #2]
 80245f2:	1d53      	adds	r3, r2, #5
 80245f4:	f808 4003 	strb.w	r4, [r8, r3]
 80245f8:	f898 3003 	ldrb.w	r3, [r8, #3]
 80245fc:	3306      	adds	r3, #6
 80245fe:	f808 0003 	strb.w	r0, [r8, r3]
 8024602:	f898 3003 	ldrb.w	r3, [r8, #3]
 8024606:	3307      	adds	r3, #7
 8024608:	f808 1003 	strb.w	r1, [r8, r3]
        uint8_t pad = 3 - (rf12_len & 3);
 802460c:	f898 3003 	ldrb.w	r3, [r8, #3]
        rf12_len += pad;
 8024610:	f898 2003 	ldrb.w	r2, [r8, #3]
        uint8_t pad = 3 - (rf12_len & 3);
 8024614:	43db      	mvns	r3, r3
 8024616:	f003 0303 	and.w	r3, r3, #3
        rf12_len += pad;
 802461a:	441a      	add	r2, r3
 802461c:	b2d2      	uxtb	r2, r2
 802461e:	f888 2003 	strb.w	r2, [r8, #3]
        rf12_data[rf12_len] &= 0x3F;
 8024622:	f898 2003 	ldrb.w	r2, [r8, #3]
 8024626:	3204      	adds	r2, #4
 8024628:	f818 1002 	ldrb.w	r1, [r8, r2]
 802462c:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8024630:	f808 1002 	strb.w	r1, [r8, r2]
        rf12_data[rf12_len] |= pad << 6;
 8024634:	f898 2003 	ldrb.w	r2, [r8, #3]
 8024638:	3204      	adds	r2, #4
 802463a:	f818 1002 	ldrb.w	r1, [r8, r2]
 802463e:	ea41 1383 	orr.w	r3, r1, r3, lsl #6
 8024642:	f808 3002 	strb.w	r3, [r8, r2]
        ++rf12_len;
 8024646:	f898 3003 	ldrb.w	r3, [r8, #3]
 802464a:	3301      	adds	r3, #1
 802464c:	b2db      	uxtb	r3, r3
 802464e:	f888 3003 	strb.w	r3, [r8, #3]
        // actual encoding
        char n = rf12_len / 4;
 8024652:	f898 c003 	ldrb.w	ip, [r8, #3]
 8024656:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
        if(n > 1)
 802465a:	f1bc 0f01 	cmp.w	ip, #1
 802465e:	d950      	bls.n	8024702 <_crypt_function+0x13e>
        {
            sum = 0;
            z = v[n - 1];
 8024660:	f10c 4980 	add.w	r9, ip, #1073741824	; 0x40000000
 8024664:	f109 39ff 	add.w	r9, r9, #4294967295
 8024668:	f108 0604 	add.w	r6, r8, #4
 802466c:	f8df e1f0 	ldr.w	lr, [pc, #496]	; 8024860 <_crypt_function+0x29c>
 8024670:	f856 3029 	ldr.w	r3, [r6, r9, lsl #2]
 8024674:	f10c 3cff 	add.w	ip, ip, #4294967295
 8024678:	eb06 0989 	add.w	r9, r6, r9, lsl #2
            sum = 0;
 802467c:	2700      	movs	r7, #0
            do
            {
                sum += DELTA;
 802467e:	f1a7 47c3 	sub.w	r7, r7, #1635778560	; 0x61800000
 8024682:	f5a7 0791 	sub.w	r7, r7, #4751360	; 0x488000
 8024686:	f2a7 6747 	subw	r7, r7, #1607	; 0x647
 802468a:	f3c7 0181 	ubfx	r1, r7, #2, #2
                e = (sum >> 2) & 3;
 802468e:	2200      	movs	r2, #0
                for(p = 0; p < n - 1; p++)
                    y = v[p + 1], z = v[p] += MX;
 8024690:	1c50      	adds	r0, r2, #1
 8024692:	f002 0203 	and.w	r2, r2, #3
 8024696:	404a      	eors	r2, r1
 8024698:	f856 a020 	ldr.w	sl, [r6, r0, lsl #2]
 802469c:	f85e 5022 	ldr.w	r5, [lr, r2, lsl #2]
 80246a0:	0084      	lsls	r4, r0, #2
 80246a2:	ea4f 028a 	mov.w	r2, sl, lsl #2
 80246a6:	ea82 1253 	eor.w	r2, r2, r3, lsr #5
 80246aa:	3c04      	subs	r4, #4
 80246ac:	405d      	eors	r5, r3
 80246ae:	011b      	lsls	r3, r3, #4
 80246b0:	ea87 0b0a 	eor.w	fp, r7, sl
 80246b4:	ea83 03da 	eor.w	r3, r3, sl, lsr #3
 80246b8:	4413      	add	r3, r2
 80246ba:	f856 a004 	ldr.w	sl, [r6, r4]
 80246be:	445d      	add	r5, fp
 80246c0:	406b      	eors	r3, r5
                for(p = 0; p < n - 1; p++)
 80246c2:	b2c2      	uxtb	r2, r0
                    y = v[p + 1], z = v[p] += MX;
 80246c4:	4453      	add	r3, sl
                for(p = 0; p < n - 1; p++)
 80246c6:	4562      	cmp	r2, ip
                    y = v[p + 1], z = v[p] += MX;
 80246c8:	5133      	str	r3, [r6, r4]
                for(p = 0; p < n - 1; p++)
 80246ca:	dbe1      	blt.n	8024690 <_crypt_function+0xcc>
                y = v[0];
                z = v[n - 1] += MX;
 80246cc:	f002 0203 	and.w	r2, r2, #3
 80246d0:	404a      	eors	r2, r1
                y = v[0];
 80246d2:	f8d8 5004 	ldr.w	r5, [r8, #4]
                z = v[n - 1] += MX;
 80246d6:	f85e 1022 	ldr.w	r1, [lr, r2, lsl #2]
 80246da:	f8d9 4000 	ldr.w	r4, [r9]
            } while(--rounds);
 80246de:	485c      	ldr	r0, [pc, #368]	; (8024850 <_crypt_function+0x28c>)
                z = v[n - 1] += MX;
 80246e0:	4059      	eors	r1, r3
 80246e2:	ea87 0205 	eor.w	r2, r7, r5
 80246e6:	4411      	add	r1, r2
 80246e8:	00aa      	lsls	r2, r5, #2
 80246ea:	ea82 1253 	eor.w	r2, r2, r3, lsr #5
 80246ee:	011b      	lsls	r3, r3, #4
 80246f0:	ea83 03d5 	eor.w	r3, r3, r5, lsr #3
 80246f4:	4413      	add	r3, r2
 80246f6:	404b      	eors	r3, r1
 80246f8:	4423      	add	r3, r4
            } while(--rounds);
 80246fa:	4287      	cmp	r7, r0
                z = v[n - 1] += MX;
 80246fc:	f8c9 3000 	str.w	r3, [r9]
            } while(--rounds);
 8024700:	d1bd      	bne.n	802467e <_crypt_function+0xba>
            rf12_seq = rf12_data[rf12_len] & 0x3F;
            while(pad-- > 0)
                rf12_seq = (rf12_seq << 8) | rf12_data[--rf12_len];
        }
    }
}
 8024702:	b003      	add	sp, #12
 8024704:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if(rf12_crc == 0)
 8024708:	4b52      	ldr	r3, [pc, #328]	; (8024854 <_crypt_function+0x290>)
 802470a:	881b      	ldrh	r3, [r3, #0]
 802470c:	b29b      	uxth	r3, r3
 802470e:	2b00      	cmp	r3, #0
 8024710:	d1f7      	bne.n	8024702 <_crypt_function+0x13e>
        char n = rf12_len / 4;
 8024712:	f8df 8148 	ldr.w	r8, [pc, #328]	; 802485c <_crypt_function+0x298>
 8024716:	f898 2003 	ldrb.w	r2, [r8, #3]
 802471a:	0892      	lsrs	r2, r2, #2
        if(n > 1)
 802471c:	2a01      	cmp	r2, #1
 802471e:	f240 8090 	bls.w	8024842 <_crypt_function+0x27e>
            y = v[0];
 8024722:	4646      	mov	r6, r8
 8024724:	f102 4b80 	add.w	fp, r2, #1073741824	; 0x40000000
 8024728:	f856 3f04 	ldr.w	r3, [r6, #4]!
            sum = rounds * DELTA;
 802472c:	f8df c120 	ldr.w	ip, [pc, #288]	; 8024850 <_crypt_function+0x28c>
 8024730:	f8df e12c 	ldr.w	lr, [pc, #300]	; 8024860 <_crypt_function+0x29c>
 8024734:	3a01      	subs	r2, #1
 8024736:	f10b 3bff 	add.w	fp, fp, #4294967295
 802473a:	b2d2      	uxtb	r2, r2
 802473c:	eb06 0b8b 	add.w	fp, r6, fp, lsl #2
 8024740:	9201      	str	r2, [sp, #4]
                e = (sum >> 2) & 3;
 8024742:	f3cc 0a81 	ubfx	sl, ip, #2, #2
                for(p = n - 1; p > 0; p--)
 8024746:	9f01      	ldr	r7, [sp, #4]
 8024748:	fa4f f98a 	sxtb.w	r9, sl
                    z = v[p - 1], y = v[p] -= MX;
 802474c:	f107 4280 	add.w	r2, r7, #1073741824	; 0x40000000
 8024750:	3a01      	subs	r2, #1
 8024752:	f007 0103 	and.w	r1, r7, #3
 8024756:	ea89 0101 	eor.w	r1, r9, r1
 802475a:	f856 0022 	ldr.w	r0, [r6, r2, lsl #2]
 802475e:	f85e 5021 	ldr.w	r5, [lr, r1, lsl #2]
 8024762:	0092      	lsls	r2, r2, #2
 8024764:	3204      	adds	r2, #4
 8024766:	0104      	lsls	r4, r0, #4
 8024768:	0099      	lsls	r1, r3, #2
 802476a:	ea84 04d3 	eor.w	r4, r4, r3, lsr #3
 802476e:	ea81 1150 	eor.w	r1, r1, r0, lsr #5
 8024772:	ea8c 0303 	eor.w	r3, ip, r3
 8024776:	4068      	eors	r0, r5
 8024778:	4421      	add	r1, r4
 802477a:	4403      	add	r3, r0
 802477c:	58b4      	ldr	r4, [r6, r2]
 802477e:	404b      	eors	r3, r1
                for(p = n - 1; p > 0; p--)
 8024780:	3f01      	subs	r7, #1
                    z = v[p - 1], y = v[p] -= MX;
 8024782:	1ae3      	subs	r3, r4, r3
                for(p = n - 1; p > 0; p--)
 8024784:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
                    z = v[p - 1], y = v[p] -= MX;
 8024788:	50b3      	str	r3, [r6, r2]
                for(p = n - 1; p > 0; p--)
 802478a:	d1df      	bne.n	802474c <_crypt_function+0x188>
                z = v[n - 1];
 802478c:	f8db 4000 	ldr.w	r4, [fp]
                y = v[0] -= MX;
 8024790:	f85e 202a 	ldr.w	r2, [lr, sl, lsl #2]
 8024794:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8024798:	ea8c 0103 	eor.w	r1, ip, r3
 802479c:	4062      	eors	r2, r4
 802479e:	440a      	add	r2, r1
 80247a0:	0121      	lsls	r1, r4, #4
 80247a2:	ea81 01d3 	eor.w	r1, r1, r3, lsr #3
 80247a6:	009b      	lsls	r3, r3, #2
 80247a8:	ea83 1354 	eor.w	r3, r3, r4, lsr #5
            } while((sum -= DELTA) != 0);
 80247ac:	f10c 4cc3 	add.w	ip, ip, #1635778560	; 0x61800000
                y = v[0] -= MX;
 80247b0:	440b      	add	r3, r1
            } while((sum -= DELTA) != 0);
 80247b2:	f50c 0c91 	add.w	ip, ip, #4751360	; 0x488000
                y = v[0] -= MX;
 80247b6:	4053      	eors	r3, r2
 80247b8:	1ac3      	subs	r3, r0, r3
            } while((sum -= DELTA) != 0);
 80247ba:	f20c 6c47 	addw	ip, ip, #1607	; 0x647
                y = v[0] -= MX;
 80247be:	f8c8 3004 	str.w	r3, [r8, #4]
            } while((sum -= DELTA) != 0);
 80247c2:	f1bc 0f00 	cmp.w	ip, #0
 80247c6:	d1bc      	bne.n	8024742 <_crypt_function+0x17e>
            uint8_t pad = rf12_data[--rf12_len] >> 6;
 80247c8:	f898 3003 	ldrb.w	r3, [r8, #3]
            rf12_seq = rf12_data[rf12_len] & 0x3F;
 80247cc:	4922      	ldr	r1, [pc, #136]	; (8024858 <_crypt_function+0x294>)
            uint8_t pad = rf12_data[--rf12_len] >> 6;
 80247ce:	3b01      	subs	r3, #1
 80247d0:	b2db      	uxtb	r3, r3
 80247d2:	1d1a      	adds	r2, r3, #4
 80247d4:	f888 3003 	strb.w	r3, [r8, #3]
 80247d8:	f818 0002 	ldrb.w	r0, [r8, r2]
            rf12_seq = rf12_data[rf12_len] & 0x3F;
 80247dc:	f898 3003 	ldrb.w	r3, [r8, #3]
 80247e0:	3304      	adds	r3, #4
            while(pad-- > 0)
 80247e2:	0980      	lsrs	r0, r0, #6
            rf12_seq = rf12_data[rf12_len] & 0x3F;
 80247e4:	f818 3003 	ldrb.w	r3, [r8, r3]
 80247e8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80247ec:	600a      	str	r2, [r1, #0]
            while(pad-- > 0)
 80247ee:	d088      	beq.n	8024702 <_crypt_function+0x13e>
                rf12_seq = (rf12_seq << 8) | rf12_data[--rf12_len];
 80247f0:	f898 3003 	ldrb.w	r3, [r8, #3]
 80247f4:	3b01      	subs	r3, #1
 80247f6:	b2db      	uxtb	r3, r3
 80247f8:	1d1c      	adds	r4, r3, #4
 80247fa:	f888 3003 	strb.w	r3, [r8, #3]
 80247fe:	f818 3004 	ldrb.w	r3, [r8, r4]
            while(pad-- > 0)
 8024802:	2801      	cmp	r0, #1
                rf12_seq = (rf12_seq << 8) | rf12_data[--rf12_len];
 8024804:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
            while(pad-- > 0)
 8024808:	d017      	beq.n	802483a <_crypt_function+0x276>
                rf12_seq = (rf12_seq << 8) | rf12_data[--rf12_len];
 802480a:	f898 2003 	ldrb.w	r2, [r8, #3]
 802480e:	3a01      	subs	r2, #1
 8024810:	b2d2      	uxtb	r2, r2
 8024812:	1d14      	adds	r4, r2, #4
 8024814:	f888 2003 	strb.w	r2, [r8, #3]
 8024818:	f818 2004 	ldrb.w	r2, [r8, r4]
            while(pad-- > 0)
 802481c:	2802      	cmp	r0, #2
                rf12_seq = (rf12_seq << 8) | rf12_data[--rf12_len];
 802481e:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
            while(pad-- > 0)
 8024822:	d00a      	beq.n	802483a <_crypt_function+0x276>
                rf12_seq = (rf12_seq << 8) | rf12_data[--rf12_len];
 8024824:	f898 2003 	ldrb.w	r2, [r8, #3]
 8024828:	3a01      	subs	r2, #1
 802482a:	b2d2      	uxtb	r2, r2
 802482c:	1d10      	adds	r0, r2, #4
 802482e:	f888 2003 	strb.w	r2, [r8, #3]
 8024832:	f818 2000 	ldrb.w	r2, [r8, r0]
 8024836:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 802483a:	600b      	str	r3, [r1, #0]
}
 802483c:	b003      	add	sp, #12
 802483e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(n > 0)
 8024842:	2a00      	cmp	r2, #0
 8024844:	f43f af5d 	beq.w	8024702 <_crypt_function+0x13e>
 8024848:	e7be      	b.n	80247c8 <_crypt_function+0x204>
 802484a:	bf00      	nop
 802484c:	20000500 	.word	0x20000500
 8024850:	b54cda56 	.word	0xb54cda56
 8024854:	200004f4 	.word	0x200004f4
 8024858:	200004f8 	.word	0x200004f8
 802485c:	20000470 	.word	0x20000470
 8024860:	20000458 	.word	0x20000458

08024864 <send_start>:
    }
    return false;
}

static void send_start(uint8_t to_node_id, const void *data, uint8_t data_len, bool request_ack, bool sendACK, bool is_sleep)
{
 8024864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    rf12_len = data_len;
 8024866:	4e4a      	ldr	r6, [pc, #296]	; (8024990 <send_start+0x12c>)
{
 8024868:	f89d e018 	ldrb.w	lr, [sp, #24]
 802486c:	f89d 701c 	ldrb.w	r7, [sp, #28]
    rf12_len = data_len;
 8024870:	70f2      	strb	r2, [r6, #3]
// #pragma GCC diagnostic push
// #pragma GCC diagnostic ignored "-Wcast-qual"
    // memcpy((void *)rf12_data, data, data_len);
    for(uint8_t i=0; i < data_len;i++)
 8024872:	b152      	cbz	r2, 802488a <send_start+0x26>
 8024874:	3a01      	subs	r2, #1
 8024876:	fa51 f582 	uxtab	r5, r1, r2
 802487a:	3901      	subs	r1, #1
 802487c:	1d32      	adds	r2, r6, #4
        *(rf12_data+i) = *(((const uint8_t*)data) + i);
 802487e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8024882:	f802 4b01 	strb.w	r4, [r2], #1
    for(uint8_t i=0; i < data_len;i++)
 8024886:	42a9      	cmp	r1, r5
 8024888:	d1f9      	bne.n	802487e <send_start+0x1a>
// #pragma GCC diagnostic pop

    rf12_hdr1 = to_node_id | (sendACK ? RF12_HDR_ACKCTLMASK : 0);
    rf12_hdr2 = nodeID | (request_ack ? RF12_HDR_ACKCTLMASK : 0);
    if(crypter != 0) crypter(true);
 802488a:	4a42      	ldr	r2, [pc, #264]	; (8024994 <send_start+0x130>)
    rf12_hdr2 = nodeID | (request_ack ? RF12_HDR_ACKCTLMASK : 0);
 802488c:	4942      	ldr	r1, [pc, #264]	; (8024998 <send_start+0x134>)
    rf12_hdr1 = to_node_id | (sendACK ? RF12_HDR_ACKCTLMASK : 0);
 802488e:	f1be 0f00 	cmp.w	lr, #0
    rf12_hdr2 = nodeID | (request_ack ? RF12_HDR_ACKCTLMASK : 0);
 8024892:	780c      	ldrb	r4, [r1, #0]
    if(crypter != 0) crypter(true);
 8024894:	6811      	ldr	r1, [r2, #0]
    rf12_hdr1 = to_node_id | (sendACK ? RF12_HDR_ACKCTLMASK : 0);
 8024896:	bf14      	ite	ne
 8024898:	f06f 027f 	mvnne.w	r2, #127	; 0x7f
 802489c:	2200      	moveq	r2, #0
    rf12_hdr2 = nodeID | (request_ack ? RF12_HDR_ACKCTLMASK : 0);
 802489e:	2b00      	cmp	r3, #0
 80248a0:	bf14      	ite	ne
 80248a2:	f06f 037f 	mvnne.w	r3, #127	; 0x7f
 80248a6:	2300      	moveq	r3, #0
    rf12_hdr1 = to_node_id | (sendACK ? RF12_HDR_ACKCTLMASK : 0);
 80248a8:	4302      	orrs	r2, r0
    rf12_hdr2 = nodeID | (request_ack ? RF12_HDR_ACKCTLMASK : 0);
 80248aa:	4323      	orrs	r3, r4
    rf12_hdr1 = to_node_id | (sendACK ? RF12_HDR_ACKCTLMASK : 0);
 80248ac:	b2d2      	uxtb	r2, r2
    rf12_hdr2 = nodeID | (request_ack ? RF12_HDR_ACKCTLMASK : 0);
 80248ae:	b2db      	uxtb	r3, r3
    rf12_hdr1 = to_node_id | (sendACK ? RF12_HDR_ACKCTLMASK : 0);
 80248b0:	7072      	strb	r2, [r6, #1]
    rf12_hdr2 = nodeID | (request_ack ? RF12_HDR_ACKCTLMASK : 0);
 80248b2:	70b3      	strb	r3, [r6, #2]
    if(crypter != 0) crypter(true);
 80248b4:	b109      	cbz	r1, 80248ba <send_start+0x56>
 80248b6:	2001      	movs	r0, #1
 80248b8:	4788      	blx	r1
    rf12_crc = 0xFFFF;
 80248ba:	4e38      	ldr	r6, [pc, #224]	; (802499c <send_start+0x138>)
    rf12_crc = _crc16_update(rf12_crc, networkID);
 80248bc:	4b38      	ldr	r3, [pc, #224]	; (80249a0 <send_start+0x13c>)
    rxstate = TXPRE1;
 80248be:	4c39      	ldr	r4, [pc, #228]	; (80249a4 <send_start+0x140>)
    crc ^= a;
 80248c0:	781b      	ldrb	r3, [r3, #0]
    irq_fired = false;
 80248c2:	4d39      	ldr	r5, [pc, #228]	; (80249a8 <send_start+0x144>)
    rf12_crc = 0xFFFF;
 80248c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80248c8:	8032      	strh	r2, [r6, #0]
    rf12_crc = _crc16_update(rf12_crc, networkID);
 80248ca:	8832      	ldrh	r2, [r6, #0]
 80248cc:	b292      	uxth	r2, r2
    crc ^= a;
 80248ce:	405a      	eors	r2, r3
        crc = (crc & 1)
 80248d0:	0851      	lsrs	r1, r2, #1
 80248d2:	f24a 0301 	movw	r3, #40961	; 0xa001
 80248d6:	f012 0f01 	tst.w	r2, #1
 80248da:	ea81 0203 	eor.w	r2, r1, r3
 80248de:	bf08      	it	eq
 80248e0:	460a      	moveq	r2, r1
 80248e2:	0851      	lsrs	r1, r2, #1
 80248e4:	f012 0f01 	tst.w	r2, #1
 80248e8:	ea81 0203 	eor.w	r2, r1, r3
 80248ec:	bf18      	it	ne
 80248ee:	4611      	movne	r1, r2
 80248f0:	084a      	lsrs	r2, r1, #1
 80248f2:	f011 0f01 	tst.w	r1, #1
 80248f6:	ea82 0103 	eor.w	r1, r2, r3
 80248fa:	bf18      	it	ne
 80248fc:	460a      	movne	r2, r1
 80248fe:	0851      	lsrs	r1, r2, #1
 8024900:	f012 0f01 	tst.w	r2, #1
 8024904:	ea81 0203 	eor.w	r2, r1, r3
 8024908:	bf18      	it	ne
 802490a:	4611      	movne	r1, r2
 802490c:	084a      	lsrs	r2, r1, #1
 802490e:	f011 0f01 	tst.w	r1, #1
 8024912:	ea82 0103 	eor.w	r1, r2, r3
 8024916:	bf18      	it	ne
 8024918:	460a      	movne	r2, r1
 802491a:	0851      	lsrs	r1, r2, #1
 802491c:	f012 0f01 	tst.w	r2, #1
 8024920:	ea81 0203 	eor.w	r2, r1, r3
 8024924:	bf18      	it	ne
 8024926:	4611      	movne	r1, r2
 8024928:	084a      	lsrs	r2, r1, #1
 802492a:	f011 0f01 	tst.w	r1, #1
 802492e:	ea82 0103 	eor.w	r1, r2, r3
 8024932:	bf18      	it	ne
 8024934:	460a      	movne	r2, r1
 8024936:	0851      	lsrs	r1, r2, #1
 8024938:	f012 0f01 	tst.w	r2, #1
 802493c:	ea83 0301 	eor.w	r3, r3, r1
    irq_fired = false;
 8024940:	f04f 0200 	mov.w	r2, #0
 8024944:	bf08      	it	eq
 8024946:	460b      	moveq	r3, r1
    rfm12b_trx_2b(RFM12B_XMITTER_ON); // bytes will be fed via interrupts
 8024948:	f248 203d 	movw	r0, #33341	; 0x823d
    rxstate = TXPRE1;
 802494c:	2106      	movs	r1, #6
    rf12_crc = _crc16_update(rf12_crc, networkID);
 802494e:	8033      	strh	r3, [r6, #0]
    rxstate = TXPRE1;
 8024950:	7021      	strb	r1, [r4, #0]
    irq_fired = false;
 8024952:	702a      	strb	r2, [r5, #0]
    rfm12b_trx_2b(RFM12B_XMITTER_ON); // bytes will be fed via interrupts
 8024954:	f7ff fde2 	bl	802451c <rfm12b_trx_2b>
 8024958:	b91f      	cbnz	r7, 8024962 <send_start+0xfe>

    // wait for packet to actually finish sending
    // go into low power mode, as interrupts are going to come in very soon
    while(rxstate != TXIDLE)
 802495a:	7823      	ldrb	r3, [r4, #0]
 802495c:	2b04      	cmp	r3, #4
 802495e:	d1fc      	bne.n	802495a <send_start+0xf6>
 8024960:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8024962:	7823      	ldrb	r3, [r4, #0]
 8024964:	2b04      	cmp	r3, #4
 8024966:	d00d      	beq.n	8024984 <send_start+0x120>
            {
                asm("nop");
                if(to <  HAL_GetTick())
                {
                    debug("STUCK @0");
                    to = HAL_GetTick() + 500;
 8024968:	f7fc fb7e 	bl	8021068 <HAL_GetTick>
 802496c:	f500 76fa 	add.w	r6, r0, #500	; 0x1f4
 8024970:	e004      	b.n	802497c <send_start+0x118>
                asm("nop");
 8024972:	bf00      	nop
                if(to <  HAL_GetTick())
 8024974:	f7fc fb78 	bl	8021068 <HAL_GetTick>
 8024978:	4286      	cmp	r6, r0
 802497a:	d304      	bcc.n	8024986 <send_start+0x122>
            while(irq_fired == false)
 802497c:	782b      	ldrb	r3, [r5, #0]
 802497e:	2b00      	cmp	r3, #0
 8024980:	d0f7      	beq.n	8024972 <send_start+0x10e>
 8024982:	e7e9      	b.n	8024958 <send_start+0xf4>
 8024984:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                    debug("STUCK @0");
 8024986:	4809      	ldr	r0, [pc, #36]	; (80249ac <send_start+0x148>)
 8024988:	f7ff fc38 	bl	80241fc <debug>
 802498c:	e7ec      	b.n	8024968 <send_start+0x104>
 802498e:	bf00      	nop
 8024990:	20000470 	.word	0x20000470
 8024994:	20000468 	.word	0x20000468
 8024998:	2000046e 	.word	0x2000046e
 802499c:	200004f4 	.word	0x200004f4
 80249a0:	2000046d 	.word	0x2000046d
 80249a4:	20000010 	.word	0x20000010
 80249a8:	2000046c 	.word	0x2000046c
 80249ac:	08028530 	.word	0x08028530

080249b0 <rfm12b_get_sender>:
uint8_t rfm12b_get_sender(void) { return RF12_SOURCEID; }
 80249b0:	4b02      	ldr	r3, [pc, #8]	; (80249bc <rfm12b_get_sender+0xc>)
 80249b2:	7898      	ldrb	r0, [r3, #2]
 80249b4:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80249b8:	4770      	bx	lr
 80249ba:	bf00      	nop
 80249bc:	20000470 	.word	0x20000470

080249c0 <rfm12b_is_ack_requested>:
bool rfm12b_is_ack_requested(void) { return RF12_WANTS_ACK; }
 80249c0:	4b04      	ldr	r3, [pc, #16]	; (80249d4 <rfm12b_is_ack_requested+0x14>)
 80249c2:	789a      	ldrb	r2, [r3, #2]
 80249c4:	0612      	lsls	r2, r2, #24
 80249c6:	bf43      	ittte	mi
 80249c8:	7858      	ldrbmi	r0, [r3, #1]
 80249ca:	43c0      	mvnmi	r0, r0
 80249cc:	f3c0 10c0 	ubfxmi	r0, r0, #7, #1
 80249d0:	2000      	movpl	r0, #0
 80249d2:	4770      	bx	lr
 80249d4:	20000470 	.word	0x20000470

080249d8 <rfm12b_get_data_len>:
uint8_t rfm12b_get_data_len(void) { return rf12_buf[3]; }
 80249d8:	4b01      	ldr	r3, [pc, #4]	; (80249e0 <rfm12b_get_data_len+0x8>)
 80249da:	78d8      	ldrb	r0, [r3, #3]
 80249dc:	4770      	bx	lr
 80249de:	bf00      	nop
 80249e0:	20000470 	.word	0x20000470

080249e4 <rfm12b_get_data>:
volatile uint8_t *rfm12b_get_data(void) { return rf12_data; }
 80249e4:	4800      	ldr	r0, [pc, #0]	; (80249e8 <rfm12b_get_data+0x4>)
 80249e6:	4770      	bx	lr
 80249e8:	20000474 	.word	0x20000474

080249ec <rfm12b_is_crc_pass>:
bool rfm12b_is_crc_pass(void) { return rf12_crc == 0; }
 80249ec:	4b03      	ldr	r3, [pc, #12]	; (80249fc <rfm12b_is_crc_pass+0x10>)
 80249ee:	8818      	ldrh	r0, [r3, #0]
 80249f0:	b280      	uxth	r0, r0
 80249f2:	fab0 f080 	clz	r0, r0
 80249f6:	0940      	lsrs	r0, r0, #5
 80249f8:	4770      	bx	lr
 80249fa:	bf00      	nop
 80249fc:	200004f4 	.word	0x200004f4

08024a00 <rfm12b_encrypt>:
*       PUBLIC FUNCTIONS
* ==================================================================*/
void rfm12b_encrypt(const uint8_t *key, uint8_t key_len)
{
    // by using a pointer to CryptFunction, we only link it in when actually used
    if(key != 0)
 8024a00:	2800      	cmp	r0, #0
 8024a02:	d040      	beq.n	8024a86 <rfm12b_encrypt+0x86>
    {
        for(uint8_t i = 0; i < key_len; ++i)
 8024a04:	2900      	cmp	r1, #0
 8024a06:	d041      	beq.n	8024a8c <rfm12b_encrypt+0x8c>
{
 8024a08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024a0a:	4c22      	ldr	r4, [pc, #136]	; (8024a94 <rfm12b_encrypt+0x94>)
 8024a0c:	1d03      	adds	r3, r0, #4
 8024a0e:	1d22      	adds	r2, r4, #4
 8024a10:	4290      	cmp	r0, r2
 8024a12:	bf38      	it	cc
 8024a14:	429c      	cmpcc	r4, r3
 8024a16:	d327      	bcc.n	8024a68 <rfm12b_encrypt+0x68>
 8024a18:	2908      	cmp	r1, #8
 8024a1a:	d925      	bls.n	8024a68 <rfm12b_encrypt+0x68>
 8024a1c:	1f0a      	subs	r2, r1, #4
 8024a1e:	f3c2 0285 	ubfx	r2, r2, #2, #6
 8024a22:	3201      	adds	r2, #1
 8024a24:	0093      	lsls	r3, r2, #2
 8024a26:	b2db      	uxtb	r3, r3
 8024a28:	4607      	mov	r7, r0
        for(uint8_t i = 0; i < key_len; ++i)
 8024a2a:	2500      	movs	r5, #0
 8024a2c:	4626      	mov	r6, r4
 8024a2e:	3501      	adds	r5, #1
 8024a30:	fa5f fe85 	uxtb.w	lr, r5
            ((uint8_t *)crypt_key)[i] = key[i];
 8024a34:	f857 cb04 	ldr.w	ip, [r7], #4
 8024a38:	f846 cb04 	str.w	ip, [r6], #4
 8024a3c:	4572      	cmp	r2, lr
 8024a3e:	d8f6      	bhi.n	8024a2e <rfm12b_encrypt+0x2e>
 8024a40:	4299      	cmp	r1, r3
 8024a42:	d00d      	beq.n	8024a60 <rfm12b_encrypt+0x60>
        for(uint8_t i = 0; i < key_len; ++i)
 8024a44:	1c5a      	adds	r2, r3, #1
 8024a46:	b2d2      	uxtb	r2, r2
            ((uint8_t *)crypt_key)[i] = key[i];
 8024a48:	5cc5      	ldrb	r5, [r0, r3]
 8024a4a:	54e5      	strb	r5, [r4, r3]
        for(uint8_t i = 0; i < key_len; ++i)
 8024a4c:	4291      	cmp	r1, r2
 8024a4e:	d907      	bls.n	8024a60 <rfm12b_encrypt+0x60>
 8024a50:	3302      	adds	r3, #2
 8024a52:	b2db      	uxtb	r3, r3
            ((uint8_t *)crypt_key)[i] = key[i];
 8024a54:	5c85      	ldrb	r5, [r0, r2]
 8024a56:	54a5      	strb	r5, [r4, r2]
        for(uint8_t i = 0; i < key_len; ++i)
 8024a58:	4299      	cmp	r1, r3
 8024a5a:	d901      	bls.n	8024a60 <rfm12b_encrypt+0x60>
            ((uint8_t *)crypt_key)[i] = key[i];
 8024a5c:	5cc2      	ldrb	r2, [r0, r3]
 8024a5e:	54e2      	strb	r2, [r4, r3]
        crypter = _crypt_function;
 8024a60:	4b0d      	ldr	r3, [pc, #52]	; (8024a98 <rfm12b_encrypt+0x98>)
 8024a62:	4a0e      	ldr	r2, [pc, #56]	; (8024a9c <rfm12b_encrypt+0x9c>)
 8024a64:	601a      	str	r2, [r3, #0]
 8024a66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024a68:	3901      	subs	r1, #1
 8024a6a:	4b0a      	ldr	r3, [pc, #40]	; (8024a94 <rfm12b_encrypt+0x94>)
 8024a6c:	fa50 f181 	uxtab	r1, r0, r1
 8024a70:	3801      	subs	r0, #1
            ((uint8_t *)crypt_key)[i] = key[i];
 8024a72:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8024a76:	f803 2b01 	strb.w	r2, [r3], #1
        for(uint8_t i = 0; i < key_len; ++i)
 8024a7a:	4288      	cmp	r0, r1
 8024a7c:	d1f9      	bne.n	8024a72 <rfm12b_encrypt+0x72>
        crypter = _crypt_function;
 8024a7e:	4b06      	ldr	r3, [pc, #24]	; (8024a98 <rfm12b_encrypt+0x98>)
 8024a80:	4a06      	ldr	r2, [pc, #24]	; (8024a9c <rfm12b_encrypt+0x9c>)
 8024a82:	601a      	str	r2, [r3, #0]
 8024a84:	bdf0      	pop	{r4, r5, r6, r7, pc}
    }
    else
        crypter = 0;
 8024a86:	4b04      	ldr	r3, [pc, #16]	; (8024a98 <rfm12b_encrypt+0x98>)
 8024a88:	6018      	str	r0, [r3, #0]
}
 8024a8a:	4770      	bx	lr
        crypter = _crypt_function;
 8024a8c:	4b02      	ldr	r3, [pc, #8]	; (8024a98 <rfm12b_encrypt+0x98>)
 8024a8e:	4a03      	ldr	r2, [pc, #12]	; (8024a9c <rfm12b_encrypt+0x9c>)
 8024a90:	601a      	str	r2, [r3, #0]
 8024a92:	4770      	bx	lr
 8024a94:	20000458 	.word	0x20000458
 8024a98:	20000468 	.word	0x20000468
 8024a9c:	080245c5 	.word	0x080245c5

08024aa0 <rfm12b_init>:

    DELAY_US(150000);
}

void rfm12b_init(uint8_t sync_pattern, uint8_t ID)
{
 8024aa0:	b538      	push	{r3, r4, r5, lr}
    nodeID = ID;
 8024aa2:	4b32      	ldr	r3, [pc, #200]	; (8024b6c <rfm12b_init+0xcc>)

    RFM_SPI->CR1 |= SPI_CR1_SPE; // enable SPI
 8024aa4:	4a32      	ldr	r2, [pc, #200]	; (8024b70 <rfm12b_init+0xd0>)
    nodeID = ID;
 8024aa6:	7019      	strb	r1, [r3, #0]
    RFM_SPI->CR1 |= SPI_CR1_SPE; // enable SPI
 8024aa8:	6813      	ldr	r3, [r2, #0]
    PIN_SET(RFM_CS);
 8024aaa:	4932      	ldr	r1, [pc, #200]	; (8024b74 <rfm12b_init+0xd4>)
    RFM_SPI->CR1 |= SPI_CR1_SPE; // enable SPI
 8024aac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    PIN_SET(RFM_CS);
 8024ab0:	2504      	movs	r5, #4
    RFM_SPI->CR1 |= SPI_CR1_SPE; // enable SPI
 8024ab2:	6013      	str	r3, [r2, #0]
{
 8024ab4:	4604      	mov	r4, r0
    PIN_SET(RFM_CS);
 8024ab6:	618d      	str	r5, [r1, #24]
    HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 8024ab8:	2028      	movs	r0, #40	; 0x28
 8024aba:	f7fc fde9 	bl	8021690 <HAL_NVIC_DisableIRQ>
    rfm12b_trx_2b(0); // intitial SPI transfer added to avoid power-up problem
 8024abe:	2000      	movs	r0, #0
 8024ac0:	f7ff fd2c 	bl	802451c <rfm12b_trx_2b>
    rfm12b_trx_2b(RFM12B_SLEEP_MODE); // DC (disable clk pin), enable lbd
 8024ac4:	f248 2005 	movw	r0, #33285	; 0x8205
 8024ac8:	f7ff fd28 	bl	802451c <rfm12b_trx_2b>
    rfm12b_trx_2b(RFM12B_TXREG_WRITE); // in case we're still in OOK mode
 8024acc:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 8024ad0:	e000      	b.n	8024ad4 <rfm12b_init+0x34>
        rfm12b_trx_2b(0);
 8024ad2:	2000      	movs	r0, #0
    rfm12b_trx_2b(RFM12B_TXREG_WRITE); // in case we're still in OOK mode
 8024ad4:	f7ff fd22 	bl	802451c <rfm12b_trx_2b>
    while(PIN_GET(RFM_IRQ) == 0)
 8024ad8:	4b27      	ldr	r3, [pc, #156]	; (8024b78 <rfm12b_init+0xd8>)
 8024ada:	691b      	ldr	r3, [r3, #16]
 8024adc:	04db      	lsls	r3, r3, #19
 8024ade:	d5f8      	bpl.n	8024ad2 <rfm12b_init+0x32>
{
 8024ae0:	4b26      	ldr	r3, [pc, #152]	; (8024b7c <rfm12b_init+0xdc>)
    DELAY_US(150000);
 8024ae2:	bf00      	nop
 8024ae4:	3b01      	subs	r3, #1
 8024ae6:	d1fc      	bne.n	8024ae2 <rfm12b_init+0x42>
    __HAL_GPIO_EXTI_CLEAR_IT(RFM_IRQ_Pin);
 8024ae8:	4b25      	ldr	r3, [pc, #148]	; (8024b80 <rfm12b_init+0xe0>)
 8024aea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8024aee:	615a      	str	r2, [r3, #20]
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8024af0:	2028      	movs	r0, #40	; 0x28
 8024af2:	f7fc fdbf 	bl	8021674 <HAL_NVIC_EnableIRQ>
    networkID = sync_pattern;
 8024af6:	4b23      	ldr	r3, [pc, #140]	; (8024b84 <rfm12b_init+0xe4>)
    rfm12b_trx_2b(RFM12B_CMD_CONFIG |
 8024af8:	f248 00d7 	movw	r0, #32983	; 0x80d7
    networkID = sync_pattern;
 8024afc:	701c      	strb	r4, [r3, #0]
    rfm12b_trx_2b(RFM12B_CMD_CONFIG |
 8024afe:	f7ff fd0d 	bl	802451c <rfm12b_trx_2b>
    rfm12b_trx_2b(RFM12B_CMD_POWER |
 8024b02:	f248 2019 	movw	r0, #33305	; 0x8219
 8024b06:	f7ff fd09 	bl	802451c <rfm12b_trx_2b>
    rfm12b_trx_2b(RFM12B_CMD_FREQ |
 8024b0a:	f24a 6040 	movw	r0, #42560	; 0xa640
 8024b0e:	f7ff fd05 	bl	802451c <rfm12b_trx_2b>
    rfm12b_trx_2b(RFM12B_CMD_DATA_RATE |
 8024b12:	f24c 6008 	movw	r0, #50696	; 0xc608
 8024b16:	f7ff fd01 	bl	802451c <rfm12b_trx_2b>
    rfm12b_trx_2b(RFM12B_CMD_RX_CTRL |
 8024b1a:	f249 40a2 	movw	r0, #38050	; 0x94a2
 8024b1e:	f7ff fcfd 	bl	802451c <rfm12b_trx_2b>
    rfm12b_trx_2b(RFM12B_CMD_DATA_FILTER |
 8024b22:	f24c 20ac 	movw	r0, #49836	; 0xc2ac
 8024b26:	f7ff fcf9 	bl	802451c <rfm12b_trx_2b>
    rfm12b_trx_2b(RFM12B_CMD_FIFO_AND_RESET |
 8024b2a:	f64c 2083 	movw	r0, #51843	; 0xca83
 8024b2e:	f7ff fcf5 	bl	802451c <rfm12b_trx_2b>
    rfm12b_trx_2b(RFM12B_CMD_SYNC_PATTERN | sync_pattern);
 8024b32:	f444 404e 	orr.w	r0, r4, #52736	; 0xce00
 8024b36:	f7ff fcf1 	bl	802451c <rfm12b_trx_2b>
    rfm12b_trx_2b(RFM12B_CMD_AFC |
 8024b3a:	f24c 4083 	movw	r0, #50307	; 0xc483
 8024b3e:	f7ff fced 	bl	802451c <rfm12b_trx_2b>
    rfm12b_trx_2b(RFM12B_CMD_TX_CONFIG |
 8024b42:	f649 0050 	movw	r0, #38992	; 0x9850
 8024b46:	f7ff fce9 	bl	802451c <rfm12b_trx_2b>
    rfm12b_trx_2b(RF12B_WAKEUP_TIMER);
 8024b4a:	f44f 4060 	mov.w	r0, #57344	; 0xe000
 8024b4e:	f7ff fce5 	bl	802451c <rfm12b_trx_2b>
    rfm12b_trx_2b(0xC800); /* low duty cycle */
 8024b52:	f44f 4048 	mov.w	r0, #51200	; 0xc800
 8024b56:	f7ff fce1 	bl	802451c <rfm12b_trx_2b>
    rfm12b_trx_2b(RFM12B_CMD_MCU_CLK_DIV |
 8024b5a:	f24c 0040 	movw	r0, #49216	; 0xc040
 8024b5e:	f7ff fcdd 	bl	802451c <rfm12b_trx_2b>
 8024b62:	4b06      	ldr	r3, [pc, #24]	; (8024b7c <rfm12b_init+0xdc>)
    DELAY_US(150000);
 8024b64:	bf00      	nop
 8024b66:	3b01      	subs	r3, #1
 8024b68:	d1fc      	bne.n	8024b64 <rfm12b_init+0xc4>

    rfm12b_reset();
    rfm12b_config(sync_pattern);
}
 8024b6a:	bd38      	pop	{r3, r4, r5, pc}
 8024b6c:	2000046e 	.word	0x2000046e
 8024b70:	40003c00 	.word	0x40003c00
 8024b74:	40020c00 	.word	0x40020c00
 8024b78:	40020800 	.word	0x40020800
 8024b7c:	001b7740 	.word	0x001b7740
 8024b80:	40013c00 	.word	0x40013c00
 8024b84:	2000046d 	.word	0x2000046d

08024b88 <rfm12b_rx_complete>:
{
    rfm12b_trx_2b(RFM12B_IDLE_MODE);
}

bool rfm12b_rx_complete(void)
{
 8024b88:	b570      	push	{r4, r5, r6, lr}
    if(rxstate == TXRECV && (rxfill >= (uint8_t)(rf12_len + 6) || rxfill >= RF_MAX))
 8024b8a:	4b46      	ldr	r3, [pc, #280]	; (8024ca4 <rfm12b_rx_complete+0x11c>)
 8024b8c:	781a      	ldrb	r2, [r3, #0]
 8024b8e:	2a05      	cmp	r2, #5
 8024b90:	d057      	beq.n	8024c42 <rfm12b_rx_complete+0xba>
            else
                rf12_seq = -1;
            return true; // it's a broadcast packet or it's addressed to this node
        }
    }
    if(rxstate == TXIDLE)
 8024b92:	781a      	ldrb	r2, [r3, #0]
 8024b94:	2a04      	cmp	r2, #4
 8024b96:	d001      	beq.n	8024b9c <rfm12b_rx_complete+0x14>
        if(networkID != 0)
            rf12_crc = _crc16_update(0xFFFF, networkID);
        rxstate = TXRECV;
        rfm12b_trx_2b(RFM12B_RECEIVER_ON);
    }
    return false;
 8024b98:	2000      	movs	r0, #0
}
 8024b9a:	bd70      	pop	{r4, r5, r6, pc}
        if(networkID != 0)
 8024b9c:	4a42      	ldr	r2, [pc, #264]	; (8024ca8 <rfm12b_rx_complete+0x120>)
        rxfill = rf12_len = 0;
 8024b9e:	4e43      	ldr	r6, [pc, #268]	; (8024cac <rfm12b_rx_complete+0x124>)
 8024ba0:	4d43      	ldr	r5, [pc, #268]	; (8024cb0 <rfm12b_rx_complete+0x128>)
        if(networkID != 0)
 8024ba2:	7811      	ldrb	r1, [r2, #0]
        rf12_crc = 0xFFFF;
 8024ba4:	4c43      	ldr	r4, [pc, #268]	; (8024cb4 <rfm12b_rx_complete+0x12c>)
        rxfill = rf12_len = 0;
 8024ba6:	2200      	movs	r2, #0
        rf12_crc = 0xFFFF;
 8024ba8:	f64f 70ff 	movw	r0, #65535	; 0xffff
        rxfill = rf12_len = 0;
 8024bac:	70f2      	strb	r2, [r6, #3]
 8024bae:	702a      	strb	r2, [r5, #0]
        rf12_crc = 0xFFFF;
 8024bb0:	8020      	strh	r0, [r4, #0]
        if(networkID != 0)
 8024bb2:	b3f1      	cbz	r1, 8024c32 <rfm12b_rx_complete+0xaa>
    crc ^= a;
 8024bb4:	f481 417f 	eor.w	r1, r1, #65280	; 0xff00
 8024bb8:	f081 01ff 	eor.w	r1, r1, #255	; 0xff
        crc = (crc & 1)
 8024bbc:	f24a 0201 	movw	r2, #40961	; 0xa001
 8024bc0:	0848      	lsrs	r0, r1, #1
 8024bc2:	f011 0f01 	tst.w	r1, #1
 8024bc6:	ea80 0102 	eor.w	r1, r0, r2
 8024bca:	bf08      	it	eq
 8024bcc:	4601      	moveq	r1, r0
 8024bce:	0848      	lsrs	r0, r1, #1
 8024bd0:	f011 0f01 	tst.w	r1, #1
 8024bd4:	ea80 0102 	eor.w	r1, r0, r2
 8024bd8:	bf18      	it	ne
 8024bda:	4608      	movne	r0, r1
 8024bdc:	0841      	lsrs	r1, r0, #1
 8024bde:	f010 0f01 	tst.w	r0, #1
 8024be2:	ea81 0002 	eor.w	r0, r1, r2
 8024be6:	bf18      	it	ne
 8024be8:	4601      	movne	r1, r0
 8024bea:	0848      	lsrs	r0, r1, #1
 8024bec:	f011 0f01 	tst.w	r1, #1
 8024bf0:	ea80 0102 	eor.w	r1, r0, r2
 8024bf4:	bf18      	it	ne
 8024bf6:	4608      	movne	r0, r1
 8024bf8:	0841      	lsrs	r1, r0, #1
 8024bfa:	f010 0f01 	tst.w	r0, #1
 8024bfe:	ea81 0002 	eor.w	r0, r1, r2
 8024c02:	bf18      	it	ne
 8024c04:	4601      	movne	r1, r0
 8024c06:	0848      	lsrs	r0, r1, #1
 8024c08:	f011 0f01 	tst.w	r1, #1
 8024c0c:	ea80 0102 	eor.w	r1, r0, r2
 8024c10:	bf18      	it	ne
 8024c12:	4608      	movne	r0, r1
 8024c14:	0841      	lsrs	r1, r0, #1
 8024c16:	f010 0f01 	tst.w	r0, #1
 8024c1a:	ea81 0002 	eor.w	r0, r1, r2
 8024c1e:	bf18      	it	ne
 8024c20:	4601      	movne	r1, r0
 8024c22:	0848      	lsrs	r0, r1, #1
 8024c24:	f011 0f01 	tst.w	r1, #1
 8024c28:	ea82 0200 	eor.w	r2, r2, r0
 8024c2c:	bf08      	it	eq
 8024c2e:	4602      	moveq	r2, r0
            rf12_crc = _crc16_update(0xFFFF, networkID);
 8024c30:	8022      	strh	r2, [r4, #0]
        rxstate = TXRECV;
 8024c32:	2205      	movs	r2, #5
        rfm12b_trx_2b(RFM12B_RECEIVER_ON);
 8024c34:	f248 20dd 	movw	r0, #33501	; 0x82dd
        rxstate = TXRECV;
 8024c38:	701a      	strb	r2, [r3, #0]
        rfm12b_trx_2b(RFM12B_RECEIVER_ON);
 8024c3a:	f7ff fc6f 	bl	802451c <rfm12b_trx_2b>
    return false;
 8024c3e:	2000      	movs	r0, #0
 8024c40:	bd70      	pop	{r4, r5, r6, pc}
    if(rxstate == TXRECV && (rxfill >= (uint8_t)(rf12_len + 6) || rxfill >= RF_MAX))
 8024c42:	491a      	ldr	r1, [pc, #104]	; (8024cac <rfm12b_rx_complete+0x124>)
 8024c44:	481a      	ldr	r0, [pc, #104]	; (8024cb0 <rfm12b_rx_complete+0x128>)
 8024c46:	78ca      	ldrb	r2, [r1, #3]
 8024c48:	7804      	ldrb	r4, [r0, #0]
 8024c4a:	3206      	adds	r2, #6
 8024c4c:	b2d2      	uxtb	r2, r2
 8024c4e:	42a2      	cmp	r2, r4
 8024c50:	d814      	bhi.n	8024c7c <rfm12b_rx_complete+0xf4>
        rxstate = TXIDLE;
 8024c52:	2204      	movs	r2, #4
 8024c54:	701a      	strb	r2, [r3, #0]
        if(rf12_len > RF12_MAXDATA)
 8024c56:	78ca      	ldrb	r2, [r1, #3]
 8024c58:	2a80      	cmp	r2, #128	; 0x80
 8024c5a:	d902      	bls.n	8024c62 <rfm12b_rx_complete+0xda>
            rf12_crc = 1; // force bad crc if packet length is invalid
 8024c5c:	4a15      	ldr	r2, [pc, #84]	; (8024cb4 <rfm12b_rx_complete+0x12c>)
 8024c5e:	2001      	movs	r0, #1
 8024c60:	8010      	strh	r0, [r2, #0]
        if(RF12_DESTID == 0 || RF12_DESTID == nodeID)
 8024c62:	784a      	ldrb	r2, [r1, #1]
 8024c64:	0652      	lsls	r2, r2, #25
 8024c66:	d10d      	bne.n	8024c84 <rfm12b_rx_complete+0xfc>
            if(rf12_crc == 0 && crypter != 0)
 8024c68:	4b12      	ldr	r3, [pc, #72]	; (8024cb4 <rfm12b_rx_complete+0x12c>)
 8024c6a:	8818      	ldrh	r0, [r3, #0]
 8024c6c:	b280      	uxth	r0, r0
 8024c6e:	b990      	cbnz	r0, 8024c96 <rfm12b_rx_complete+0x10e>
 8024c70:	4b11      	ldr	r3, [pc, #68]	; (8024cb8 <rfm12b_rx_complete+0x130>)
 8024c72:	681b      	ldr	r3, [r3, #0]
 8024c74:	b17b      	cbz	r3, 8024c96 <rfm12b_rx_complete+0x10e>
                crypter(false);
 8024c76:	4798      	blx	r3
            return true; // it's a broadcast packet or it's addressed to this node
 8024c78:	2001      	movs	r0, #1
                crypter(false);
 8024c7a:	bd70      	pop	{r4, r5, r6, pc}
    if(rxstate == TXRECV && (rxfill >= (uint8_t)(rf12_len + 6) || rxfill >= RF_MAX))
 8024c7c:	7802      	ldrb	r2, [r0, #0]
 8024c7e:	2a85      	cmp	r2, #133	; 0x85
 8024c80:	d987      	bls.n	8024b92 <rfm12b_rx_complete+0xa>
 8024c82:	e7e6      	b.n	8024c52 <rfm12b_rx_complete+0xca>
        if(RF12_DESTID == 0 || RF12_DESTID == nodeID)
 8024c84:	480d      	ldr	r0, [pc, #52]	; (8024cbc <rfm12b_rx_complete+0x134>)
 8024c86:	784a      	ldrb	r2, [r1, #1]
 8024c88:	7801      	ldrb	r1, [r0, #0]
 8024c8a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8024c8e:	4291      	cmp	r1, r2
 8024c90:	f47f af7f 	bne.w	8024b92 <rfm12b_rx_complete+0xa>
 8024c94:	e7e8      	b.n	8024c68 <rfm12b_rx_complete+0xe0>
                rf12_seq = -1;
 8024c96:	4b0a      	ldr	r3, [pc, #40]	; (8024cc0 <rfm12b_rx_complete+0x138>)
 8024c98:	f04f 32ff 	mov.w	r2, #4294967295
 8024c9c:	601a      	str	r2, [r3, #0]
            return true; // it's a broadcast packet or it's addressed to this node
 8024c9e:	2001      	movs	r0, #1
 8024ca0:	bd70      	pop	{r4, r5, r6, pc}
 8024ca2:	bf00      	nop
 8024ca4:	20000010 	.word	0x20000010
 8024ca8:	2000046d 	.word	0x2000046d
 8024cac:	20000470 	.word	0x20000470
 8024cb0:	200004fc 	.word	0x200004fc
 8024cb4:	200004f4 	.word	0x200004f4
 8024cb8:	20000468 	.word	0x20000468
 8024cbc:	2000046e 	.word	0x2000046e
 8024cc0:	200004f8 	.word	0x200004f8

08024cc4 <rfm12b_send>:

void rfm12b_send(uint8_t to_node_id, const void *data, uint8_t data_len, bool request_ack, bool is_sleep)
{
 8024cc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024cc8:	b085      	sub	sp, #20
 8024cca:	469a      	mov	sl, r3
 8024ccc:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 8024cd0:	9303      	str	r3, [sp, #12]
 8024cd2:	4680      	mov	r8, r0
 8024cd4:	468b      	mov	fp, r1
 8024cd6:	4691      	mov	r9, r2
    uint32_t to = HAL_GetTick()+ 500;
 8024cd8:	f7fc f9c6 	bl	8021068 <HAL_GetTick>
 8024cdc:	4c78      	ldr	r4, [pc, #480]	; (8024ec0 <rfm12b_send+0x1fc>)
 8024cde:	4d79      	ldr	r5, [pc, #484]	; (8024ec4 <rfm12b_send+0x200>)
 8024ce0:	f500 76fa 	add.w	r6, r0, #500	; 0x1f4
    
    while(!can_send())
 8024ce4:	e00b      	b.n	8024cfe <rfm12b_send+0x3a>
    if(rxstate == TXRECV && (rxfill >= (uint8_t)(rf12_len + 6) || rxfill >= RF_MAX))
 8024ce6:	7823      	ldrb	r3, [r4, #0]
 8024ce8:	2b05      	cmp	r3, #5
 8024cea:	f000 80bd 	beq.w	8024e68 <rfm12b_send+0x1a4>
    if(rxstate == TXIDLE)
 8024cee:	7823      	ldrb	r3, [r4, #0]
 8024cf0:	2b04      	cmp	r3, #4
 8024cf2:	d05d      	beq.n	8024db0 <rfm12b_send+0xec>
    {
        rfm12b_rx_complete();
        if(to <  HAL_GetTick())
 8024cf4:	f7fc f9b8 	bl	8021068 <HAL_GetTick>
 8024cf8:	42b0      	cmp	r0, r6
 8024cfa:	f200 80ad 	bhi.w	8024e58 <rfm12b_send+0x194>
    if(rxstate == TXRECV && rxfill == 0 && (rfm12b_trx_1b(0x00) & (RFM12B_RSSI_BIT >> 8)) == 0)
 8024cfe:	7823      	ldrb	r3, [r4, #0]
 8024d00:	2b05      	cmp	r3, #5
 8024d02:	d1f0      	bne.n	8024ce6 <rfm12b_send+0x22>
 8024d04:	782b      	ldrb	r3, [r5, #0]
 8024d06:	2b00      	cmp	r3, #0
 8024d08:	d1ed      	bne.n	8024ce6 <rfm12b_send+0x22>
  __ASM volatile ("cpsid i" : : : "memory");
 8024d0a:	b672      	cpsid	i
    PIN_CLR(RFM_CS);
 8024d0c:	4b6e      	ldr	r3, [pc, #440]	; (8024ec8 <rfm12b_send+0x204>)
 8024d0e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8024d12:	619a      	str	r2, [r3, #24]
    DELAY_US(1);
 8024d14:	bf00      	nop
 8024d16:	bf00      	nop
 8024d18:	bf00      	nop
 8024d1a:	bf00      	nop
 8024d1c:	bf00      	nop
 8024d1e:	bf00      	nop
 8024d20:	bf00      	nop
 8024d22:	bf00      	nop
 8024d24:	bf00      	nop
 8024d26:	bf00      	nop
 8024d28:	bf00      	nop
    S_WB();
 8024d2a:	bf00      	nop
 8024d2c:	4b67      	ldr	r3, [pc, #412]	; (8024ecc <rfm12b_send+0x208>)
 8024d2e:	689b      	ldr	r3, [r3, #8]
 8024d30:	0618      	lsls	r0, r3, #24
 8024d32:	d4fa      	bmi.n	8024d2a <rfm12b_send+0x66>
    S_DT(byte);
 8024d34:	bf00      	nop
 8024d36:	4b65      	ldr	r3, [pc, #404]	; (8024ecc <rfm12b_send+0x208>)
 8024d38:	2200      	movs	r2, #0
 8024d3a:	60da      	str	r2, [r3, #12]
 8024d3c:	bf00      	nop
    S_WT();
 8024d3e:	689b      	ldr	r3, [r3, #8]
 8024d40:	0799      	lsls	r1, r3, #30
 8024d42:	d409      	bmi.n	8024d58 <rfm12b_send+0x94>
 8024d44:	bf00      	nop
 8024d46:	4b61      	ldr	r3, [pc, #388]	; (8024ecc <rfm12b_send+0x208>)
 8024d48:	689b      	ldr	r3, [r3, #8]
 8024d4a:	079a      	lsls	r2, r3, #30
 8024d4c:	d5fa      	bpl.n	8024d44 <rfm12b_send+0x80>
    S_WR();
 8024d4e:	4b5f      	ldr	r3, [pc, #380]	; (8024ecc <rfm12b_send+0x208>)
 8024d50:	689b      	ldr	r3, [r3, #8]
 8024d52:	07db      	lsls	r3, r3, #31
 8024d54:	d404      	bmi.n	8024d60 <rfm12b_send+0x9c>
 8024d56:	bf00      	nop
 8024d58:	4b5c      	ldr	r3, [pc, #368]	; (8024ecc <rfm12b_send+0x208>)
 8024d5a:	689b      	ldr	r3, [r3, #8]
 8024d5c:	07db      	lsls	r3, r3, #31
 8024d5e:	d5fa      	bpl.n	8024d56 <rfm12b_send+0x92>
    PIN_SET(RFM_CS);
 8024d60:	4a59      	ldr	r2, [pc, #356]	; (8024ec8 <rfm12b_send+0x204>)
    S_DR(rx);
 8024d62:	4b5a      	ldr	r3, [pc, #360]	; (8024ecc <rfm12b_send+0x208>)
    PIN_SET(RFM_CS);
 8024d64:	2704      	movs	r7, #4
    S_DR(rx);
 8024d66:	68db      	ldr	r3, [r3, #12]
    PIN_SET(RFM_CS);
 8024d68:	6197      	str	r7, [r2, #24]
    DELAY_US(1);
 8024d6a:	bf00      	nop
 8024d6c:	bf00      	nop
 8024d6e:	bf00      	nop
 8024d70:	bf00      	nop
 8024d72:	bf00      	nop
 8024d74:	bf00      	nop
 8024d76:	bf00      	nop
 8024d78:	bf00      	nop
 8024d7a:	bf00      	nop
 8024d7c:	bf00      	nop
 8024d7e:	bf00      	nop
 8024d80:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 8024d82:	b662      	cpsie	i
    if(rxstate == TXRECV && rxfill == 0 && (rfm12b_trx_1b(0x00) & (RFM12B_RSSI_BIT >> 8)) == 0)
 8024d84:	f013 0301 	ands.w	r3, r3, #1
 8024d88:	d1ad      	bne.n	8024ce6 <rfm12b_send+0x22>
        rfm12b_trx_2b(RFM12B_IDLE_MODE); // stop receiver
 8024d8a:	f248 200d 	movw	r0, #33293	; 0x820d
 8024d8e:	9302      	str	r3, [sp, #8]
 8024d90:	f7ff fbc4 	bl	802451c <rfm12b_trx_2b>
            debug("Stuck @1");
            to = HAL_GetTick() + 500; 
        }
    }

    send_start(to_node_id, data, data_len, request_ack, false, is_sleep);
 8024d94:	9b03      	ldr	r3, [sp, #12]
 8024d96:	9301      	str	r3, [sp, #4]
 8024d98:	9b02      	ldr	r3, [sp, #8]
 8024d9a:	9300      	str	r3, [sp, #0]
 8024d9c:	464a      	mov	r2, r9
 8024d9e:	4653      	mov	r3, sl
 8024da0:	4659      	mov	r1, fp
 8024da2:	4640      	mov	r0, r8
        rxstate = TXIDLE;
 8024da4:	7027      	strb	r7, [r4, #0]
    send_start(to_node_id, data, data_len, request_ack, false, is_sleep);
 8024da6:	f7ff fd5d 	bl	8024864 <send_start>
} 
 8024daa:	b005      	add	sp, #20
 8024dac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(networkID != 0)
 8024db0:	4b47      	ldr	r3, [pc, #284]	; (8024ed0 <rfm12b_send+0x20c>)
        rxfill = rf12_len = 0;
 8024db2:	4f48      	ldr	r7, [pc, #288]	; (8024ed4 <rfm12b_send+0x210>)
        rf12_crc = 0xFFFF;
 8024db4:	4a48      	ldr	r2, [pc, #288]	; (8024ed8 <rfm12b_send+0x214>)
        if(networkID != 0)
 8024db6:	781b      	ldrb	r3, [r3, #0]
        rxfill = rf12_len = 0;
 8024db8:	2100      	movs	r1, #0
        rf12_crc = 0xFFFF;
 8024dba:	f64f 70ff 	movw	r0, #65535	; 0xffff
        rxfill = rf12_len = 0;
 8024dbe:	70f9      	strb	r1, [r7, #3]
 8024dc0:	7029      	strb	r1, [r5, #0]
        rf12_crc = 0xFFFF;
 8024dc2:	8010      	strh	r0, [r2, #0]
        if(networkID != 0)
 8024dc4:	2b00      	cmp	r3, #0
 8024dc6:	d03c      	beq.n	8024e42 <rfm12b_send+0x17e>
    crc ^= a;
 8024dc8:	f483 437f 	eor.w	r3, r3, #65280	; 0xff00
 8024dcc:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
        crc = (crc & 1)
 8024dd0:	07d9      	lsls	r1, r3, #31
 8024dd2:	bf46      	itte	mi
 8024dd4:	f24a 0101 	movwmi	r1, #40961	; 0xa001
 8024dd8:	ea81 0353 	eormi.w	r3, r1, r3, lsr #1
 8024ddc:	085b      	lsrpl	r3, r3, #1
 8024dde:	07df      	lsls	r7, r3, #31
 8024de0:	bf46      	itte	mi
 8024de2:	f24a 0101 	movwmi	r1, #40961	; 0xa001
 8024de6:	ea81 0353 	eormi.w	r3, r1, r3, lsr #1
 8024dea:	085b      	lsrpl	r3, r3, #1
 8024dec:	07d8      	lsls	r0, r3, #31
 8024dee:	bf46      	itte	mi
 8024df0:	f24a 0101 	movwmi	r1, #40961	; 0xa001
 8024df4:	ea81 0353 	eormi.w	r3, r1, r3, lsr #1
 8024df8:	085b      	lsrpl	r3, r3, #1
 8024dfa:	07d9      	lsls	r1, r3, #31
 8024dfc:	bf46      	itte	mi
 8024dfe:	f24a 0101 	movwmi	r1, #40961	; 0xa001
 8024e02:	ea81 0353 	eormi.w	r3, r1, r3, lsr #1
 8024e06:	085b      	lsrpl	r3, r3, #1
 8024e08:	07df      	lsls	r7, r3, #31
 8024e0a:	bf46      	itte	mi
 8024e0c:	f24a 0101 	movwmi	r1, #40961	; 0xa001
 8024e10:	ea81 0353 	eormi.w	r3, r1, r3, lsr #1
 8024e14:	085b      	lsrpl	r3, r3, #1
 8024e16:	07d8      	lsls	r0, r3, #31
 8024e18:	bf46      	itte	mi
 8024e1a:	f24a 0101 	movwmi	r1, #40961	; 0xa001
 8024e1e:	ea81 0353 	eormi.w	r3, r1, r3, lsr #1
 8024e22:	085b      	lsrpl	r3, r3, #1
 8024e24:	07d9      	lsls	r1, r3, #31
 8024e26:	bf46      	itte	mi
 8024e28:	f24a 0101 	movwmi	r1, #40961	; 0xa001
 8024e2c:	ea81 0353 	eormi.w	r3, r1, r3, lsr #1
 8024e30:	085b      	lsrpl	r3, r3, #1
 8024e32:	07df      	lsls	r7, r3, #31
 8024e34:	bf4a      	itet	mi
 8024e36:	f24a 0101 	movwmi	r1, #40961	; 0xa001
 8024e3a:	085b      	lsrpl	r3, r3, #1
 8024e3c:	ea81 0353 	eormi.w	r3, r1, r3, lsr #1
            rf12_crc = _crc16_update(0xFFFF, networkID);
 8024e40:	8013      	strh	r3, [r2, #0]
        rxstate = TXRECV;
 8024e42:	2305      	movs	r3, #5
        rfm12b_trx_2b(RFM12B_RECEIVER_ON);
 8024e44:	f248 20dd 	movw	r0, #33501	; 0x82dd
        rxstate = TXRECV;
 8024e48:	7023      	strb	r3, [r4, #0]
        rfm12b_trx_2b(RFM12B_RECEIVER_ON);
 8024e4a:	f7ff fb67 	bl	802451c <rfm12b_trx_2b>
        if(to <  HAL_GetTick())
 8024e4e:	f7fc f90b 	bl	8021068 <HAL_GetTick>
 8024e52:	42b0      	cmp	r0, r6
 8024e54:	f67f af53 	bls.w	8024cfe <rfm12b_send+0x3a>
            debug("Stuck @1");
 8024e58:	4820      	ldr	r0, [pc, #128]	; (8024edc <rfm12b_send+0x218>)
 8024e5a:	f7ff f9cf 	bl	80241fc <debug>
            to = HAL_GetTick() + 500; 
 8024e5e:	f7fc f903 	bl	8021068 <HAL_GetTick>
 8024e62:	f500 76fa 	add.w	r6, r0, #500	; 0x1f4
 8024e66:	e74a      	b.n	8024cfe <rfm12b_send+0x3a>
    if(rxstate == TXRECV && (rxfill >= (uint8_t)(rf12_len + 6) || rxfill >= RF_MAX))
 8024e68:	4a1a      	ldr	r2, [pc, #104]	; (8024ed4 <rfm12b_send+0x210>)
 8024e6a:	78d3      	ldrb	r3, [r2, #3]
 8024e6c:	7829      	ldrb	r1, [r5, #0]
 8024e6e:	3306      	adds	r3, #6
 8024e70:	b2db      	uxtb	r3, r3
 8024e72:	428b      	cmp	r3, r1
 8024e74:	d903      	bls.n	8024e7e <rfm12b_send+0x1ba>
 8024e76:	782b      	ldrb	r3, [r5, #0]
 8024e78:	2b85      	cmp	r3, #133	; 0x85
 8024e7a:	f67f af38 	bls.w	8024cee <rfm12b_send+0x2a>
        rxstate = TXIDLE;
 8024e7e:	2304      	movs	r3, #4
 8024e80:	7023      	strb	r3, [r4, #0]
        if(rf12_len > RF12_MAXDATA)
 8024e82:	78d3      	ldrb	r3, [r2, #3]
 8024e84:	2b80      	cmp	r3, #128	; 0x80
 8024e86:	d902      	bls.n	8024e8e <rfm12b_send+0x1ca>
            rf12_crc = 1; // force bad crc if packet length is invalid
 8024e88:	4b13      	ldr	r3, [pc, #76]	; (8024ed8 <rfm12b_send+0x214>)
 8024e8a:	2101      	movs	r1, #1
 8024e8c:	8019      	strh	r1, [r3, #0]
        if(RF12_DESTID == 0 || RF12_DESTID == nodeID)
 8024e8e:	7853      	ldrb	r3, [r2, #1]
 8024e90:	0658      	lsls	r0, r3, #25
 8024e92:	d007      	beq.n	8024ea4 <rfm12b_send+0x1e0>
 8024e94:	4912      	ldr	r1, [pc, #72]	; (8024ee0 <rfm12b_send+0x21c>)
 8024e96:	7853      	ldrb	r3, [r2, #1]
 8024e98:	780a      	ldrb	r2, [r1, #0]
 8024e9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8024e9e:	429a      	cmp	r2, r3
 8024ea0:	f47f af25 	bne.w	8024cee <rfm12b_send+0x2a>
            if(rf12_crc == 0 && crypter != 0)
 8024ea4:	4b0c      	ldr	r3, [pc, #48]	; (8024ed8 <rfm12b_send+0x214>)
 8024ea6:	8818      	ldrh	r0, [r3, #0]
 8024ea8:	b280      	uxth	r0, r0
 8024eaa:	b920      	cbnz	r0, 8024eb6 <rfm12b_send+0x1f2>
 8024eac:	4b0d      	ldr	r3, [pc, #52]	; (8024ee4 <rfm12b_send+0x220>)
 8024eae:	681b      	ldr	r3, [r3, #0]
 8024eb0:	b10b      	cbz	r3, 8024eb6 <rfm12b_send+0x1f2>
                crypter(false);
 8024eb2:	4798      	blx	r3
 8024eb4:	e71e      	b.n	8024cf4 <rfm12b_send+0x30>
                rf12_seq = -1;
 8024eb6:	4b0c      	ldr	r3, [pc, #48]	; (8024ee8 <rfm12b_send+0x224>)
 8024eb8:	f04f 32ff 	mov.w	r2, #4294967295
 8024ebc:	601a      	str	r2, [r3, #0]
 8024ebe:	e719      	b.n	8024cf4 <rfm12b_send+0x30>
 8024ec0:	20000010 	.word	0x20000010
 8024ec4:	200004fc 	.word	0x200004fc
 8024ec8:	40020c00 	.word	0x40020c00
 8024ecc:	40003c00 	.word	0x40003c00
 8024ed0:	2000046d 	.word	0x2000046d
 8024ed4:	20000470 	.word	0x20000470
 8024ed8:	200004f4 	.word	0x200004f4
 8024edc:	08028518 	.word	0x08028518
 8024ee0:	2000046e 	.word	0x2000046e
 8024ee4:	20000468 	.word	0x20000468
 8024ee8:	200004f8 	.word	0x200004f8

08024eec <rfm12b_sendACK>:

void rfm12b_sendACK(const void *data, uint8_t data_len, bool is_sleep)
{
 8024eec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024ef0:	b085      	sub	sp, #20
 8024ef2:	4688      	mov	r8, r1
 8024ef4:	9003      	str	r0, [sp, #12]
 8024ef6:	4691      	mov	r9, r2
    uint32_t to = HAL_GetTick()+ 500;
 8024ef8:	f7fc f8b6 	bl	8021068 <HAL_GetTick>
 8024efc:	f8df a218 	ldr.w	sl, [pc, #536]	; 8025118 <rfm12b_sendACK+0x22c>
 8024f00:	4c7b      	ldr	r4, [pc, #492]	; (80250f0 <rfm12b_sendACK+0x204>)
 8024f02:	4d7c      	ldr	r5, [pc, #496]	; (80250f4 <rfm12b_sendACK+0x208>)
 8024f04:	f500 76fa 	add.w	r6, r0, #500	; 0x1f4
    
    while(!can_send())
 8024f08:	e00d      	b.n	8024f26 <rfm12b_sendACK+0x3a>
    if(rxstate == TXRECV && (rxfill >= (uint8_t)(rf12_len + 6) || rxfill >= RF_MAX))
 8024f0a:	f89a 3000 	ldrb.w	r3, [sl]
 8024f0e:	2b05      	cmp	r3, #5
 8024f10:	f000 80c1 	beq.w	8025096 <rfm12b_sendACK+0x1aa>
    if(rxstate == TXIDLE)
 8024f14:	f89a 3000 	ldrb.w	r3, [sl]
 8024f18:	2b04      	cmp	r3, #4
 8024f1a:	d060      	beq.n	8024fde <rfm12b_sendACK+0xf2>
    {
        rfm12b_rx_complete();
        if(to <  HAL_GetTick())
 8024f1c:	f7fc f8a4 	bl	8021068 <HAL_GetTick>
 8024f20:	42b0      	cmp	r0, r6
 8024f22:	f200 80b0 	bhi.w	8025086 <rfm12b_sendACK+0x19a>
    if(rxstate == TXRECV && rxfill == 0 && (rfm12b_trx_1b(0x00) & (RFM12B_RSSI_BIT >> 8)) == 0)
 8024f26:	f89a 3000 	ldrb.w	r3, [sl]
 8024f2a:	2b05      	cmp	r3, #5
 8024f2c:	d1ed      	bne.n	8024f0a <rfm12b_sendACK+0x1e>
 8024f2e:	782b      	ldrb	r3, [r5, #0]
 8024f30:	2b00      	cmp	r3, #0
 8024f32:	d1ea      	bne.n	8024f0a <rfm12b_sendACK+0x1e>
  __ASM volatile ("cpsid i" : : : "memory");
 8024f34:	b672      	cpsid	i
    PIN_CLR(RFM_CS);
 8024f36:	4b70      	ldr	r3, [pc, #448]	; (80250f8 <rfm12b_sendACK+0x20c>)
 8024f38:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8024f3c:	619a      	str	r2, [r3, #24]
    DELAY_US(1);
 8024f3e:	bf00      	nop
 8024f40:	bf00      	nop
 8024f42:	bf00      	nop
 8024f44:	bf00      	nop
 8024f46:	bf00      	nop
 8024f48:	bf00      	nop
 8024f4a:	bf00      	nop
 8024f4c:	bf00      	nop
 8024f4e:	bf00      	nop
 8024f50:	bf00      	nop
 8024f52:	bf00      	nop
    S_WB();
 8024f54:	bf00      	nop
 8024f56:	4b69      	ldr	r3, [pc, #420]	; (80250fc <rfm12b_sendACK+0x210>)
 8024f58:	689b      	ldr	r3, [r3, #8]
 8024f5a:	0618      	lsls	r0, r3, #24
 8024f5c:	d4fa      	bmi.n	8024f54 <rfm12b_sendACK+0x68>
    S_DT(byte);
 8024f5e:	bf00      	nop
 8024f60:	4b66      	ldr	r3, [pc, #408]	; (80250fc <rfm12b_sendACK+0x210>)
 8024f62:	2200      	movs	r2, #0
 8024f64:	60da      	str	r2, [r3, #12]
 8024f66:	bf00      	nop
    S_WT();
 8024f68:	689b      	ldr	r3, [r3, #8]
 8024f6a:	0799      	lsls	r1, r3, #30
 8024f6c:	d409      	bmi.n	8024f82 <rfm12b_sendACK+0x96>
 8024f6e:	bf00      	nop
 8024f70:	4b62      	ldr	r3, [pc, #392]	; (80250fc <rfm12b_sendACK+0x210>)
 8024f72:	689b      	ldr	r3, [r3, #8]
 8024f74:	079a      	lsls	r2, r3, #30
 8024f76:	d5fa      	bpl.n	8024f6e <rfm12b_sendACK+0x82>
    S_WR();
 8024f78:	4b60      	ldr	r3, [pc, #384]	; (80250fc <rfm12b_sendACK+0x210>)
 8024f7a:	689b      	ldr	r3, [r3, #8]
 8024f7c:	07db      	lsls	r3, r3, #31
 8024f7e:	d404      	bmi.n	8024f8a <rfm12b_sendACK+0x9e>
 8024f80:	bf00      	nop
 8024f82:	4b5e      	ldr	r3, [pc, #376]	; (80250fc <rfm12b_sendACK+0x210>)
 8024f84:	689b      	ldr	r3, [r3, #8]
 8024f86:	07db      	lsls	r3, r3, #31
 8024f88:	d5fa      	bpl.n	8024f80 <rfm12b_sendACK+0x94>
    PIN_SET(RFM_CS);
 8024f8a:	495b      	ldr	r1, [pc, #364]	; (80250f8 <rfm12b_sendACK+0x20c>)
    S_DR(rx);
 8024f8c:	4b5b      	ldr	r3, [pc, #364]	; (80250fc <rfm12b_sendACK+0x210>)
    PIN_SET(RFM_CS);
 8024f8e:	2704      	movs	r7, #4
    S_DR(rx);
 8024f90:	68db      	ldr	r3, [r3, #12]
    PIN_SET(RFM_CS);
 8024f92:	618f      	str	r7, [r1, #24]
    DELAY_US(1);
 8024f94:	bf00      	nop
 8024f96:	bf00      	nop
 8024f98:	bf00      	nop
 8024f9a:	bf00      	nop
 8024f9c:	bf00      	nop
 8024f9e:	bf00      	nop
 8024fa0:	bf00      	nop
 8024fa2:	bf00      	nop
 8024fa4:	bf00      	nop
 8024fa6:	bf00      	nop
 8024fa8:	bf00      	nop
 8024faa:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 8024fac:	b662      	cpsie	i
    if(rxstate == TXRECV && rxfill == 0 && (rfm12b_trx_1b(0x00) & (RFM12B_RSSI_BIT >> 8)) == 0)
 8024fae:	f013 0b01 	ands.w	fp, r3, #1
 8024fb2:	d1aa      	bne.n	8024f0a <rfm12b_sendACK+0x1e>
        rfm12b_trx_2b(RFM12B_IDLE_MODE); // stop receiver
 8024fb4:	f248 200d 	movw	r0, #33293	; 0x820d
 8024fb8:	f7ff fab0 	bl	802451c <rfm12b_trx_2b>
        rxstate = TXIDLE;
 8024fbc:	f88a 7000 	strb.w	r7, [sl]
            debug("Stuck @2");
            to = HAL_GetTick() + 500; 
        }
    }

    send_start(RF12_SOURCEID, data, data_len, false, true, is_sleep);
 8024fc0:	78a0      	ldrb	r0, [r4, #2]
 8024fc2:	9903      	ldr	r1, [sp, #12]
 8024fc4:	f8cd 9004 	str.w	r9, [sp, #4]
 8024fc8:	2401      	movs	r4, #1
 8024fca:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8024fce:	465b      	mov	r3, fp
 8024fd0:	4642      	mov	r2, r8
 8024fd2:	9400      	str	r4, [sp, #0]
 8024fd4:	f7ff fc46 	bl	8024864 <send_start>
}
 8024fd8:	b005      	add	sp, #20
 8024fda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(networkID != 0)
 8024fde:	4b48      	ldr	r3, [pc, #288]	; (8025100 <rfm12b_sendACK+0x214>)
        rf12_crc = 0xFFFF;
 8024fe0:	4a48      	ldr	r2, [pc, #288]	; (8025104 <rfm12b_sendACK+0x218>)
        if(networkID != 0)
 8024fe2:	781b      	ldrb	r3, [r3, #0]
        rxfill = rf12_len = 0;
 8024fe4:	2100      	movs	r1, #0
        rf12_crc = 0xFFFF;
 8024fe6:	f64f 70ff 	movw	r0, #65535	; 0xffff
        rxfill = rf12_len = 0;
 8024fea:	70e1      	strb	r1, [r4, #3]
 8024fec:	7029      	strb	r1, [r5, #0]
        rf12_crc = 0xFFFF;
 8024fee:	8010      	strh	r0, [r2, #0]
        if(networkID != 0)
 8024ff0:	2b00      	cmp	r3, #0
 8024ff2:	d03c      	beq.n	802506e <rfm12b_sendACK+0x182>
    crc ^= a;
 8024ff4:	f483 437f 	eor.w	r3, r3, #65280	; 0xff00
 8024ff8:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
        crc = (crc & 1)
 8024ffc:	07d9      	lsls	r1, r3, #31
 8024ffe:	bf46      	itte	mi
 8025000:	f24a 0101 	movwmi	r1, #40961	; 0xa001
 8025004:	ea81 0353 	eormi.w	r3, r1, r3, lsr #1
 8025008:	085b      	lsrpl	r3, r3, #1
 802500a:	07df      	lsls	r7, r3, #31
 802500c:	bf46      	itte	mi
 802500e:	f24a 0101 	movwmi	r1, #40961	; 0xa001
 8025012:	ea81 0353 	eormi.w	r3, r1, r3, lsr #1
 8025016:	085b      	lsrpl	r3, r3, #1
 8025018:	07d8      	lsls	r0, r3, #31
 802501a:	bf46      	itte	mi
 802501c:	f24a 0101 	movwmi	r1, #40961	; 0xa001
 8025020:	ea81 0353 	eormi.w	r3, r1, r3, lsr #1
 8025024:	085b      	lsrpl	r3, r3, #1
 8025026:	07d9      	lsls	r1, r3, #31
 8025028:	bf46      	itte	mi
 802502a:	f24a 0101 	movwmi	r1, #40961	; 0xa001
 802502e:	ea81 0353 	eormi.w	r3, r1, r3, lsr #1
 8025032:	085b      	lsrpl	r3, r3, #1
 8025034:	07df      	lsls	r7, r3, #31
 8025036:	bf46      	itte	mi
 8025038:	f24a 0101 	movwmi	r1, #40961	; 0xa001
 802503c:	ea81 0353 	eormi.w	r3, r1, r3, lsr #1
 8025040:	085b      	lsrpl	r3, r3, #1
 8025042:	07d8      	lsls	r0, r3, #31
 8025044:	bf46      	itte	mi
 8025046:	f24a 0101 	movwmi	r1, #40961	; 0xa001
 802504a:	ea81 0353 	eormi.w	r3, r1, r3, lsr #1
 802504e:	085b      	lsrpl	r3, r3, #1
 8025050:	07d9      	lsls	r1, r3, #31
 8025052:	bf46      	itte	mi
 8025054:	f24a 0101 	movwmi	r1, #40961	; 0xa001
 8025058:	ea81 0353 	eormi.w	r3, r1, r3, lsr #1
 802505c:	085b      	lsrpl	r3, r3, #1
 802505e:	07df      	lsls	r7, r3, #31
 8025060:	bf4a      	itet	mi
 8025062:	f24a 0101 	movwmi	r1, #40961	; 0xa001
 8025066:	085b      	lsrpl	r3, r3, #1
 8025068:	ea81 0353 	eormi.w	r3, r1, r3, lsr #1
            rf12_crc = _crc16_update(0xFFFF, networkID);
 802506c:	8013      	strh	r3, [r2, #0]
        rxstate = TXRECV;
 802506e:	2305      	movs	r3, #5
        rfm12b_trx_2b(RFM12B_RECEIVER_ON);
 8025070:	f248 20dd 	movw	r0, #33501	; 0x82dd
        rxstate = TXRECV;
 8025074:	f88a 3000 	strb.w	r3, [sl]
        rfm12b_trx_2b(RFM12B_RECEIVER_ON);
 8025078:	f7ff fa50 	bl	802451c <rfm12b_trx_2b>
        if(to <  HAL_GetTick())
 802507c:	f7fb fff4 	bl	8021068 <HAL_GetTick>
 8025080:	42b0      	cmp	r0, r6
 8025082:	f67f af50 	bls.w	8024f26 <rfm12b_sendACK+0x3a>
            debug("Stuck @2");
 8025086:	4820      	ldr	r0, [pc, #128]	; (8025108 <rfm12b_sendACK+0x21c>)
 8025088:	f7ff f8b8 	bl	80241fc <debug>
            to = HAL_GetTick() + 500; 
 802508c:	f7fb ffec 	bl	8021068 <HAL_GetTick>
 8025090:	f500 76fa 	add.w	r6, r0, #500	; 0x1f4
 8025094:	e747      	b.n	8024f26 <rfm12b_sendACK+0x3a>
    if(rxstate == TXRECV && (rxfill >= (uint8_t)(rf12_len + 6) || rxfill >= RF_MAX))
 8025096:	78e3      	ldrb	r3, [r4, #3]
 8025098:	782a      	ldrb	r2, [r5, #0]
 802509a:	3306      	adds	r3, #6
 802509c:	b2db      	uxtb	r3, r3
 802509e:	4293      	cmp	r3, r2
 80250a0:	d903      	bls.n	80250aa <rfm12b_sendACK+0x1be>
 80250a2:	782b      	ldrb	r3, [r5, #0]
 80250a4:	2b85      	cmp	r3, #133	; 0x85
 80250a6:	f67f af35 	bls.w	8024f14 <rfm12b_sendACK+0x28>
        rxstate = TXIDLE;
 80250aa:	2304      	movs	r3, #4
 80250ac:	f88a 3000 	strb.w	r3, [sl]
        if(rf12_len > RF12_MAXDATA)
 80250b0:	78e3      	ldrb	r3, [r4, #3]
 80250b2:	2b80      	cmp	r3, #128	; 0x80
 80250b4:	d902      	bls.n	80250bc <rfm12b_sendACK+0x1d0>
            rf12_crc = 1; // force bad crc if packet length is invalid
 80250b6:	4b13      	ldr	r3, [pc, #76]	; (8025104 <rfm12b_sendACK+0x218>)
 80250b8:	2201      	movs	r2, #1
 80250ba:	801a      	strh	r2, [r3, #0]
        if(RF12_DESTID == 0 || RF12_DESTID == nodeID)
 80250bc:	7863      	ldrb	r3, [r4, #1]
 80250be:	0658      	lsls	r0, r3, #25
 80250c0:	d007      	beq.n	80250d2 <rfm12b_sendACK+0x1e6>
 80250c2:	4a12      	ldr	r2, [pc, #72]	; (802510c <rfm12b_sendACK+0x220>)
 80250c4:	7863      	ldrb	r3, [r4, #1]
 80250c6:	7812      	ldrb	r2, [r2, #0]
 80250c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80250cc:	429a      	cmp	r2, r3
 80250ce:	f47f af21 	bne.w	8024f14 <rfm12b_sendACK+0x28>
            if(rf12_crc == 0 && crypter != 0)
 80250d2:	4b0c      	ldr	r3, [pc, #48]	; (8025104 <rfm12b_sendACK+0x218>)
 80250d4:	8818      	ldrh	r0, [r3, #0]
 80250d6:	b280      	uxth	r0, r0
 80250d8:	b920      	cbnz	r0, 80250e4 <rfm12b_sendACK+0x1f8>
 80250da:	4b0d      	ldr	r3, [pc, #52]	; (8025110 <rfm12b_sendACK+0x224>)
 80250dc:	681b      	ldr	r3, [r3, #0]
 80250de:	b10b      	cbz	r3, 80250e4 <rfm12b_sendACK+0x1f8>
                crypter(false);
 80250e0:	4798      	blx	r3
 80250e2:	e71b      	b.n	8024f1c <rfm12b_sendACK+0x30>
                rf12_seq = -1;
 80250e4:	4b0b      	ldr	r3, [pc, #44]	; (8025114 <rfm12b_sendACK+0x228>)
 80250e6:	f04f 32ff 	mov.w	r2, #4294967295
 80250ea:	601a      	str	r2, [r3, #0]
 80250ec:	e716      	b.n	8024f1c <rfm12b_sendACK+0x30>
 80250ee:	bf00      	nop
 80250f0:	20000470 	.word	0x20000470
 80250f4:	200004fc 	.word	0x200004fc
 80250f8:	40020c00 	.word	0x40020c00
 80250fc:	40003c00 	.word	0x40003c00
 8025100:	2000046d 	.word	0x2000046d
 8025104:	200004f4 	.word	0x200004f4
 8025108:	08028524 	.word	0x08028524
 802510c:	2000046e 	.word	0x2000046e
 8025110:	20000468 	.word	0x20000468
 8025114:	200004f8 	.word	0x200004f8
 8025118:	20000010 	.word	0x20000010

0802511c <rfm12b_irq_handler>:
               !(rf12_hdr2 & RF12_HDR_ACKCTLMASK);
    return false;
}

void rfm12b_irq_handler(void)
{
 802511c:	b570      	push	{r4, r5, r6, lr}
    // a transfer of 2x 16 bits @ 2 MHz over SPI takes 2x 8 us inside this ISR
    // correction: now takes 2 + 8 µs, since sending can be done at 8 MHz
    rfm12b_trx_2b(0x0000);
 802511e:	2000      	movs	r0, #0
 8025120:	f7ff f9fc 	bl	802451c <rfm12b_trx_2b>

    if(rxstate == TXRECV)
 8025124:	4ba3      	ldr	r3, [pc, #652]	; (80253b4 <rfm12b_irq_handler+0x298>)
 8025126:	781a      	ldrb	r2, [r3, #0]
 8025128:	2a05      	cmp	r2, #5
 802512a:	f000 808c 	beq.w	8025246 <rfm12b_irq_handler+0x12a>
    }
    else
    {
        uint8_t out;

        if(rxstate < 0)
 802512e:	781a      	ldrb	r2, [r3, #0]
 8025130:	0612      	lsls	r2, r2, #24
 8025132:	d40e      	bmi.n	8025152 <rfm12b_irq_handler+0x36>
            uint8_t pos = 4 + rf12_len + rxstate++;
            out = rf12_buf[pos];
            rf12_crc = _crc16_update(rf12_crc, out);
        }
        else
            switch(rxstate++)
 8025134:	781a      	ldrb	r2, [r3, #0]
 8025136:	b252      	sxtb	r2, r2
 8025138:	1c51      	adds	r1, r2, #1
 802513a:	b249      	sxtb	r1, r1
 802513c:	7019      	strb	r1, [r3, #0]
 802513e:	2a0a      	cmp	r2, #10
 8025140:	d87e      	bhi.n	8025240 <rfm12b_irq_handler+0x124>
 8025142:	e8df f002 	tbb	[pc, r2]
 8025146:	6b64      	.short	0x6b64
 8025148:	7d7d737d 	.word	0x7d7d737d
 802514c:	7a7d7d7d 	.word	0x7a7d7d7d
 8025150:	58          	.byte	0x58
 8025151:	00          	.byte	0x00
            uint8_t pos = 4 + rf12_len + rxstate++;
 8025152:	4899      	ldr	r0, [pc, #612]	; (80253b8 <rfm12b_irq_handler+0x29c>)
            rf12_crc = _crc16_update(rf12_crc, out);
 8025154:	4c99      	ldr	r4, [pc, #612]	; (80253bc <rfm12b_irq_handler+0x2a0>)
            uint8_t pos = 4 + rf12_len + rxstate++;
 8025156:	78c1      	ldrb	r1, [r0, #3]
 8025158:	781a      	ldrb	r2, [r3, #0]
 802515a:	3104      	adds	r1, #4
 802515c:	4411      	add	r1, r2
 802515e:	3201      	adds	r2, #1
            out = rf12_buf[pos];
 8025160:	b2c9      	uxtb	r1, r1
            uint8_t pos = 4 + rf12_len + rxstate++;
 8025162:	b252      	sxtb	r2, r2
 8025164:	701a      	strb	r2, [r3, #0]
            out = rf12_buf[pos];
 8025166:	5c40      	ldrb	r0, [r0, r1]
            rf12_crc = _crc16_update(rf12_crc, out);
 8025168:	8822      	ldrh	r2, [r4, #0]
 802516a:	b292      	uxth	r2, r2
    crc ^= a;
 802516c:	4042      	eors	r2, r0
        crc = (crc & 1)
 802516e:	f24a 0301 	movw	r3, #40961	; 0xa001
 8025172:	0851      	lsrs	r1, r2, #1
 8025174:	f012 0f01 	tst.w	r2, #1
 8025178:	ea81 0203 	eor.w	r2, r1, r3
 802517c:	bf08      	it	eq
 802517e:	460a      	moveq	r2, r1
 8025180:	0851      	lsrs	r1, r2, #1
 8025182:	f012 0f01 	tst.w	r2, #1
 8025186:	ea81 0203 	eor.w	r2, r1, r3
 802518a:	bf18      	it	ne
 802518c:	4611      	movne	r1, r2
 802518e:	084a      	lsrs	r2, r1, #1
 8025190:	f011 0f01 	tst.w	r1, #1
 8025194:	ea82 0103 	eor.w	r1, r2, r3
 8025198:	bf18      	it	ne
 802519a:	460a      	movne	r2, r1
 802519c:	0851      	lsrs	r1, r2, #1
 802519e:	f012 0f01 	tst.w	r2, #1
 80251a2:	ea81 0203 	eor.w	r2, r1, r3
 80251a6:	bf18      	it	ne
 80251a8:	4611      	movne	r1, r2
 80251aa:	084a      	lsrs	r2, r1, #1
 80251ac:	f011 0f01 	tst.w	r1, #1
 80251b0:	ea82 0103 	eor.w	r1, r2, r3
 80251b4:	bf18      	it	ne
 80251b6:	460a      	movne	r2, r1
 80251b8:	0851      	lsrs	r1, r2, #1
 80251ba:	f012 0f01 	tst.w	r2, #1
 80251be:	ea81 0203 	eor.w	r2, r1, r3
 80251c2:	bf18      	it	ne
 80251c4:	4611      	movne	r1, r2
 80251c6:	084a      	lsrs	r2, r1, #1
 80251c8:	f011 0f01 	tst.w	r1, #1
 80251cc:	ea82 0103 	eor.w	r1, r2, r3
 80251d0:	bf18      	it	ne
 80251d2:	460a      	movne	r2, r1
 80251d4:	0851      	lsrs	r1, r2, #1
 80251d6:	f012 0f01 	tst.w	r2, #1
 80251da:	ea83 0301 	eor.w	r3, r3, r1
 80251de:	f5a0 4090 	sub.w	r0, r0, #18432	; 0x4800
 80251e2:	bf08      	it	eq
 80251e4:	460b      	moveq	r3, r1
 80251e6:	b280      	uxth	r0, r0
            rf12_crc = _crc16_update(rf12_crc, out);
 80251e8:	8023      	strh	r3, [r4, #0]
            case TXDONE: rfm12b_trx_2b(RFM12B_IDLE_MODE); // fall through
            default: out = 0xAA;
            }

        //Serial.print(out, HEX); Serial.print(' ');
        rfm12b_trx_2b(RFM12B_TXREG_WRITE + out);
 80251ea:	f7ff f997 	bl	802451c <rfm12b_trx_2b>
    }

    irq_fired = true;
 80251ee:	4b74      	ldr	r3, [pc, #464]	; (80253c0 <rfm12b_irq_handler+0x2a4>)
 80251f0:	2201      	movs	r2, #1
 80251f2:	701a      	strb	r2, [r3, #0]
 80251f4:	bd70      	pop	{r4, r5, r6, pc}
                rxstate = -(3 + rf12_len);
 80251f6:	4a70      	ldr	r2, [pc, #448]	; (80253b8 <rfm12b_irq_handler+0x29c>)
                out = networkID;
 80251f8:	4972      	ldr	r1, [pc, #456]	; (80253c4 <rfm12b_irq_handler+0x2a8>)
                rxstate = -(3 + rf12_len);
 80251fa:	78d2      	ldrb	r2, [r2, #3]
                out = networkID;
 80251fc:	7808      	ldrb	r0, [r1, #0]
                rxstate = -(3 + rf12_len);
 80251fe:	f1c2 02fd 	rsb	r2, r2, #253	; 0xfd
 8025202:	b252      	sxtb	r2, r2
 8025204:	f5a0 4090 	sub.w	r0, r0, #18432	; 0x4800
 8025208:	701a      	strb	r2, [r3, #0]
 802520a:	b280      	uxth	r0, r0
                break;
 802520c:	e7ed      	b.n	80251ea <rfm12b_irq_handler+0xce>
            case TXCRC1: out = rf12_crc; break;
 802520e:	4b6b      	ldr	r3, [pc, #428]	; (80253bc <rfm12b_irq_handler+0x2a0>)
 8025210:	8818      	ldrh	r0, [r3, #0]
 8025212:	b2c0      	uxtb	r0, r0
 8025214:	f5a0 4090 	sub.w	r0, r0, #18432	; 0x4800
 8025218:	b280      	uxth	r0, r0
 802521a:	e7e6      	b.n	80251ea <rfm12b_irq_handler+0xce>
            case TXCRC2: out = rf12_crc >> 8; break;
 802521c:	4b67      	ldr	r3, [pc, #412]	; (80253bc <rfm12b_irq_handler+0x2a0>)
 802521e:	8818      	ldrh	r0, [r3, #0]
 8025220:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8025224:	f5a0 4090 	sub.w	r0, r0, #18432	; 0x4800
 8025228:	b280      	uxth	r0, r0
 802522a:	e7de      	b.n	80251ea <rfm12b_irq_handler+0xce>
            case TXDONE: rfm12b_trx_2b(RFM12B_IDLE_MODE); // fall through
 802522c:	f248 200d 	movw	r0, #33293	; 0x820d
 8025230:	f7ff f974 	bl	802451c <rfm12b_trx_2b>
 8025234:	f64b 00aa 	movw	r0, #47274	; 0xb8aa
 8025238:	e7d7      	b.n	80251ea <rfm12b_irq_handler+0xce>
            switch(rxstate++)
 802523a:	f64b 002d 	movw	r0, #47149	; 0xb82d
 802523e:	e7d4      	b.n	80251ea <rfm12b_irq_handler+0xce>
 8025240:	f64b 00aa 	movw	r0, #47274	; 0xb8aa
 8025244:	e7d1      	b.n	80251ea <rfm12b_irq_handler+0xce>
  __ASM volatile ("cpsid i" : : : "memory");
 8025246:	b672      	cpsid	i
    PIN_CLR(RFM_CS);
 8025248:	4b5f      	ldr	r3, [pc, #380]	; (80253c8 <rfm12b_irq_handler+0x2ac>)
 802524a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 802524e:	619a      	str	r2, [r3, #24]
    DELAY_US(1);
 8025250:	bf00      	nop
 8025252:	bf00      	nop
 8025254:	bf00      	nop
 8025256:	bf00      	nop
 8025258:	bf00      	nop
 802525a:	bf00      	nop
 802525c:	bf00      	nop
 802525e:	bf00      	nop
 8025260:	bf00      	nop
 8025262:	bf00      	nop
 8025264:	bf00      	nop
    S_WB();
 8025266:	bf00      	nop
 8025268:	4b58      	ldr	r3, [pc, #352]	; (80253cc <rfm12b_irq_handler+0x2b0>)
 802526a:	689b      	ldr	r3, [r3, #8]
 802526c:	0619      	lsls	r1, r3, #24
 802526e:	d4fa      	bmi.n	8025266 <rfm12b_irq_handler+0x14a>
    S_DT(word >> 8);
 8025270:	bf00      	nop
 8025272:	4b56      	ldr	r3, [pc, #344]	; (80253cc <rfm12b_irq_handler+0x2b0>)
 8025274:	22b0      	movs	r2, #176	; 0xb0
 8025276:	60da      	str	r2, [r3, #12]
 8025278:	bf00      	nop
    S_WT();
 802527a:	689b      	ldr	r3, [r3, #8]
 802527c:	079a      	lsls	r2, r3, #30
 802527e:	d404      	bmi.n	802528a <rfm12b_irq_handler+0x16e>
 8025280:	bf00      	nop
 8025282:	4b52      	ldr	r3, [pc, #328]	; (80253cc <rfm12b_irq_handler+0x2b0>)
 8025284:	689b      	ldr	r3, [r3, #8]
 8025286:	079b      	lsls	r3, r3, #30
 8025288:	d5fa      	bpl.n	8025280 <rfm12b_irq_handler+0x164>
    S_DT(word & 0xFF);
 802528a:	bf00      	nop
 802528c:	4b4f      	ldr	r3, [pc, #316]	; (80253cc <rfm12b_irq_handler+0x2b0>)
 802528e:	2200      	movs	r2, #0
 8025290:	60da      	str	r2, [r3, #12]
 8025292:	bf00      	nop
    S_WR();
 8025294:	689b      	ldr	r3, [r3, #8]
 8025296:	07de      	lsls	r6, r3, #31
 8025298:	d404      	bmi.n	80252a4 <rfm12b_irq_handler+0x188>
 802529a:	bf00      	nop
 802529c:	4b4b      	ldr	r3, [pc, #300]	; (80253cc <rfm12b_irq_handler+0x2b0>)
 802529e:	689b      	ldr	r3, [r3, #8]
 80252a0:	07dd      	lsls	r5, r3, #31
 80252a2:	d5fa      	bpl.n	802529a <rfm12b_irq_handler+0x17e>
    S_DR(rx[0]);
 80252a4:	4a49      	ldr	r2, [pc, #292]	; (80253cc <rfm12b_irq_handler+0x2b0>)
 80252a6:	68d0      	ldr	r0, [r2, #12]
    S_WR();
 80252a8:	6893      	ldr	r3, [r2, #8]
 80252aa:	07dc      	lsls	r4, r3, #31
 80252ac:	d404      	bmi.n	80252b8 <rfm12b_irq_handler+0x19c>
 80252ae:	bf00      	nop
 80252b0:	4b46      	ldr	r3, [pc, #280]	; (80253cc <rfm12b_irq_handler+0x2b0>)
 80252b2:	689b      	ldr	r3, [r3, #8]
 80252b4:	07d9      	lsls	r1, r3, #31
 80252b6:	d5fa      	bpl.n	80252ae <rfm12b_irq_handler+0x192>
    PIN_SET(RFM_CS);
 80252b8:	4a43      	ldr	r2, [pc, #268]	; (80253c8 <rfm12b_irq_handler+0x2ac>)
    S_DR(rx[1]);
 80252ba:	4b44      	ldr	r3, [pc, #272]	; (80253cc <rfm12b_irq_handler+0x2b0>)
    PIN_SET(RFM_CS);
 80252bc:	2104      	movs	r1, #4
    S_DR(rx[1]);
 80252be:	68db      	ldr	r3, [r3, #12]
    PIN_SET(RFM_CS);
 80252c0:	6191      	str	r1, [r2, #24]
    DELAY_US(1);
 80252c2:	bf00      	nop
 80252c4:	bf00      	nop
 80252c6:	bf00      	nop
 80252c8:	bf00      	nop
 80252ca:	bf00      	nop
 80252cc:	bf00      	nop
 80252ce:	bf00      	nop
 80252d0:	bf00      	nop
 80252d2:	bf00      	nop
 80252d4:	bf00      	nop
 80252d6:	bf00      	nop
 80252d8:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 80252da:	b662      	cpsie	i
        if(rxfill == 0 && networkID != 0)
 80252dc:	493c      	ldr	r1, [pc, #240]	; (80253d0 <rfm12b_irq_handler+0x2b4>)
    return (rx[0] << 8) | rx[1];
 80252de:	b2db      	uxtb	r3, r3
 80252e0:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
        if(rxfill == 0 && networkID != 0)
 80252e4:	780a      	ldrb	r2, [r1, #0]
    return (rx[0] << 8) | rx[1];
 80252e6:	b21b      	sxth	r3, r3
 80252e8:	b29e      	uxth	r6, r3
        uint8_t in = rfm12b_trx_2b(RFM12B_RX_FIFO_READ); /* note: MAX SPI freq = 2.5MHZ here*/
 80252ea:	b2db      	uxtb	r3, r3
        if(rxfill == 0 && networkID != 0)
 80252ec:	b91a      	cbnz	r2, 80252f6 <rfm12b_irq_handler+0x1da>
 80252ee:	4a35      	ldr	r2, [pc, #212]	; (80253c4 <rfm12b_irq_handler+0x2a8>)
 80252f0:	7810      	ldrb	r0, [r2, #0]
 80252f2:	2800      	cmp	r0, #0
 80252f4:	d155      	bne.n	80253a2 <rfm12b_irq_handler+0x286>
 80252f6:	4c30      	ldr	r4, [pc, #192]	; (80253b8 <rfm12b_irq_handler+0x29c>)
        rf12_buf[rxfill++] = in;
 80252f8:	7808      	ldrb	r0, [r1, #0]
        rf12_crc = _crc16_update(rf12_crc, in);
 80252fa:	4d30      	ldr	r5, [pc, #192]	; (80253bc <rfm12b_irq_handler+0x2a0>)
        rf12_buf[rxfill++] = in;
 80252fc:	b2c0      	uxtb	r0, r0
 80252fe:	1c42      	adds	r2, r0, #1
 8025300:	b2d2      	uxtb	r2, r2
 8025302:	700a      	strb	r2, [r1, #0]
 8025304:	5423      	strb	r3, [r4, r0]
        rf12_crc = _crc16_update(rf12_crc, in);
 8025306:	882a      	ldrh	r2, [r5, #0]
    crc ^= a;
 8025308:	b2f3      	uxtb	r3, r6
        rf12_crc = _crc16_update(rf12_crc, in);
 802530a:	b292      	uxth	r2, r2
    crc ^= a;
 802530c:	405a      	eors	r2, r3
        crc = (crc & 1)
 802530e:	0850      	lsrs	r0, r2, #1
 8025310:	f24a 0301 	movw	r3, #40961	; 0xa001
 8025314:	f012 0f01 	tst.w	r2, #1
 8025318:	ea80 0203 	eor.w	r2, r0, r3
 802531c:	bf08      	it	eq
 802531e:	4602      	moveq	r2, r0
 8025320:	0850      	lsrs	r0, r2, #1
 8025322:	f012 0f01 	tst.w	r2, #1
 8025326:	ea80 0203 	eor.w	r2, r0, r3
 802532a:	bf18      	it	ne
 802532c:	4610      	movne	r0, r2
 802532e:	0842      	lsrs	r2, r0, #1
 8025330:	f010 0f01 	tst.w	r0, #1
 8025334:	ea82 0003 	eor.w	r0, r2, r3
 8025338:	bf18      	it	ne
 802533a:	4602      	movne	r2, r0
 802533c:	0850      	lsrs	r0, r2, #1
 802533e:	f012 0f01 	tst.w	r2, #1
 8025342:	ea80 0203 	eor.w	r2, r0, r3
 8025346:	bf18      	it	ne
 8025348:	4610      	movne	r0, r2
 802534a:	0842      	lsrs	r2, r0, #1
 802534c:	f010 0f01 	tst.w	r0, #1
 8025350:	ea82 0003 	eor.w	r0, r2, r3
 8025354:	bf18      	it	ne
 8025356:	4602      	movne	r2, r0
 8025358:	0850      	lsrs	r0, r2, #1
 802535a:	f012 0f01 	tst.w	r2, #1
 802535e:	ea80 0203 	eor.w	r2, r0, r3
 8025362:	bf18      	it	ne
 8025364:	4610      	movne	r0, r2
 8025366:	0842      	lsrs	r2, r0, #1
 8025368:	f010 0f01 	tst.w	r0, #1
 802536c:	ea82 0003 	eor.w	r0, r2, r3
 8025370:	bf18      	it	ne
 8025372:	4602      	movne	r2, r0
 8025374:	0850      	lsrs	r0, r2, #1
 8025376:	f012 0f01 	tst.w	r2, #1
 802537a:	ea83 0300 	eor.w	r3, r3, r0
 802537e:	bf08      	it	eq
 8025380:	4603      	moveq	r3, r0
        rf12_crc = _crc16_update(rf12_crc, in);
 8025382:	802b      	strh	r3, [r5, #0]
        if(rxfill >= (uint8_t)(rf12_len + 6) || rxfill >= RF_MAX)
 8025384:	78e3      	ldrb	r3, [r4, #3]
 8025386:	780a      	ldrb	r2, [r1, #0]
 8025388:	3306      	adds	r3, #6
 802538a:	b2db      	uxtb	r3, r3
 802538c:	4293      	cmp	r3, r2
 802538e:	d903      	bls.n	8025398 <rfm12b_irq_handler+0x27c>
 8025390:	780b      	ldrb	r3, [r1, #0]
 8025392:	2b85      	cmp	r3, #133	; 0x85
 8025394:	f67f af2b 	bls.w	80251ee <rfm12b_irq_handler+0xd2>
            rfm12b_trx_2b(RFM12B_IDLE_MODE);
 8025398:	f248 200d 	movw	r0, #33293	; 0x820d
 802539c:	f7ff f8be 	bl	802451c <rfm12b_trx_2b>
 80253a0:	e725      	b.n	80251ee <rfm12b_irq_handler+0xd2>
            rf12_buf[rxfill++] = networkID;
 80253a2:	780a      	ldrb	r2, [r1, #0]
 80253a4:	4c04      	ldr	r4, [pc, #16]	; (80253b8 <rfm12b_irq_handler+0x29c>)
 80253a6:	b2d2      	uxtb	r2, r2
 80253a8:	1c55      	adds	r5, r2, #1
 80253aa:	b2ed      	uxtb	r5, r5
 80253ac:	700d      	strb	r5, [r1, #0]
 80253ae:	54a0      	strb	r0, [r4, r2]
 80253b0:	e7a2      	b.n	80252f8 <rfm12b_irq_handler+0x1dc>
 80253b2:	bf00      	nop
 80253b4:	20000010 	.word	0x20000010
 80253b8:	20000470 	.word	0x20000470
 80253bc:	200004f4 	.word	0x200004f4
 80253c0:	2000046c 	.word	0x2000046c
 80253c4:	2000046d 	.word	0x2000046d
 80253c8:	40020c00 	.word	0x40020c00
 80253cc:	40003c00 	.word	0x40003c00
 80253d0:	200004fc 	.word	0x200004fc

080253d4 <hb_tracker_init>:

static hbt_node_t nodes[MAX_NODES];
static uint32_t nodes_count = 0;

hbt_node_t *hb_tracker_init(uint8_t node_id, uint32_t timeout_ms)
{
 80253d4:	b4f0      	push	{r4, r5, r6, r7}
    if(nodes_count >= MAX_NODES) return NULL;
 80253d6:	4d0a      	ldr	r5, [pc, #40]	; (8025400 <hb_tracker_init+0x2c>)
 80253d8:	682b      	ldr	r3, [r5, #0]
 80253da:	2b01      	cmp	r3, #1
 80253dc:	d80d      	bhi.n	80253fa <hb_tracker_init+0x26>

    nodes[nodes_count].node_id = node_id;
 80253de:	4e09      	ldr	r6, [pc, #36]	; (8025404 <hb_tracker_init+0x30>)
 80253e0:	eb03 0443 	add.w	r4, r3, r3, lsl #1
 80253e4:	00a4      	lsls	r4, r4, #2
 80253e6:	1932      	adds	r2, r6, r4
    nodes[nodes_count].timeout_ms = timeout_ms;
    nodes[nodes_count].last_hb_ms = 0;
 80253e8:	2700      	movs	r7, #0

    nodes_count++;
 80253ea:	3301      	adds	r3, #1
    nodes[nodes_count].node_id = node_id;
 80253ec:	5530      	strb	r0, [r6, r4]
    nodes_count++;
 80253ee:	602b      	str	r3, [r5, #0]
    nodes[nodes_count].last_hb_ms = 0;
 80253f0:	6097      	str	r7, [r2, #8]

    return &nodes[nodes_count - 1];
 80253f2:	4610      	mov	r0, r2
    nodes[nodes_count].timeout_ms = timeout_ms;
 80253f4:	6051      	str	r1, [r2, #4]
}
 80253f6:	bcf0      	pop	{r4, r5, r6, r7}
 80253f8:	4770      	bx	lr
    if(nodes_count >= MAX_NODES) return NULL;
 80253fa:	2000      	movs	r0, #0
}
 80253fc:	bcf0      	pop	{r4, r5, r6, r7}
 80253fe:	4770      	bx	lr
 8025400:	2000051c 	.word	0x2000051c
 8025404:	20000504 	.word	0x20000504

08025408 <hb_tracker_update>:

bool hb_tracker_update(uint8_t node_id)
{
 8025408:	b538      	push	{r3, r4, r5, lr}
    for(uint32_t i = 0; i < nodes_count; i++)
 802540a:	4b0e      	ldr	r3, [pc, #56]	; (8025444 <hb_tracker_update+0x3c>)
 802540c:	681b      	ldr	r3, [r3, #0]
 802540e:	b153      	cbz	r3, 8025426 <hb_tracker_update+0x1e>
    {
        if(node_id == nodes[i].node_id)
 8025410:	4c0d      	ldr	r4, [pc, #52]	; (8025448 <hb_tracker_update+0x40>)
 8025412:	7822      	ldrb	r2, [r4, #0]
 8025414:	4282      	cmp	r2, r0
    for(uint32_t i = 0; i < nodes_count; i++)
 8025416:	bf08      	it	eq
 8025418:	2500      	moveq	r5, #0
        if(node_id == nodes[i].node_id)
 802541a:	d008      	beq.n	802542e <hb_tracker_update+0x26>
    for(uint32_t i = 0; i < nodes_count; i++)
 802541c:	2b01      	cmp	r3, #1
 802541e:	d902      	bls.n	8025426 <hb_tracker_update+0x1e>
        if(node_id == nodes[i].node_id)
 8025420:	7b23      	ldrb	r3, [r4, #12]
 8025422:	4283      	cmp	r3, r0
 8025424:	d002      	beq.n	802542c <hb_tracker_update+0x24>
        {
            nodes[i].last_hb_ms = HAL_GetTick();
            return false;
        }
    }
    return true;
 8025426:	2301      	movs	r3, #1
}
 8025428:	4618      	mov	r0, r3
 802542a:	bd38      	pop	{r3, r4, r5, pc}
    for(uint32_t i = 0; i < nodes_count; i++)
 802542c:	2501      	movs	r5, #1
            nodes[i].last_hb_ms = HAL_GetTick();
 802542e:	f7fb fe1b 	bl	8021068 <HAL_GetTick>
 8025432:	006b      	lsls	r3, r5, #1
 8025434:	442b      	add	r3, r5
 8025436:	eb04 0483 	add.w	r4, r4, r3, lsl #2
            return false;
 802543a:	2300      	movs	r3, #0
            nodes[i].last_hb_ms = HAL_GetTick();
 802543c:	60a0      	str	r0, [r4, #8]
}
 802543e:	4618      	mov	r0, r3
 8025440:	bd38      	pop	{r3, r4, r5, pc}
 8025442:	bf00      	nop
 8025444:	2000051c 	.word	0x2000051c
 8025448:	20000504 	.word	0x20000504

0802544c <hb_tracker_is_timeout>:

bool hb_tracker_is_timeout(const hbt_node_t *node) { return HAL_GetTick() > node->timeout_ms + node->last_hb_ms; }
 802544c:	b510      	push	{r4, lr}
 802544e:	4604      	mov	r4, r0
 8025450:	f7fb fe0a 	bl	8021068 <HAL_GetTick>
 8025454:	6863      	ldr	r3, [r4, #4]
 8025456:	68a2      	ldr	r2, [r4, #8]
 8025458:	4413      	add	r3, r2
 802545a:	4298      	cmp	r0, r3
 802545c:	bf94      	ite	ls
 802545e:	2000      	movls	r0, #0
 8025460:	2001      	movhi	r0, #1
 8025462:	bd10      	pop	{r4, pc}

08025464 <trx_send_nack>:
    }
    return true;
}

void trx_send_nack(uint8_t node_id, uint8_t *payload, uint8_t payload_length)
{
 8025464:	b500      	push	{lr}
 8025466:	b083      	sub	sp, #12
    // rfm12b_wakeup();
    rfm12b_send(node_id, payload, payload_length, false, false);
 8025468:	2300      	movs	r3, #0
 802546a:	9300      	str	r3, [sp, #0]
 802546c:	f7ff fc2a 	bl	8024cc4 <rfm12b_send>
}
 8025470:	b003      	add	sp, #12
 8025472:	f85d fb04 	ldr.w	pc, [sp], #4
 8025476:	bf00      	nop

08025478 <trx_init>:

void trx_init(uint8_t own_id)
{
 8025478:	b508      	push	{r3, lr}
    rfm12b_init(RFM_NET_GATEWAY, own_id);
 802547a:	4601      	mov	r1, r0
 802547c:	206a      	movs	r0, #106	; 0x6a
 802547e:	f7ff fb0f 	bl	8024aa0 <rfm12b_init>
    rfm12b_encrypt(rfm_net_key, RFM_NET_KEY_LENGTH);
 8025482:	2110      	movs	r1, #16
 8025484:	4802      	ldr	r0, [pc, #8]	; (8025490 <trx_init+0x18>)
    // rfm12b_sleep();
}
 8025486:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    rfm12b_encrypt(rfm_net_key, RFM_NET_KEY_LENGTH);
 802548a:	f7ff bab9 	b.w	8024a00 <rfm12b_encrypt>
 802548e:	bf00      	nop
 8025490:	20000014 	.word	0x20000014

08025494 <trx_poll_rx>:

void trx_poll_rx(void)
{
 8025494:	b538      	push	{r3, r4, r5, lr}
    if(rfm12b_rx_complete())
 8025496:	f7ff fb77 	bl	8024b88 <rfm12b_rx_complete>
 802549a:	b900      	cbnz	r0, 802549e <trx_poll_rx+0xa>
 802549c:	bd38      	pop	{r3, r4, r5, pc}
    {
        if(rfm12b_is_crc_pass())
 802549e:	f7ff faa5 	bl	80249ec <rfm12b_is_crc_pass>
 80254a2:	b1b0      	cbz	r0, 80254d2 <trx_poll_rx+0x3e>
        {
            if(rfm12b_is_ack_requested())
 80254a4:	f7ff fa8c 	bl	80249c0 <rfm12b_is_ack_requested>
 80254a8:	b120      	cbz	r0, 80254b4 <trx_poll_rx+0x20>
            {
                rfm12b_sendACK("", 0, false);
 80254aa:	2200      	movs	r2, #0
 80254ac:	4611      	mov	r1, r2
 80254ae:	480b      	ldr	r0, [pc, #44]	; (80254dc <trx_poll_rx+0x48>)
 80254b0:	f7ff fd1c 	bl	8024eec <rfm12b_sendACK>
            }
            
            // debug("[%d] Size: %d\n", rfm12b_get_sender(), rfm12b_get_data_len());
            // for(uint32_t i = 0; i < rfm12b_get_data_len(); i++) //can also use radio.GetDataLen() if you don't like pointers
            //     debug(" > %c\n", (char)rfm12b_get_data()[i]);
            process_data(rfm12b_get_sender(), rfm12b_get_data(), rfm12b_get_data_len());
 80254b4:	f7ff fa7c 	bl	80249b0 <rfm12b_get_sender>
 80254b8:	4604      	mov	r4, r0
 80254ba:	f7ff fa93 	bl	80249e4 <rfm12b_get_data>
 80254be:	4605      	mov	r5, r0
 80254c0:	f7ff fa8a 	bl	80249d8 <rfm12b_get_data_len>
 80254c4:	4629      	mov	r1, r5
 80254c6:	4602      	mov	r2, r0
 80254c8:	4620      	mov	r0, r4
        else
            debug("BAD-CRC\n");

        // debug("\n");
    }
}
 80254ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            process_data(rfm12b_get_sender(), rfm12b_get_data(), rfm12b_get_data_len());
 80254ce:	f7fe be83 	b.w	80241d8 <process_data>
            debug("BAD-CRC\n");
 80254d2:	4803      	ldr	r0, [pc, #12]	; (80254e0 <trx_poll_rx+0x4c>)
}
 80254d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            debug("BAD-CRC\n");
 80254d8:	f7fe be90 	b.w	80241fc <debug>
 80254dc:	08028544 	.word	0x08028544
 80254e0:	0802853c 	.word	0x0802853c

080254e4 <trx_poll_tx_hb>:

void trx_poll_tx_hb(uint32_t period_tx_ms, bool nodes_timeout, int nodes_count, ...)
{
 80254e4:	b40c      	push	{r2, r3}
 80254e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80254ea:	b084      	sub	sp, #16
    static uint32_t fire_timestamp = 0;
    if(fire_timestamp < HAL_GetTick())
 80254ec:	4f16      	ldr	r7, [pc, #88]	; (8025548 <trx_poll_tx_hb+0x64>)
{
 80254ee:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80254f0:	4604      	mov	r4, r0
 80254f2:	4688      	mov	r8, r1
    if(fire_timestamp < HAL_GetTick())
 80254f4:	f7fb fdb8 	bl	8021068 <HAL_GetTick>
 80254f8:	683b      	ldr	r3, [r7, #0]
 80254fa:	4298      	cmp	r0, r3
 80254fc:	d804      	bhi.n	8025508 <trx_poll_tx_hb+0x24>
            trx_send_nack(va_arg(args, int), hb, sizeof(hb));
        }

        va_end(args);
    }
 80254fe:	b004      	add	sp, #16
 8025500:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8025504:	b002      	add	sp, #8
 8025506:	4770      	bx	lr
        fire_timestamp = HAL_GetTick() + period_tx_ms;
 8025508:	f7fb fdae 	bl	8021068 <HAL_GetTick>
        uint8_t hb[] = {RFM_NET_CMD_HB, nodes_timeout ? 1 : 0};
 802550c:	2500      	movs	r5, #0
        fire_timestamp = HAL_GetTick() + period_tx_ms;
 802550e:	4420      	add	r0, r4
        for (int i = 0; i < nodes_count; i++) 
 8025510:	42ae      	cmp	r6, r5
        va_start(args, nodes_count);
 8025512:	ac0b      	add	r4, sp, #44	; 0x2c
        fire_timestamp = HAL_GetTick() + period_tx_ms;
 8025514:	6038      	str	r0, [r7, #0]
        uint8_t hb[] = {RFM_NET_CMD_HB, nodes_timeout ? 1 : 0};
 8025516:	f88d 8009 	strb.w	r8, [sp, #9]
 802551a:	f88d 5008 	strb.w	r5, [sp, #8]
        va_start(args, nodes_count);
 802551e:	9403      	str	r4, [sp, #12]
        for (int i = 0; i < nodes_count; i++) 
 8025520:	dded      	ble.n	80254fe <trx_poll_tx_hb+0x1a>
            trx_send_nack(va_arg(args, int), hb, sizeof(hb));
 8025522:	3404      	adds	r4, #4
    rfm12b_send(node_id, payload, payload_length, false, false);
 8025524:	2300      	movs	r3, #0
 8025526:	f814 0c04 	ldrb.w	r0, [r4, #-4]
 802552a:	9300      	str	r3, [sp, #0]
        for (int i = 0; i < nodes_count; i++) 
 802552c:	3501      	adds	r5, #1
    rfm12b_send(node_id, payload, payload_length, false, false);
 802552e:	2202      	movs	r2, #2
 8025530:	a902      	add	r1, sp, #8
            trx_send_nack(va_arg(args, int), hb, sizeof(hb));
 8025532:	9403      	str	r4, [sp, #12]
    rfm12b_send(node_id, payload, payload_length, false, false);
 8025534:	f7ff fbc6 	bl	8024cc4 <rfm12b_send>
        for (int i = 0; i < nodes_count; i++) 
 8025538:	42ae      	cmp	r6, r5
 802553a:	d1f2      	bne.n	8025522 <trx_poll_tx_hb+0x3e>
 802553c:	b004      	add	sp, #16
 802553e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8025542:	b002      	add	sp, #8
 8025544:	4770      	bx	lr
 8025546:	bf00      	nop
 8025548:	20000520 	.word	0x20000520

0802554c <__libc_init_array>:
 802554c:	b570      	push	{r4, r5, r6, lr}
 802554e:	4e0d      	ldr	r6, [pc, #52]	; (8025584 <__libc_init_array+0x38>)
 8025550:	4c0d      	ldr	r4, [pc, #52]	; (8025588 <__libc_init_array+0x3c>)
 8025552:	1ba4      	subs	r4, r4, r6
 8025554:	10a4      	asrs	r4, r4, #2
 8025556:	2500      	movs	r5, #0
 8025558:	42a5      	cmp	r5, r4
 802555a:	d109      	bne.n	8025570 <__libc_init_array+0x24>
 802555c:	4e0b      	ldr	r6, [pc, #44]	; (802558c <__libc_init_array+0x40>)
 802555e:	4c0c      	ldr	r4, [pc, #48]	; (8025590 <__libc_init_array+0x44>)
 8025560:	f002 ff0e 	bl	8028380 <_init>
 8025564:	1ba4      	subs	r4, r4, r6
 8025566:	10a4      	asrs	r4, r4, #2
 8025568:	2500      	movs	r5, #0
 802556a:	42a5      	cmp	r5, r4
 802556c:	d105      	bne.n	802557a <__libc_init_array+0x2e>
 802556e:	bd70      	pop	{r4, r5, r6, pc}
 8025570:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8025574:	4798      	blx	r3
 8025576:	3501      	adds	r5, #1
 8025578:	e7ee      	b.n	8025558 <__libc_init_array+0xc>
 802557a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 802557e:	4798      	blx	r3
 8025580:	3501      	adds	r5, #1
 8025582:	e7f2      	b.n	802556a <__libc_init_array+0x1e>
 8025584:	0802882c 	.word	0x0802882c
 8025588:	0802882c 	.word	0x0802882c
 802558c:	0802882c 	.word	0x0802882c
 8025590:	08028830 	.word	0x08028830

08025594 <memcpy>:
 8025594:	b510      	push	{r4, lr}
 8025596:	1e43      	subs	r3, r0, #1
 8025598:	440a      	add	r2, r1
 802559a:	4291      	cmp	r1, r2
 802559c:	d100      	bne.n	80255a0 <memcpy+0xc>
 802559e:	bd10      	pop	{r4, pc}
 80255a0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80255a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80255a8:	e7f7      	b.n	802559a <memcpy+0x6>

080255aa <memset>:
 80255aa:	4402      	add	r2, r0
 80255ac:	4603      	mov	r3, r0
 80255ae:	4293      	cmp	r3, r2
 80255b0:	d100      	bne.n	80255b4 <memset+0xa>
 80255b2:	4770      	bx	lr
 80255b4:	f803 1b01 	strb.w	r1, [r3], #1
 80255b8:	e7f9      	b.n	80255ae <memset+0x4>

080255ba <__cvt>:
 80255ba:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80255be:	ec55 4b10 	vmov	r4, r5, d0
 80255c2:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80255c4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80255c8:	2d00      	cmp	r5, #0
 80255ca:	460e      	mov	r6, r1
 80255cc:	4691      	mov	r9, r2
 80255ce:	4619      	mov	r1, r3
 80255d0:	bfb8      	it	lt
 80255d2:	4622      	movlt	r2, r4
 80255d4:	462b      	mov	r3, r5
 80255d6:	f027 0720 	bic.w	r7, r7, #32
 80255da:	bfbb      	ittet	lt
 80255dc:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80255e0:	461d      	movlt	r5, r3
 80255e2:	2300      	movge	r3, #0
 80255e4:	232d      	movlt	r3, #45	; 0x2d
 80255e6:	bfb8      	it	lt
 80255e8:	4614      	movlt	r4, r2
 80255ea:	2f46      	cmp	r7, #70	; 0x46
 80255ec:	700b      	strb	r3, [r1, #0]
 80255ee:	d004      	beq.n	80255fa <__cvt+0x40>
 80255f0:	2f45      	cmp	r7, #69	; 0x45
 80255f2:	d100      	bne.n	80255f6 <__cvt+0x3c>
 80255f4:	3601      	adds	r6, #1
 80255f6:	2102      	movs	r1, #2
 80255f8:	e000      	b.n	80255fc <__cvt+0x42>
 80255fa:	2103      	movs	r1, #3
 80255fc:	ab03      	add	r3, sp, #12
 80255fe:	9301      	str	r3, [sp, #4]
 8025600:	ab02      	add	r3, sp, #8
 8025602:	9300      	str	r3, [sp, #0]
 8025604:	4632      	mov	r2, r6
 8025606:	4653      	mov	r3, sl
 8025608:	ec45 4b10 	vmov	d0, r4, r5
 802560c:	f000 fd34 	bl	8026078 <_dtoa_r>
 8025610:	2f47      	cmp	r7, #71	; 0x47
 8025612:	4680      	mov	r8, r0
 8025614:	d102      	bne.n	802561c <__cvt+0x62>
 8025616:	f019 0f01 	tst.w	r9, #1
 802561a:	d026      	beq.n	802566a <__cvt+0xb0>
 802561c:	2f46      	cmp	r7, #70	; 0x46
 802561e:	eb08 0906 	add.w	r9, r8, r6
 8025622:	d111      	bne.n	8025648 <__cvt+0x8e>
 8025624:	f898 3000 	ldrb.w	r3, [r8]
 8025628:	2b30      	cmp	r3, #48	; 0x30
 802562a:	d10a      	bne.n	8025642 <__cvt+0x88>
 802562c:	2200      	movs	r2, #0
 802562e:	2300      	movs	r3, #0
 8025630:	4620      	mov	r0, r4
 8025632:	4629      	mov	r1, r5
 8025634:	f7fb fa5c 	bl	8020af0 <__aeabi_dcmpeq>
 8025638:	b918      	cbnz	r0, 8025642 <__cvt+0x88>
 802563a:	f1c6 0601 	rsb	r6, r6, #1
 802563e:	f8ca 6000 	str.w	r6, [sl]
 8025642:	f8da 3000 	ldr.w	r3, [sl]
 8025646:	4499      	add	r9, r3
 8025648:	2200      	movs	r2, #0
 802564a:	2300      	movs	r3, #0
 802564c:	4620      	mov	r0, r4
 802564e:	4629      	mov	r1, r5
 8025650:	f7fb fa4e 	bl	8020af0 <__aeabi_dcmpeq>
 8025654:	b938      	cbnz	r0, 8025666 <__cvt+0xac>
 8025656:	2230      	movs	r2, #48	; 0x30
 8025658:	9b03      	ldr	r3, [sp, #12]
 802565a:	4599      	cmp	r9, r3
 802565c:	d905      	bls.n	802566a <__cvt+0xb0>
 802565e:	1c59      	adds	r1, r3, #1
 8025660:	9103      	str	r1, [sp, #12]
 8025662:	701a      	strb	r2, [r3, #0]
 8025664:	e7f8      	b.n	8025658 <__cvt+0x9e>
 8025666:	f8cd 900c 	str.w	r9, [sp, #12]
 802566a:	9b03      	ldr	r3, [sp, #12]
 802566c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802566e:	eba3 0308 	sub.w	r3, r3, r8
 8025672:	4640      	mov	r0, r8
 8025674:	6013      	str	r3, [r2, #0]
 8025676:	b004      	add	sp, #16
 8025678:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0802567c <__exponent>:
 802567c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802567e:	4603      	mov	r3, r0
 8025680:	2900      	cmp	r1, #0
 8025682:	bfb8      	it	lt
 8025684:	4249      	neglt	r1, r1
 8025686:	f803 2b02 	strb.w	r2, [r3], #2
 802568a:	bfb4      	ite	lt
 802568c:	222d      	movlt	r2, #45	; 0x2d
 802568e:	222b      	movge	r2, #43	; 0x2b
 8025690:	2909      	cmp	r1, #9
 8025692:	7042      	strb	r2, [r0, #1]
 8025694:	dd20      	ble.n	80256d8 <__exponent+0x5c>
 8025696:	f10d 0207 	add.w	r2, sp, #7
 802569a:	4617      	mov	r7, r2
 802569c:	260a      	movs	r6, #10
 802569e:	fb91 f5f6 	sdiv	r5, r1, r6
 80256a2:	fb06 1115 	mls	r1, r6, r5, r1
 80256a6:	3130      	adds	r1, #48	; 0x30
 80256a8:	2d09      	cmp	r5, #9
 80256aa:	f802 1c01 	strb.w	r1, [r2, #-1]
 80256ae:	f102 34ff 	add.w	r4, r2, #4294967295
 80256b2:	4629      	mov	r1, r5
 80256b4:	dc09      	bgt.n	80256ca <__exponent+0x4e>
 80256b6:	3130      	adds	r1, #48	; 0x30
 80256b8:	3a02      	subs	r2, #2
 80256ba:	f804 1c01 	strb.w	r1, [r4, #-1]
 80256be:	42ba      	cmp	r2, r7
 80256c0:	461c      	mov	r4, r3
 80256c2:	d304      	bcc.n	80256ce <__exponent+0x52>
 80256c4:	1a20      	subs	r0, r4, r0
 80256c6:	b003      	add	sp, #12
 80256c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80256ca:	4622      	mov	r2, r4
 80256cc:	e7e7      	b.n	802569e <__exponent+0x22>
 80256ce:	f812 1b01 	ldrb.w	r1, [r2], #1
 80256d2:	f803 1b01 	strb.w	r1, [r3], #1
 80256d6:	e7f2      	b.n	80256be <__exponent+0x42>
 80256d8:	2230      	movs	r2, #48	; 0x30
 80256da:	461c      	mov	r4, r3
 80256dc:	4411      	add	r1, r2
 80256de:	f804 2b02 	strb.w	r2, [r4], #2
 80256e2:	7059      	strb	r1, [r3, #1]
 80256e4:	e7ee      	b.n	80256c4 <__exponent+0x48>
	...

080256e8 <_printf_float>:
 80256e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80256ec:	b08d      	sub	sp, #52	; 0x34
 80256ee:	460c      	mov	r4, r1
 80256f0:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80256f4:	4616      	mov	r6, r2
 80256f6:	461f      	mov	r7, r3
 80256f8:	4605      	mov	r5, r0
 80256fa:	f001 fa8b 	bl	8026c14 <_localeconv_r>
 80256fe:	6803      	ldr	r3, [r0, #0]
 8025700:	9304      	str	r3, [sp, #16]
 8025702:	4618      	mov	r0, r3
 8025704:	f7fa fd7a 	bl	80201fc <strlen>
 8025708:	2300      	movs	r3, #0
 802570a:	930a      	str	r3, [sp, #40]	; 0x28
 802570c:	f8d8 3000 	ldr.w	r3, [r8]
 8025710:	9005      	str	r0, [sp, #20]
 8025712:	3307      	adds	r3, #7
 8025714:	f023 0307 	bic.w	r3, r3, #7
 8025718:	f103 0208 	add.w	r2, r3, #8
 802571c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8025720:	f8d4 b000 	ldr.w	fp, [r4]
 8025724:	f8c8 2000 	str.w	r2, [r8]
 8025728:	e9d3 2300 	ldrd	r2, r3, [r3]
 802572c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8025730:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8025734:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8025738:	9307      	str	r3, [sp, #28]
 802573a:	f8cd 8018 	str.w	r8, [sp, #24]
 802573e:	f04f 32ff 	mov.w	r2, #4294967295
 8025742:	4ba5      	ldr	r3, [pc, #660]	; (80259d8 <_printf_float+0x2f0>)
 8025744:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8025748:	f7fb fa04 	bl	8020b54 <__aeabi_dcmpun>
 802574c:	2800      	cmp	r0, #0
 802574e:	f040 81fb 	bne.w	8025b48 <_printf_float+0x460>
 8025752:	f04f 32ff 	mov.w	r2, #4294967295
 8025756:	4ba0      	ldr	r3, [pc, #640]	; (80259d8 <_printf_float+0x2f0>)
 8025758:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 802575c:	f7fb f9dc 	bl	8020b18 <__aeabi_dcmple>
 8025760:	2800      	cmp	r0, #0
 8025762:	f040 81f1 	bne.w	8025b48 <_printf_float+0x460>
 8025766:	2200      	movs	r2, #0
 8025768:	2300      	movs	r3, #0
 802576a:	4640      	mov	r0, r8
 802576c:	4649      	mov	r1, r9
 802576e:	f7fb f9c9 	bl	8020b04 <__aeabi_dcmplt>
 8025772:	b110      	cbz	r0, 802577a <_printf_float+0x92>
 8025774:	232d      	movs	r3, #45	; 0x2d
 8025776:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802577a:	4b98      	ldr	r3, [pc, #608]	; (80259dc <_printf_float+0x2f4>)
 802577c:	4a98      	ldr	r2, [pc, #608]	; (80259e0 <_printf_float+0x2f8>)
 802577e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8025782:	bf8c      	ite	hi
 8025784:	4690      	movhi	r8, r2
 8025786:	4698      	movls	r8, r3
 8025788:	2303      	movs	r3, #3
 802578a:	f02b 0204 	bic.w	r2, fp, #4
 802578e:	6123      	str	r3, [r4, #16]
 8025790:	6022      	str	r2, [r4, #0]
 8025792:	f04f 0900 	mov.w	r9, #0
 8025796:	9700      	str	r7, [sp, #0]
 8025798:	4633      	mov	r3, r6
 802579a:	aa0b      	add	r2, sp, #44	; 0x2c
 802579c:	4621      	mov	r1, r4
 802579e:	4628      	mov	r0, r5
 80257a0:	f000 f9e2 	bl	8025b68 <_printf_common>
 80257a4:	3001      	adds	r0, #1
 80257a6:	f040 8093 	bne.w	80258d0 <_printf_float+0x1e8>
 80257aa:	f04f 30ff 	mov.w	r0, #4294967295
 80257ae:	b00d      	add	sp, #52	; 0x34
 80257b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80257b4:	6861      	ldr	r1, [r4, #4]
 80257b6:	1c4b      	adds	r3, r1, #1
 80257b8:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80257bc:	d13f      	bne.n	802583e <_printf_float+0x156>
 80257be:	2306      	movs	r3, #6
 80257c0:	6063      	str	r3, [r4, #4]
 80257c2:	2300      	movs	r3, #0
 80257c4:	9303      	str	r3, [sp, #12]
 80257c6:	ab0a      	add	r3, sp, #40	; 0x28
 80257c8:	9302      	str	r3, [sp, #8]
 80257ca:	ab09      	add	r3, sp, #36	; 0x24
 80257cc:	9300      	str	r3, [sp, #0]
 80257ce:	ec49 8b10 	vmov	d0, r8, r9
 80257d2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80257d6:	6022      	str	r2, [r4, #0]
 80257d8:	f8cd a004 	str.w	sl, [sp, #4]
 80257dc:	6861      	ldr	r1, [r4, #4]
 80257de:	4628      	mov	r0, r5
 80257e0:	f7ff feeb 	bl	80255ba <__cvt>
 80257e4:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80257e8:	2b47      	cmp	r3, #71	; 0x47
 80257ea:	4680      	mov	r8, r0
 80257ec:	d109      	bne.n	8025802 <_printf_float+0x11a>
 80257ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80257f0:	1cd8      	adds	r0, r3, #3
 80257f2:	db02      	blt.n	80257fa <_printf_float+0x112>
 80257f4:	6862      	ldr	r2, [r4, #4]
 80257f6:	4293      	cmp	r3, r2
 80257f8:	dd57      	ble.n	80258aa <_printf_float+0x1c2>
 80257fa:	f1aa 0a02 	sub.w	sl, sl, #2
 80257fe:	fa5f fa8a 	uxtb.w	sl, sl
 8025802:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8025806:	9909      	ldr	r1, [sp, #36]	; 0x24
 8025808:	d834      	bhi.n	8025874 <_printf_float+0x18c>
 802580a:	3901      	subs	r1, #1
 802580c:	4652      	mov	r2, sl
 802580e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8025812:	9109      	str	r1, [sp, #36]	; 0x24
 8025814:	f7ff ff32 	bl	802567c <__exponent>
 8025818:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802581a:	1883      	adds	r3, r0, r2
 802581c:	2a01      	cmp	r2, #1
 802581e:	4681      	mov	r9, r0
 8025820:	6123      	str	r3, [r4, #16]
 8025822:	dc02      	bgt.n	802582a <_printf_float+0x142>
 8025824:	6822      	ldr	r2, [r4, #0]
 8025826:	07d1      	lsls	r1, r2, #31
 8025828:	d501      	bpl.n	802582e <_printf_float+0x146>
 802582a:	3301      	adds	r3, #1
 802582c:	6123      	str	r3, [r4, #16]
 802582e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8025832:	2b00      	cmp	r3, #0
 8025834:	d0af      	beq.n	8025796 <_printf_float+0xae>
 8025836:	232d      	movs	r3, #45	; 0x2d
 8025838:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802583c:	e7ab      	b.n	8025796 <_printf_float+0xae>
 802583e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8025842:	d002      	beq.n	802584a <_printf_float+0x162>
 8025844:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8025848:	d1bb      	bne.n	80257c2 <_printf_float+0xda>
 802584a:	b189      	cbz	r1, 8025870 <_printf_float+0x188>
 802584c:	2300      	movs	r3, #0
 802584e:	9303      	str	r3, [sp, #12]
 8025850:	ab0a      	add	r3, sp, #40	; 0x28
 8025852:	9302      	str	r3, [sp, #8]
 8025854:	ab09      	add	r3, sp, #36	; 0x24
 8025856:	9300      	str	r3, [sp, #0]
 8025858:	ec49 8b10 	vmov	d0, r8, r9
 802585c:	6022      	str	r2, [r4, #0]
 802585e:	f8cd a004 	str.w	sl, [sp, #4]
 8025862:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8025866:	4628      	mov	r0, r5
 8025868:	f7ff fea7 	bl	80255ba <__cvt>
 802586c:	4680      	mov	r8, r0
 802586e:	e7be      	b.n	80257ee <_printf_float+0x106>
 8025870:	2301      	movs	r3, #1
 8025872:	e7a5      	b.n	80257c0 <_printf_float+0xd8>
 8025874:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8025878:	d119      	bne.n	80258ae <_printf_float+0x1c6>
 802587a:	2900      	cmp	r1, #0
 802587c:	6863      	ldr	r3, [r4, #4]
 802587e:	dd0c      	ble.n	802589a <_printf_float+0x1b2>
 8025880:	6121      	str	r1, [r4, #16]
 8025882:	b913      	cbnz	r3, 802588a <_printf_float+0x1a2>
 8025884:	6822      	ldr	r2, [r4, #0]
 8025886:	07d2      	lsls	r2, r2, #31
 8025888:	d502      	bpl.n	8025890 <_printf_float+0x1a8>
 802588a:	3301      	adds	r3, #1
 802588c:	440b      	add	r3, r1
 802588e:	6123      	str	r3, [r4, #16]
 8025890:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025892:	65a3      	str	r3, [r4, #88]	; 0x58
 8025894:	f04f 0900 	mov.w	r9, #0
 8025898:	e7c9      	b.n	802582e <_printf_float+0x146>
 802589a:	b913      	cbnz	r3, 80258a2 <_printf_float+0x1ba>
 802589c:	6822      	ldr	r2, [r4, #0]
 802589e:	07d0      	lsls	r0, r2, #31
 80258a0:	d501      	bpl.n	80258a6 <_printf_float+0x1be>
 80258a2:	3302      	adds	r3, #2
 80258a4:	e7f3      	b.n	802588e <_printf_float+0x1a6>
 80258a6:	2301      	movs	r3, #1
 80258a8:	e7f1      	b.n	802588e <_printf_float+0x1a6>
 80258aa:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80258ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80258b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80258b2:	4293      	cmp	r3, r2
 80258b4:	db05      	blt.n	80258c2 <_printf_float+0x1da>
 80258b6:	6822      	ldr	r2, [r4, #0]
 80258b8:	6123      	str	r3, [r4, #16]
 80258ba:	07d1      	lsls	r1, r2, #31
 80258bc:	d5e8      	bpl.n	8025890 <_printf_float+0x1a8>
 80258be:	3301      	adds	r3, #1
 80258c0:	e7e5      	b.n	802588e <_printf_float+0x1a6>
 80258c2:	2b00      	cmp	r3, #0
 80258c4:	bfd4      	ite	le
 80258c6:	f1c3 0302 	rsble	r3, r3, #2
 80258ca:	2301      	movgt	r3, #1
 80258cc:	4413      	add	r3, r2
 80258ce:	e7de      	b.n	802588e <_printf_float+0x1a6>
 80258d0:	6823      	ldr	r3, [r4, #0]
 80258d2:	055a      	lsls	r2, r3, #21
 80258d4:	d407      	bmi.n	80258e6 <_printf_float+0x1fe>
 80258d6:	6923      	ldr	r3, [r4, #16]
 80258d8:	4642      	mov	r2, r8
 80258da:	4631      	mov	r1, r6
 80258dc:	4628      	mov	r0, r5
 80258de:	47b8      	blx	r7
 80258e0:	3001      	adds	r0, #1
 80258e2:	d12b      	bne.n	802593c <_printf_float+0x254>
 80258e4:	e761      	b.n	80257aa <_printf_float+0xc2>
 80258e6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80258ea:	f240 80e2 	bls.w	8025ab2 <_printf_float+0x3ca>
 80258ee:	2200      	movs	r2, #0
 80258f0:	2300      	movs	r3, #0
 80258f2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80258f6:	f7fb f8fb 	bl	8020af0 <__aeabi_dcmpeq>
 80258fa:	2800      	cmp	r0, #0
 80258fc:	d03c      	beq.n	8025978 <_printf_float+0x290>
 80258fe:	2301      	movs	r3, #1
 8025900:	4a38      	ldr	r2, [pc, #224]	; (80259e4 <_printf_float+0x2fc>)
 8025902:	4631      	mov	r1, r6
 8025904:	4628      	mov	r0, r5
 8025906:	47b8      	blx	r7
 8025908:	3001      	adds	r0, #1
 802590a:	f43f af4e 	beq.w	80257aa <_printf_float+0xc2>
 802590e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025910:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8025912:	429a      	cmp	r2, r3
 8025914:	db02      	blt.n	802591c <_printf_float+0x234>
 8025916:	6823      	ldr	r3, [r4, #0]
 8025918:	07d8      	lsls	r0, r3, #31
 802591a:	d50f      	bpl.n	802593c <_printf_float+0x254>
 802591c:	9b05      	ldr	r3, [sp, #20]
 802591e:	9a04      	ldr	r2, [sp, #16]
 8025920:	4631      	mov	r1, r6
 8025922:	4628      	mov	r0, r5
 8025924:	47b8      	blx	r7
 8025926:	3001      	adds	r0, #1
 8025928:	f43f af3f 	beq.w	80257aa <_printf_float+0xc2>
 802592c:	f04f 0800 	mov.w	r8, #0
 8025930:	f104 091a 	add.w	r9, r4, #26
 8025934:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025936:	3b01      	subs	r3, #1
 8025938:	4598      	cmp	r8, r3
 802593a:	db12      	blt.n	8025962 <_printf_float+0x27a>
 802593c:	6823      	ldr	r3, [r4, #0]
 802593e:	079b      	lsls	r3, r3, #30
 8025940:	d509      	bpl.n	8025956 <_printf_float+0x26e>
 8025942:	f04f 0800 	mov.w	r8, #0
 8025946:	f104 0919 	add.w	r9, r4, #25
 802594a:	68e3      	ldr	r3, [r4, #12]
 802594c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802594e:	1a9b      	subs	r3, r3, r2
 8025950:	4598      	cmp	r8, r3
 8025952:	f2c0 80ee 	blt.w	8025b32 <_printf_float+0x44a>
 8025956:	68e0      	ldr	r0, [r4, #12]
 8025958:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802595a:	4298      	cmp	r0, r3
 802595c:	bfb8      	it	lt
 802595e:	4618      	movlt	r0, r3
 8025960:	e725      	b.n	80257ae <_printf_float+0xc6>
 8025962:	2301      	movs	r3, #1
 8025964:	464a      	mov	r2, r9
 8025966:	4631      	mov	r1, r6
 8025968:	4628      	mov	r0, r5
 802596a:	47b8      	blx	r7
 802596c:	3001      	adds	r0, #1
 802596e:	f43f af1c 	beq.w	80257aa <_printf_float+0xc2>
 8025972:	f108 0801 	add.w	r8, r8, #1
 8025976:	e7dd      	b.n	8025934 <_printf_float+0x24c>
 8025978:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802597a:	2b00      	cmp	r3, #0
 802597c:	dc34      	bgt.n	80259e8 <_printf_float+0x300>
 802597e:	2301      	movs	r3, #1
 8025980:	4a18      	ldr	r2, [pc, #96]	; (80259e4 <_printf_float+0x2fc>)
 8025982:	4631      	mov	r1, r6
 8025984:	4628      	mov	r0, r5
 8025986:	47b8      	blx	r7
 8025988:	3001      	adds	r0, #1
 802598a:	f43f af0e 	beq.w	80257aa <_printf_float+0xc2>
 802598e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025990:	b923      	cbnz	r3, 802599c <_printf_float+0x2b4>
 8025992:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025994:	b913      	cbnz	r3, 802599c <_printf_float+0x2b4>
 8025996:	6823      	ldr	r3, [r4, #0]
 8025998:	07d9      	lsls	r1, r3, #31
 802599a:	d5cf      	bpl.n	802593c <_printf_float+0x254>
 802599c:	9b05      	ldr	r3, [sp, #20]
 802599e:	9a04      	ldr	r2, [sp, #16]
 80259a0:	4631      	mov	r1, r6
 80259a2:	4628      	mov	r0, r5
 80259a4:	47b8      	blx	r7
 80259a6:	3001      	adds	r0, #1
 80259a8:	f43f aeff 	beq.w	80257aa <_printf_float+0xc2>
 80259ac:	f04f 0900 	mov.w	r9, #0
 80259b0:	f104 0a1a 	add.w	sl, r4, #26
 80259b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80259b6:	425b      	negs	r3, r3
 80259b8:	4599      	cmp	r9, r3
 80259ba:	db01      	blt.n	80259c0 <_printf_float+0x2d8>
 80259bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80259be:	e78b      	b.n	80258d8 <_printf_float+0x1f0>
 80259c0:	2301      	movs	r3, #1
 80259c2:	4652      	mov	r2, sl
 80259c4:	4631      	mov	r1, r6
 80259c6:	4628      	mov	r0, r5
 80259c8:	47b8      	blx	r7
 80259ca:	3001      	adds	r0, #1
 80259cc:	f43f aeed 	beq.w	80257aa <_printf_float+0xc2>
 80259d0:	f109 0901 	add.w	r9, r9, #1
 80259d4:	e7ee      	b.n	80259b4 <_printf_float+0x2cc>
 80259d6:	bf00      	nop
 80259d8:	7fefffff 	.word	0x7fefffff
 80259dc:	08028545 	.word	0x08028545
 80259e0:	08028549 	.word	0x08028549
 80259e4:	080286ab 	.word	0x080286ab
 80259e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80259ea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80259ec:	429a      	cmp	r2, r3
 80259ee:	bfa8      	it	ge
 80259f0:	461a      	movge	r2, r3
 80259f2:	2a00      	cmp	r2, #0
 80259f4:	4691      	mov	r9, r2
 80259f6:	dc38      	bgt.n	8025a6a <_printf_float+0x382>
 80259f8:	f104 031a 	add.w	r3, r4, #26
 80259fc:	f04f 0b00 	mov.w	fp, #0
 8025a00:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8025a04:	9306      	str	r3, [sp, #24]
 8025a06:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8025a0a:	ebaa 0309 	sub.w	r3, sl, r9
 8025a0e:	459b      	cmp	fp, r3
 8025a10:	db33      	blt.n	8025a7a <_printf_float+0x392>
 8025a12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025a14:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8025a16:	429a      	cmp	r2, r3
 8025a18:	db3a      	blt.n	8025a90 <_printf_float+0x3a8>
 8025a1a:	6823      	ldr	r3, [r4, #0]
 8025a1c:	07da      	lsls	r2, r3, #31
 8025a1e:	d437      	bmi.n	8025a90 <_printf_float+0x3a8>
 8025a20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025a22:	9909      	ldr	r1, [sp, #36]	; 0x24
 8025a24:	eba3 020a 	sub.w	r2, r3, sl
 8025a28:	eba3 0901 	sub.w	r9, r3, r1
 8025a2c:	4591      	cmp	r9, r2
 8025a2e:	bfa8      	it	ge
 8025a30:	4691      	movge	r9, r2
 8025a32:	f1b9 0f00 	cmp.w	r9, #0
 8025a36:	dc33      	bgt.n	8025aa0 <_printf_float+0x3b8>
 8025a38:	f04f 0800 	mov.w	r8, #0
 8025a3c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8025a40:	f104 0a1a 	add.w	sl, r4, #26
 8025a44:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8025a46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025a48:	1a9b      	subs	r3, r3, r2
 8025a4a:	eba3 0309 	sub.w	r3, r3, r9
 8025a4e:	4598      	cmp	r8, r3
 8025a50:	f6bf af74 	bge.w	802593c <_printf_float+0x254>
 8025a54:	2301      	movs	r3, #1
 8025a56:	4652      	mov	r2, sl
 8025a58:	4631      	mov	r1, r6
 8025a5a:	4628      	mov	r0, r5
 8025a5c:	47b8      	blx	r7
 8025a5e:	3001      	adds	r0, #1
 8025a60:	f43f aea3 	beq.w	80257aa <_printf_float+0xc2>
 8025a64:	f108 0801 	add.w	r8, r8, #1
 8025a68:	e7ec      	b.n	8025a44 <_printf_float+0x35c>
 8025a6a:	4613      	mov	r3, r2
 8025a6c:	4631      	mov	r1, r6
 8025a6e:	4642      	mov	r2, r8
 8025a70:	4628      	mov	r0, r5
 8025a72:	47b8      	blx	r7
 8025a74:	3001      	adds	r0, #1
 8025a76:	d1bf      	bne.n	80259f8 <_printf_float+0x310>
 8025a78:	e697      	b.n	80257aa <_printf_float+0xc2>
 8025a7a:	2301      	movs	r3, #1
 8025a7c:	9a06      	ldr	r2, [sp, #24]
 8025a7e:	4631      	mov	r1, r6
 8025a80:	4628      	mov	r0, r5
 8025a82:	47b8      	blx	r7
 8025a84:	3001      	adds	r0, #1
 8025a86:	f43f ae90 	beq.w	80257aa <_printf_float+0xc2>
 8025a8a:	f10b 0b01 	add.w	fp, fp, #1
 8025a8e:	e7ba      	b.n	8025a06 <_printf_float+0x31e>
 8025a90:	9b05      	ldr	r3, [sp, #20]
 8025a92:	9a04      	ldr	r2, [sp, #16]
 8025a94:	4631      	mov	r1, r6
 8025a96:	4628      	mov	r0, r5
 8025a98:	47b8      	blx	r7
 8025a9a:	3001      	adds	r0, #1
 8025a9c:	d1c0      	bne.n	8025a20 <_printf_float+0x338>
 8025a9e:	e684      	b.n	80257aa <_printf_float+0xc2>
 8025aa0:	464b      	mov	r3, r9
 8025aa2:	eb08 020a 	add.w	r2, r8, sl
 8025aa6:	4631      	mov	r1, r6
 8025aa8:	4628      	mov	r0, r5
 8025aaa:	47b8      	blx	r7
 8025aac:	3001      	adds	r0, #1
 8025aae:	d1c3      	bne.n	8025a38 <_printf_float+0x350>
 8025ab0:	e67b      	b.n	80257aa <_printf_float+0xc2>
 8025ab2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8025ab4:	2a01      	cmp	r2, #1
 8025ab6:	dc01      	bgt.n	8025abc <_printf_float+0x3d4>
 8025ab8:	07db      	lsls	r3, r3, #31
 8025aba:	d537      	bpl.n	8025b2c <_printf_float+0x444>
 8025abc:	2301      	movs	r3, #1
 8025abe:	4642      	mov	r2, r8
 8025ac0:	4631      	mov	r1, r6
 8025ac2:	4628      	mov	r0, r5
 8025ac4:	47b8      	blx	r7
 8025ac6:	3001      	adds	r0, #1
 8025ac8:	f43f ae6f 	beq.w	80257aa <_printf_float+0xc2>
 8025acc:	9b05      	ldr	r3, [sp, #20]
 8025ace:	9a04      	ldr	r2, [sp, #16]
 8025ad0:	4631      	mov	r1, r6
 8025ad2:	4628      	mov	r0, r5
 8025ad4:	47b8      	blx	r7
 8025ad6:	3001      	adds	r0, #1
 8025ad8:	f43f ae67 	beq.w	80257aa <_printf_float+0xc2>
 8025adc:	2200      	movs	r2, #0
 8025ade:	2300      	movs	r3, #0
 8025ae0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8025ae4:	f7fb f804 	bl	8020af0 <__aeabi_dcmpeq>
 8025ae8:	b158      	cbz	r0, 8025b02 <_printf_float+0x41a>
 8025aea:	f04f 0800 	mov.w	r8, #0
 8025aee:	f104 0a1a 	add.w	sl, r4, #26
 8025af2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025af4:	3b01      	subs	r3, #1
 8025af6:	4598      	cmp	r8, r3
 8025af8:	db0d      	blt.n	8025b16 <_printf_float+0x42e>
 8025afa:	464b      	mov	r3, r9
 8025afc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8025b00:	e6eb      	b.n	80258da <_printf_float+0x1f2>
 8025b02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025b04:	f108 0201 	add.w	r2, r8, #1
 8025b08:	3b01      	subs	r3, #1
 8025b0a:	4631      	mov	r1, r6
 8025b0c:	4628      	mov	r0, r5
 8025b0e:	47b8      	blx	r7
 8025b10:	3001      	adds	r0, #1
 8025b12:	d1f2      	bne.n	8025afa <_printf_float+0x412>
 8025b14:	e649      	b.n	80257aa <_printf_float+0xc2>
 8025b16:	2301      	movs	r3, #1
 8025b18:	4652      	mov	r2, sl
 8025b1a:	4631      	mov	r1, r6
 8025b1c:	4628      	mov	r0, r5
 8025b1e:	47b8      	blx	r7
 8025b20:	3001      	adds	r0, #1
 8025b22:	f43f ae42 	beq.w	80257aa <_printf_float+0xc2>
 8025b26:	f108 0801 	add.w	r8, r8, #1
 8025b2a:	e7e2      	b.n	8025af2 <_printf_float+0x40a>
 8025b2c:	2301      	movs	r3, #1
 8025b2e:	4642      	mov	r2, r8
 8025b30:	e7eb      	b.n	8025b0a <_printf_float+0x422>
 8025b32:	2301      	movs	r3, #1
 8025b34:	464a      	mov	r2, r9
 8025b36:	4631      	mov	r1, r6
 8025b38:	4628      	mov	r0, r5
 8025b3a:	47b8      	blx	r7
 8025b3c:	3001      	adds	r0, #1
 8025b3e:	f43f ae34 	beq.w	80257aa <_printf_float+0xc2>
 8025b42:	f108 0801 	add.w	r8, r8, #1
 8025b46:	e700      	b.n	802594a <_printf_float+0x262>
 8025b48:	4642      	mov	r2, r8
 8025b4a:	464b      	mov	r3, r9
 8025b4c:	4640      	mov	r0, r8
 8025b4e:	4649      	mov	r1, r9
 8025b50:	f7fb f800 	bl	8020b54 <__aeabi_dcmpun>
 8025b54:	2800      	cmp	r0, #0
 8025b56:	f43f ae2d 	beq.w	80257b4 <_printf_float+0xcc>
 8025b5a:	4b01      	ldr	r3, [pc, #4]	; (8025b60 <_printf_float+0x478>)
 8025b5c:	4a01      	ldr	r2, [pc, #4]	; (8025b64 <_printf_float+0x47c>)
 8025b5e:	e60e      	b.n	802577e <_printf_float+0x96>
 8025b60:	0802854d 	.word	0x0802854d
 8025b64:	08028551 	.word	0x08028551

08025b68 <_printf_common>:
 8025b68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8025b6c:	4691      	mov	r9, r2
 8025b6e:	461f      	mov	r7, r3
 8025b70:	688a      	ldr	r2, [r1, #8]
 8025b72:	690b      	ldr	r3, [r1, #16]
 8025b74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8025b78:	4293      	cmp	r3, r2
 8025b7a:	bfb8      	it	lt
 8025b7c:	4613      	movlt	r3, r2
 8025b7e:	f8c9 3000 	str.w	r3, [r9]
 8025b82:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8025b86:	4606      	mov	r6, r0
 8025b88:	460c      	mov	r4, r1
 8025b8a:	b112      	cbz	r2, 8025b92 <_printf_common+0x2a>
 8025b8c:	3301      	adds	r3, #1
 8025b8e:	f8c9 3000 	str.w	r3, [r9]
 8025b92:	6823      	ldr	r3, [r4, #0]
 8025b94:	0699      	lsls	r1, r3, #26
 8025b96:	bf42      	ittt	mi
 8025b98:	f8d9 3000 	ldrmi.w	r3, [r9]
 8025b9c:	3302      	addmi	r3, #2
 8025b9e:	f8c9 3000 	strmi.w	r3, [r9]
 8025ba2:	6825      	ldr	r5, [r4, #0]
 8025ba4:	f015 0506 	ands.w	r5, r5, #6
 8025ba8:	d107      	bne.n	8025bba <_printf_common+0x52>
 8025baa:	f104 0a19 	add.w	sl, r4, #25
 8025bae:	68e3      	ldr	r3, [r4, #12]
 8025bb0:	f8d9 2000 	ldr.w	r2, [r9]
 8025bb4:	1a9b      	subs	r3, r3, r2
 8025bb6:	429d      	cmp	r5, r3
 8025bb8:	db29      	blt.n	8025c0e <_printf_common+0xa6>
 8025bba:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8025bbe:	6822      	ldr	r2, [r4, #0]
 8025bc0:	3300      	adds	r3, #0
 8025bc2:	bf18      	it	ne
 8025bc4:	2301      	movne	r3, #1
 8025bc6:	0692      	lsls	r2, r2, #26
 8025bc8:	d42e      	bmi.n	8025c28 <_printf_common+0xc0>
 8025bca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8025bce:	4639      	mov	r1, r7
 8025bd0:	4630      	mov	r0, r6
 8025bd2:	47c0      	blx	r8
 8025bd4:	3001      	adds	r0, #1
 8025bd6:	d021      	beq.n	8025c1c <_printf_common+0xb4>
 8025bd8:	6823      	ldr	r3, [r4, #0]
 8025bda:	68e5      	ldr	r5, [r4, #12]
 8025bdc:	f8d9 2000 	ldr.w	r2, [r9]
 8025be0:	f003 0306 	and.w	r3, r3, #6
 8025be4:	2b04      	cmp	r3, #4
 8025be6:	bf08      	it	eq
 8025be8:	1aad      	subeq	r5, r5, r2
 8025bea:	68a3      	ldr	r3, [r4, #8]
 8025bec:	6922      	ldr	r2, [r4, #16]
 8025bee:	bf0c      	ite	eq
 8025bf0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8025bf4:	2500      	movne	r5, #0
 8025bf6:	4293      	cmp	r3, r2
 8025bf8:	bfc4      	itt	gt
 8025bfa:	1a9b      	subgt	r3, r3, r2
 8025bfc:	18ed      	addgt	r5, r5, r3
 8025bfe:	f04f 0900 	mov.w	r9, #0
 8025c02:	341a      	adds	r4, #26
 8025c04:	454d      	cmp	r5, r9
 8025c06:	d11b      	bne.n	8025c40 <_printf_common+0xd8>
 8025c08:	2000      	movs	r0, #0
 8025c0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8025c0e:	2301      	movs	r3, #1
 8025c10:	4652      	mov	r2, sl
 8025c12:	4639      	mov	r1, r7
 8025c14:	4630      	mov	r0, r6
 8025c16:	47c0      	blx	r8
 8025c18:	3001      	adds	r0, #1
 8025c1a:	d103      	bne.n	8025c24 <_printf_common+0xbc>
 8025c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8025c20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8025c24:	3501      	adds	r5, #1
 8025c26:	e7c2      	b.n	8025bae <_printf_common+0x46>
 8025c28:	18e1      	adds	r1, r4, r3
 8025c2a:	1c5a      	adds	r2, r3, #1
 8025c2c:	2030      	movs	r0, #48	; 0x30
 8025c2e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8025c32:	4422      	add	r2, r4
 8025c34:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8025c38:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8025c3c:	3302      	adds	r3, #2
 8025c3e:	e7c4      	b.n	8025bca <_printf_common+0x62>
 8025c40:	2301      	movs	r3, #1
 8025c42:	4622      	mov	r2, r4
 8025c44:	4639      	mov	r1, r7
 8025c46:	4630      	mov	r0, r6
 8025c48:	47c0      	blx	r8
 8025c4a:	3001      	adds	r0, #1
 8025c4c:	d0e6      	beq.n	8025c1c <_printf_common+0xb4>
 8025c4e:	f109 0901 	add.w	r9, r9, #1
 8025c52:	e7d7      	b.n	8025c04 <_printf_common+0x9c>

08025c54 <_printf_i>:
 8025c54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8025c58:	4617      	mov	r7, r2
 8025c5a:	7e0a      	ldrb	r2, [r1, #24]
 8025c5c:	b085      	sub	sp, #20
 8025c5e:	2a6e      	cmp	r2, #110	; 0x6e
 8025c60:	4698      	mov	r8, r3
 8025c62:	4606      	mov	r6, r0
 8025c64:	460c      	mov	r4, r1
 8025c66:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8025c68:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8025c6c:	f000 80bc 	beq.w	8025de8 <_printf_i+0x194>
 8025c70:	d81a      	bhi.n	8025ca8 <_printf_i+0x54>
 8025c72:	2a63      	cmp	r2, #99	; 0x63
 8025c74:	d02e      	beq.n	8025cd4 <_printf_i+0x80>
 8025c76:	d80a      	bhi.n	8025c8e <_printf_i+0x3a>
 8025c78:	2a00      	cmp	r2, #0
 8025c7a:	f000 80c8 	beq.w	8025e0e <_printf_i+0x1ba>
 8025c7e:	2a58      	cmp	r2, #88	; 0x58
 8025c80:	f000 808a 	beq.w	8025d98 <_printf_i+0x144>
 8025c84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8025c88:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8025c8c:	e02a      	b.n	8025ce4 <_printf_i+0x90>
 8025c8e:	2a64      	cmp	r2, #100	; 0x64
 8025c90:	d001      	beq.n	8025c96 <_printf_i+0x42>
 8025c92:	2a69      	cmp	r2, #105	; 0x69
 8025c94:	d1f6      	bne.n	8025c84 <_printf_i+0x30>
 8025c96:	6821      	ldr	r1, [r4, #0]
 8025c98:	681a      	ldr	r2, [r3, #0]
 8025c9a:	f011 0f80 	tst.w	r1, #128	; 0x80
 8025c9e:	d023      	beq.n	8025ce8 <_printf_i+0x94>
 8025ca0:	1d11      	adds	r1, r2, #4
 8025ca2:	6019      	str	r1, [r3, #0]
 8025ca4:	6813      	ldr	r3, [r2, #0]
 8025ca6:	e027      	b.n	8025cf8 <_printf_i+0xa4>
 8025ca8:	2a73      	cmp	r2, #115	; 0x73
 8025caa:	f000 80b4 	beq.w	8025e16 <_printf_i+0x1c2>
 8025cae:	d808      	bhi.n	8025cc2 <_printf_i+0x6e>
 8025cb0:	2a6f      	cmp	r2, #111	; 0x6f
 8025cb2:	d02a      	beq.n	8025d0a <_printf_i+0xb6>
 8025cb4:	2a70      	cmp	r2, #112	; 0x70
 8025cb6:	d1e5      	bne.n	8025c84 <_printf_i+0x30>
 8025cb8:	680a      	ldr	r2, [r1, #0]
 8025cba:	f042 0220 	orr.w	r2, r2, #32
 8025cbe:	600a      	str	r2, [r1, #0]
 8025cc0:	e003      	b.n	8025cca <_printf_i+0x76>
 8025cc2:	2a75      	cmp	r2, #117	; 0x75
 8025cc4:	d021      	beq.n	8025d0a <_printf_i+0xb6>
 8025cc6:	2a78      	cmp	r2, #120	; 0x78
 8025cc8:	d1dc      	bne.n	8025c84 <_printf_i+0x30>
 8025cca:	2278      	movs	r2, #120	; 0x78
 8025ccc:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8025cd0:	496e      	ldr	r1, [pc, #440]	; (8025e8c <_printf_i+0x238>)
 8025cd2:	e064      	b.n	8025d9e <_printf_i+0x14a>
 8025cd4:	681a      	ldr	r2, [r3, #0]
 8025cd6:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8025cda:	1d11      	adds	r1, r2, #4
 8025cdc:	6019      	str	r1, [r3, #0]
 8025cde:	6813      	ldr	r3, [r2, #0]
 8025ce0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8025ce4:	2301      	movs	r3, #1
 8025ce6:	e0a3      	b.n	8025e30 <_printf_i+0x1dc>
 8025ce8:	f011 0f40 	tst.w	r1, #64	; 0x40
 8025cec:	f102 0104 	add.w	r1, r2, #4
 8025cf0:	6019      	str	r1, [r3, #0]
 8025cf2:	d0d7      	beq.n	8025ca4 <_printf_i+0x50>
 8025cf4:	f9b2 3000 	ldrsh.w	r3, [r2]
 8025cf8:	2b00      	cmp	r3, #0
 8025cfa:	da03      	bge.n	8025d04 <_printf_i+0xb0>
 8025cfc:	222d      	movs	r2, #45	; 0x2d
 8025cfe:	425b      	negs	r3, r3
 8025d00:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8025d04:	4962      	ldr	r1, [pc, #392]	; (8025e90 <_printf_i+0x23c>)
 8025d06:	220a      	movs	r2, #10
 8025d08:	e017      	b.n	8025d3a <_printf_i+0xe6>
 8025d0a:	6820      	ldr	r0, [r4, #0]
 8025d0c:	6819      	ldr	r1, [r3, #0]
 8025d0e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8025d12:	d003      	beq.n	8025d1c <_printf_i+0xc8>
 8025d14:	1d08      	adds	r0, r1, #4
 8025d16:	6018      	str	r0, [r3, #0]
 8025d18:	680b      	ldr	r3, [r1, #0]
 8025d1a:	e006      	b.n	8025d2a <_printf_i+0xd6>
 8025d1c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8025d20:	f101 0004 	add.w	r0, r1, #4
 8025d24:	6018      	str	r0, [r3, #0]
 8025d26:	d0f7      	beq.n	8025d18 <_printf_i+0xc4>
 8025d28:	880b      	ldrh	r3, [r1, #0]
 8025d2a:	4959      	ldr	r1, [pc, #356]	; (8025e90 <_printf_i+0x23c>)
 8025d2c:	2a6f      	cmp	r2, #111	; 0x6f
 8025d2e:	bf14      	ite	ne
 8025d30:	220a      	movne	r2, #10
 8025d32:	2208      	moveq	r2, #8
 8025d34:	2000      	movs	r0, #0
 8025d36:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8025d3a:	6865      	ldr	r5, [r4, #4]
 8025d3c:	60a5      	str	r5, [r4, #8]
 8025d3e:	2d00      	cmp	r5, #0
 8025d40:	f2c0 809c 	blt.w	8025e7c <_printf_i+0x228>
 8025d44:	6820      	ldr	r0, [r4, #0]
 8025d46:	f020 0004 	bic.w	r0, r0, #4
 8025d4a:	6020      	str	r0, [r4, #0]
 8025d4c:	2b00      	cmp	r3, #0
 8025d4e:	d13f      	bne.n	8025dd0 <_printf_i+0x17c>
 8025d50:	2d00      	cmp	r5, #0
 8025d52:	f040 8095 	bne.w	8025e80 <_printf_i+0x22c>
 8025d56:	4675      	mov	r5, lr
 8025d58:	2a08      	cmp	r2, #8
 8025d5a:	d10b      	bne.n	8025d74 <_printf_i+0x120>
 8025d5c:	6823      	ldr	r3, [r4, #0]
 8025d5e:	07da      	lsls	r2, r3, #31
 8025d60:	d508      	bpl.n	8025d74 <_printf_i+0x120>
 8025d62:	6923      	ldr	r3, [r4, #16]
 8025d64:	6862      	ldr	r2, [r4, #4]
 8025d66:	429a      	cmp	r2, r3
 8025d68:	bfde      	ittt	le
 8025d6a:	2330      	movle	r3, #48	; 0x30
 8025d6c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8025d70:	f105 35ff 	addle.w	r5, r5, #4294967295
 8025d74:	ebae 0305 	sub.w	r3, lr, r5
 8025d78:	6123      	str	r3, [r4, #16]
 8025d7a:	f8cd 8000 	str.w	r8, [sp]
 8025d7e:	463b      	mov	r3, r7
 8025d80:	aa03      	add	r2, sp, #12
 8025d82:	4621      	mov	r1, r4
 8025d84:	4630      	mov	r0, r6
 8025d86:	f7ff feef 	bl	8025b68 <_printf_common>
 8025d8a:	3001      	adds	r0, #1
 8025d8c:	d155      	bne.n	8025e3a <_printf_i+0x1e6>
 8025d8e:	f04f 30ff 	mov.w	r0, #4294967295
 8025d92:	b005      	add	sp, #20
 8025d94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8025d98:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8025d9c:	493c      	ldr	r1, [pc, #240]	; (8025e90 <_printf_i+0x23c>)
 8025d9e:	6822      	ldr	r2, [r4, #0]
 8025da0:	6818      	ldr	r0, [r3, #0]
 8025da2:	f012 0f80 	tst.w	r2, #128	; 0x80
 8025da6:	f100 0504 	add.w	r5, r0, #4
 8025daa:	601d      	str	r5, [r3, #0]
 8025dac:	d001      	beq.n	8025db2 <_printf_i+0x15e>
 8025dae:	6803      	ldr	r3, [r0, #0]
 8025db0:	e002      	b.n	8025db8 <_printf_i+0x164>
 8025db2:	0655      	lsls	r5, r2, #25
 8025db4:	d5fb      	bpl.n	8025dae <_printf_i+0x15a>
 8025db6:	8803      	ldrh	r3, [r0, #0]
 8025db8:	07d0      	lsls	r0, r2, #31
 8025dba:	bf44      	itt	mi
 8025dbc:	f042 0220 	orrmi.w	r2, r2, #32
 8025dc0:	6022      	strmi	r2, [r4, #0]
 8025dc2:	b91b      	cbnz	r3, 8025dcc <_printf_i+0x178>
 8025dc4:	6822      	ldr	r2, [r4, #0]
 8025dc6:	f022 0220 	bic.w	r2, r2, #32
 8025dca:	6022      	str	r2, [r4, #0]
 8025dcc:	2210      	movs	r2, #16
 8025dce:	e7b1      	b.n	8025d34 <_printf_i+0xe0>
 8025dd0:	4675      	mov	r5, lr
 8025dd2:	fbb3 f0f2 	udiv	r0, r3, r2
 8025dd6:	fb02 3310 	mls	r3, r2, r0, r3
 8025dda:	5ccb      	ldrb	r3, [r1, r3]
 8025ddc:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8025de0:	4603      	mov	r3, r0
 8025de2:	2800      	cmp	r0, #0
 8025de4:	d1f5      	bne.n	8025dd2 <_printf_i+0x17e>
 8025de6:	e7b7      	b.n	8025d58 <_printf_i+0x104>
 8025de8:	6808      	ldr	r0, [r1, #0]
 8025dea:	681a      	ldr	r2, [r3, #0]
 8025dec:	6949      	ldr	r1, [r1, #20]
 8025dee:	f010 0f80 	tst.w	r0, #128	; 0x80
 8025df2:	d004      	beq.n	8025dfe <_printf_i+0x1aa>
 8025df4:	1d10      	adds	r0, r2, #4
 8025df6:	6018      	str	r0, [r3, #0]
 8025df8:	6813      	ldr	r3, [r2, #0]
 8025dfa:	6019      	str	r1, [r3, #0]
 8025dfc:	e007      	b.n	8025e0e <_printf_i+0x1ba>
 8025dfe:	f010 0f40 	tst.w	r0, #64	; 0x40
 8025e02:	f102 0004 	add.w	r0, r2, #4
 8025e06:	6018      	str	r0, [r3, #0]
 8025e08:	6813      	ldr	r3, [r2, #0]
 8025e0a:	d0f6      	beq.n	8025dfa <_printf_i+0x1a6>
 8025e0c:	8019      	strh	r1, [r3, #0]
 8025e0e:	2300      	movs	r3, #0
 8025e10:	6123      	str	r3, [r4, #16]
 8025e12:	4675      	mov	r5, lr
 8025e14:	e7b1      	b.n	8025d7a <_printf_i+0x126>
 8025e16:	681a      	ldr	r2, [r3, #0]
 8025e18:	1d11      	adds	r1, r2, #4
 8025e1a:	6019      	str	r1, [r3, #0]
 8025e1c:	6815      	ldr	r5, [r2, #0]
 8025e1e:	6862      	ldr	r2, [r4, #4]
 8025e20:	2100      	movs	r1, #0
 8025e22:	4628      	mov	r0, r5
 8025e24:	f7fa f9f4 	bl	8020210 <memchr>
 8025e28:	b108      	cbz	r0, 8025e2e <_printf_i+0x1da>
 8025e2a:	1b40      	subs	r0, r0, r5
 8025e2c:	6060      	str	r0, [r4, #4]
 8025e2e:	6863      	ldr	r3, [r4, #4]
 8025e30:	6123      	str	r3, [r4, #16]
 8025e32:	2300      	movs	r3, #0
 8025e34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8025e38:	e79f      	b.n	8025d7a <_printf_i+0x126>
 8025e3a:	6923      	ldr	r3, [r4, #16]
 8025e3c:	462a      	mov	r2, r5
 8025e3e:	4639      	mov	r1, r7
 8025e40:	4630      	mov	r0, r6
 8025e42:	47c0      	blx	r8
 8025e44:	3001      	adds	r0, #1
 8025e46:	d0a2      	beq.n	8025d8e <_printf_i+0x13a>
 8025e48:	6823      	ldr	r3, [r4, #0]
 8025e4a:	079b      	lsls	r3, r3, #30
 8025e4c:	d507      	bpl.n	8025e5e <_printf_i+0x20a>
 8025e4e:	2500      	movs	r5, #0
 8025e50:	f104 0919 	add.w	r9, r4, #25
 8025e54:	68e3      	ldr	r3, [r4, #12]
 8025e56:	9a03      	ldr	r2, [sp, #12]
 8025e58:	1a9b      	subs	r3, r3, r2
 8025e5a:	429d      	cmp	r5, r3
 8025e5c:	db05      	blt.n	8025e6a <_printf_i+0x216>
 8025e5e:	68e0      	ldr	r0, [r4, #12]
 8025e60:	9b03      	ldr	r3, [sp, #12]
 8025e62:	4298      	cmp	r0, r3
 8025e64:	bfb8      	it	lt
 8025e66:	4618      	movlt	r0, r3
 8025e68:	e793      	b.n	8025d92 <_printf_i+0x13e>
 8025e6a:	2301      	movs	r3, #1
 8025e6c:	464a      	mov	r2, r9
 8025e6e:	4639      	mov	r1, r7
 8025e70:	4630      	mov	r0, r6
 8025e72:	47c0      	blx	r8
 8025e74:	3001      	adds	r0, #1
 8025e76:	d08a      	beq.n	8025d8e <_printf_i+0x13a>
 8025e78:	3501      	adds	r5, #1
 8025e7a:	e7eb      	b.n	8025e54 <_printf_i+0x200>
 8025e7c:	2b00      	cmp	r3, #0
 8025e7e:	d1a7      	bne.n	8025dd0 <_printf_i+0x17c>
 8025e80:	780b      	ldrb	r3, [r1, #0]
 8025e82:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8025e86:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8025e8a:	e765      	b.n	8025d58 <_printf_i+0x104>
 8025e8c:	08028566 	.word	0x08028566
 8025e90:	08028555 	.word	0x08028555

08025e94 <siscanf>:
 8025e94:	b40e      	push	{r1, r2, r3}
 8025e96:	b530      	push	{r4, r5, lr}
 8025e98:	b09c      	sub	sp, #112	; 0x70
 8025e9a:	ac1f      	add	r4, sp, #124	; 0x7c
 8025e9c:	f44f 7201 	mov.w	r2, #516	; 0x204
 8025ea0:	f854 5b04 	ldr.w	r5, [r4], #4
 8025ea4:	f8ad 2014 	strh.w	r2, [sp, #20]
 8025ea8:	9002      	str	r0, [sp, #8]
 8025eaa:	9006      	str	r0, [sp, #24]
 8025eac:	f7fa f9a6 	bl	80201fc <strlen>
 8025eb0:	4b0b      	ldr	r3, [pc, #44]	; (8025ee0 <siscanf+0x4c>)
 8025eb2:	9003      	str	r0, [sp, #12]
 8025eb4:	9007      	str	r0, [sp, #28]
 8025eb6:	930b      	str	r3, [sp, #44]	; 0x2c
 8025eb8:	480a      	ldr	r0, [pc, #40]	; (8025ee4 <siscanf+0x50>)
 8025eba:	9401      	str	r4, [sp, #4]
 8025ebc:	2300      	movs	r3, #0
 8025ebe:	930f      	str	r3, [sp, #60]	; 0x3c
 8025ec0:	9314      	str	r3, [sp, #80]	; 0x50
 8025ec2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8025ec6:	f8ad 3016 	strh.w	r3, [sp, #22]
 8025eca:	462a      	mov	r2, r5
 8025ecc:	4623      	mov	r3, r4
 8025ece:	a902      	add	r1, sp, #8
 8025ed0:	6800      	ldr	r0, [r0, #0]
 8025ed2:	f001 fbe9 	bl	80276a8 <__ssvfiscanf_r>
 8025ed6:	b01c      	add	sp, #112	; 0x70
 8025ed8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8025edc:	b003      	add	sp, #12
 8025ede:	4770      	bx	lr
 8025ee0:	08025ee9 	.word	0x08025ee9
 8025ee4:	20000028 	.word	0x20000028

08025ee8 <__seofread>:
 8025ee8:	2000      	movs	r0, #0
 8025eea:	4770      	bx	lr

08025eec <_vsniprintf_r>:
 8025eec:	b530      	push	{r4, r5, lr}
 8025eee:	1e14      	subs	r4, r2, #0
 8025ef0:	4605      	mov	r5, r0
 8025ef2:	b09b      	sub	sp, #108	; 0x6c
 8025ef4:	4618      	mov	r0, r3
 8025ef6:	da05      	bge.n	8025f04 <_vsniprintf_r+0x18>
 8025ef8:	238b      	movs	r3, #139	; 0x8b
 8025efa:	602b      	str	r3, [r5, #0]
 8025efc:	f04f 30ff 	mov.w	r0, #4294967295
 8025f00:	b01b      	add	sp, #108	; 0x6c
 8025f02:	bd30      	pop	{r4, r5, pc}
 8025f04:	f44f 7302 	mov.w	r3, #520	; 0x208
 8025f08:	f8ad 300c 	strh.w	r3, [sp, #12]
 8025f0c:	bf14      	ite	ne
 8025f0e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8025f12:	4623      	moveq	r3, r4
 8025f14:	9302      	str	r3, [sp, #8]
 8025f16:	9305      	str	r3, [sp, #20]
 8025f18:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8025f1c:	9100      	str	r1, [sp, #0]
 8025f1e:	9104      	str	r1, [sp, #16]
 8025f20:	f8ad 300e 	strh.w	r3, [sp, #14]
 8025f24:	4602      	mov	r2, r0
 8025f26:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8025f28:	4669      	mov	r1, sp
 8025f2a:	4628      	mov	r0, r5
 8025f2c:	f001 fa6e 	bl	802740c <_svfiprintf_r>
 8025f30:	1c43      	adds	r3, r0, #1
 8025f32:	bfbc      	itt	lt
 8025f34:	238b      	movlt	r3, #139	; 0x8b
 8025f36:	602b      	strlt	r3, [r5, #0]
 8025f38:	2c00      	cmp	r4, #0
 8025f3a:	d0e1      	beq.n	8025f00 <_vsniprintf_r+0x14>
 8025f3c:	9b00      	ldr	r3, [sp, #0]
 8025f3e:	2200      	movs	r2, #0
 8025f40:	701a      	strb	r2, [r3, #0]
 8025f42:	e7dd      	b.n	8025f00 <_vsniprintf_r+0x14>

08025f44 <vsniprintf>:
 8025f44:	b507      	push	{r0, r1, r2, lr}
 8025f46:	9300      	str	r3, [sp, #0]
 8025f48:	4613      	mov	r3, r2
 8025f4a:	460a      	mov	r2, r1
 8025f4c:	4601      	mov	r1, r0
 8025f4e:	4803      	ldr	r0, [pc, #12]	; (8025f5c <vsniprintf+0x18>)
 8025f50:	6800      	ldr	r0, [r0, #0]
 8025f52:	f7ff ffcb 	bl	8025eec <_vsniprintf_r>
 8025f56:	b003      	add	sp, #12
 8025f58:	f85d fb04 	ldr.w	pc, [sp], #4
 8025f5c:	20000028 	.word	0x20000028

08025f60 <quorem>:
 8025f60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025f64:	6903      	ldr	r3, [r0, #16]
 8025f66:	690c      	ldr	r4, [r1, #16]
 8025f68:	429c      	cmp	r4, r3
 8025f6a:	4680      	mov	r8, r0
 8025f6c:	f300 8082 	bgt.w	8026074 <quorem+0x114>
 8025f70:	3c01      	subs	r4, #1
 8025f72:	f101 0714 	add.w	r7, r1, #20
 8025f76:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8025f7a:	f100 0614 	add.w	r6, r0, #20
 8025f7e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8025f82:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8025f86:	eb06 030e 	add.w	r3, r6, lr
 8025f8a:	3501      	adds	r5, #1
 8025f8c:	eb07 090e 	add.w	r9, r7, lr
 8025f90:	9301      	str	r3, [sp, #4]
 8025f92:	fbb0 f5f5 	udiv	r5, r0, r5
 8025f96:	b395      	cbz	r5, 8025ffe <quorem+0x9e>
 8025f98:	f04f 0a00 	mov.w	sl, #0
 8025f9c:	4638      	mov	r0, r7
 8025f9e:	46b4      	mov	ip, r6
 8025fa0:	46d3      	mov	fp, sl
 8025fa2:	f850 2b04 	ldr.w	r2, [r0], #4
 8025fa6:	b293      	uxth	r3, r2
 8025fa8:	fb05 a303 	mla	r3, r5, r3, sl
 8025fac:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8025fb0:	b29b      	uxth	r3, r3
 8025fb2:	ebab 0303 	sub.w	r3, fp, r3
 8025fb6:	0c12      	lsrs	r2, r2, #16
 8025fb8:	f8bc b000 	ldrh.w	fp, [ip]
 8025fbc:	fb05 a202 	mla	r2, r5, r2, sl
 8025fc0:	fa13 f38b 	uxtah	r3, r3, fp
 8025fc4:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8025fc8:	fa1f fb82 	uxth.w	fp, r2
 8025fcc:	f8dc 2000 	ldr.w	r2, [ip]
 8025fd0:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8025fd4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8025fd8:	b29b      	uxth	r3, r3
 8025fda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8025fde:	4581      	cmp	r9, r0
 8025fe0:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8025fe4:	f84c 3b04 	str.w	r3, [ip], #4
 8025fe8:	d2db      	bcs.n	8025fa2 <quorem+0x42>
 8025fea:	f856 300e 	ldr.w	r3, [r6, lr]
 8025fee:	b933      	cbnz	r3, 8025ffe <quorem+0x9e>
 8025ff0:	9b01      	ldr	r3, [sp, #4]
 8025ff2:	3b04      	subs	r3, #4
 8025ff4:	429e      	cmp	r6, r3
 8025ff6:	461a      	mov	r2, r3
 8025ff8:	d330      	bcc.n	802605c <quorem+0xfc>
 8025ffa:	f8c8 4010 	str.w	r4, [r8, #16]
 8025ffe:	4640      	mov	r0, r8
 8026000:	f001 f827 	bl	8027052 <__mcmp>
 8026004:	2800      	cmp	r0, #0
 8026006:	db25      	blt.n	8026054 <quorem+0xf4>
 8026008:	3501      	adds	r5, #1
 802600a:	4630      	mov	r0, r6
 802600c:	f04f 0e00 	mov.w	lr, #0
 8026010:	f857 2b04 	ldr.w	r2, [r7], #4
 8026014:	f8d0 c000 	ldr.w	ip, [r0]
 8026018:	b293      	uxth	r3, r2
 802601a:	ebae 0303 	sub.w	r3, lr, r3
 802601e:	0c12      	lsrs	r2, r2, #16
 8026020:	fa13 f38c 	uxtah	r3, r3, ip
 8026024:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8026028:	eb02 4223 	add.w	r2, r2, r3, asr #16
 802602c:	b29b      	uxth	r3, r3
 802602e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8026032:	45b9      	cmp	r9, r7
 8026034:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8026038:	f840 3b04 	str.w	r3, [r0], #4
 802603c:	d2e8      	bcs.n	8026010 <quorem+0xb0>
 802603e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8026042:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8026046:	b92a      	cbnz	r2, 8026054 <quorem+0xf4>
 8026048:	3b04      	subs	r3, #4
 802604a:	429e      	cmp	r6, r3
 802604c:	461a      	mov	r2, r3
 802604e:	d30b      	bcc.n	8026068 <quorem+0x108>
 8026050:	f8c8 4010 	str.w	r4, [r8, #16]
 8026054:	4628      	mov	r0, r5
 8026056:	b003      	add	sp, #12
 8026058:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802605c:	6812      	ldr	r2, [r2, #0]
 802605e:	3b04      	subs	r3, #4
 8026060:	2a00      	cmp	r2, #0
 8026062:	d1ca      	bne.n	8025ffa <quorem+0x9a>
 8026064:	3c01      	subs	r4, #1
 8026066:	e7c5      	b.n	8025ff4 <quorem+0x94>
 8026068:	6812      	ldr	r2, [r2, #0]
 802606a:	3b04      	subs	r3, #4
 802606c:	2a00      	cmp	r2, #0
 802606e:	d1ef      	bne.n	8026050 <quorem+0xf0>
 8026070:	3c01      	subs	r4, #1
 8026072:	e7ea      	b.n	802604a <quorem+0xea>
 8026074:	2000      	movs	r0, #0
 8026076:	e7ee      	b.n	8026056 <quorem+0xf6>

08026078 <_dtoa_r>:
 8026078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802607c:	ec57 6b10 	vmov	r6, r7, d0
 8026080:	b097      	sub	sp, #92	; 0x5c
 8026082:	e9cd 6700 	strd	r6, r7, [sp]
 8026086:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8026088:	9107      	str	r1, [sp, #28]
 802608a:	4604      	mov	r4, r0
 802608c:	920a      	str	r2, [sp, #40]	; 0x28
 802608e:	930f      	str	r3, [sp, #60]	; 0x3c
 8026090:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8026092:	b93e      	cbnz	r6, 80260a4 <_dtoa_r+0x2c>
 8026094:	2010      	movs	r0, #16
 8026096:	f000 fdcb 	bl	8026c30 <malloc>
 802609a:	6260      	str	r0, [r4, #36]	; 0x24
 802609c:	6046      	str	r6, [r0, #4]
 802609e:	6086      	str	r6, [r0, #8]
 80260a0:	6006      	str	r6, [r0, #0]
 80260a2:	60c6      	str	r6, [r0, #12]
 80260a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80260a6:	6819      	ldr	r1, [r3, #0]
 80260a8:	b151      	cbz	r1, 80260c0 <_dtoa_r+0x48>
 80260aa:	685a      	ldr	r2, [r3, #4]
 80260ac:	604a      	str	r2, [r1, #4]
 80260ae:	2301      	movs	r3, #1
 80260b0:	4093      	lsls	r3, r2
 80260b2:	608b      	str	r3, [r1, #8]
 80260b4:	4620      	mov	r0, r4
 80260b6:	f000 fdf7 	bl	8026ca8 <_Bfree>
 80260ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80260bc:	2200      	movs	r2, #0
 80260be:	601a      	str	r2, [r3, #0]
 80260c0:	9b01      	ldr	r3, [sp, #4]
 80260c2:	2b00      	cmp	r3, #0
 80260c4:	bfbf      	itttt	lt
 80260c6:	2301      	movlt	r3, #1
 80260c8:	602b      	strlt	r3, [r5, #0]
 80260ca:	9b01      	ldrlt	r3, [sp, #4]
 80260cc:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80260d0:	bfb2      	itee	lt
 80260d2:	9301      	strlt	r3, [sp, #4]
 80260d4:	2300      	movge	r3, #0
 80260d6:	602b      	strge	r3, [r5, #0]
 80260d8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80260dc:	4ba8      	ldr	r3, [pc, #672]	; (8026380 <_dtoa_r+0x308>)
 80260de:	ea33 0308 	bics.w	r3, r3, r8
 80260e2:	d11b      	bne.n	802611c <_dtoa_r+0xa4>
 80260e4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80260e6:	f242 730f 	movw	r3, #9999	; 0x270f
 80260ea:	6013      	str	r3, [r2, #0]
 80260ec:	9b00      	ldr	r3, [sp, #0]
 80260ee:	b923      	cbnz	r3, 80260fa <_dtoa_r+0x82>
 80260f0:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80260f4:	2800      	cmp	r0, #0
 80260f6:	f000 8578 	beq.w	8026bea <_dtoa_r+0xb72>
 80260fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80260fc:	b953      	cbnz	r3, 8026114 <_dtoa_r+0x9c>
 80260fe:	4ba1      	ldr	r3, [pc, #644]	; (8026384 <_dtoa_r+0x30c>)
 8026100:	e021      	b.n	8026146 <_dtoa_r+0xce>
 8026102:	4ba1      	ldr	r3, [pc, #644]	; (8026388 <_dtoa_r+0x310>)
 8026104:	9302      	str	r3, [sp, #8]
 8026106:	3308      	adds	r3, #8
 8026108:	9a21      	ldr	r2, [sp, #132]	; 0x84
 802610a:	6013      	str	r3, [r2, #0]
 802610c:	9802      	ldr	r0, [sp, #8]
 802610e:	b017      	add	sp, #92	; 0x5c
 8026110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026114:	4b9b      	ldr	r3, [pc, #620]	; (8026384 <_dtoa_r+0x30c>)
 8026116:	9302      	str	r3, [sp, #8]
 8026118:	3303      	adds	r3, #3
 802611a:	e7f5      	b.n	8026108 <_dtoa_r+0x90>
 802611c:	e9dd 6700 	ldrd	r6, r7, [sp]
 8026120:	2200      	movs	r2, #0
 8026122:	2300      	movs	r3, #0
 8026124:	4630      	mov	r0, r6
 8026126:	4639      	mov	r1, r7
 8026128:	f7fa fce2 	bl	8020af0 <__aeabi_dcmpeq>
 802612c:	4681      	mov	r9, r0
 802612e:	b160      	cbz	r0, 802614a <_dtoa_r+0xd2>
 8026130:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8026132:	2301      	movs	r3, #1
 8026134:	6013      	str	r3, [r2, #0]
 8026136:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8026138:	2b00      	cmp	r3, #0
 802613a:	f000 8553 	beq.w	8026be4 <_dtoa_r+0xb6c>
 802613e:	4b93      	ldr	r3, [pc, #588]	; (802638c <_dtoa_r+0x314>)
 8026140:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8026142:	6013      	str	r3, [r2, #0]
 8026144:	3b01      	subs	r3, #1
 8026146:	9302      	str	r3, [sp, #8]
 8026148:	e7e0      	b.n	802610c <_dtoa_r+0x94>
 802614a:	aa14      	add	r2, sp, #80	; 0x50
 802614c:	a915      	add	r1, sp, #84	; 0x54
 802614e:	ec47 6b10 	vmov	d0, r6, r7
 8026152:	4620      	mov	r0, r4
 8026154:	f000 fff5 	bl	8027142 <__d2b>
 8026158:	f3c8 550a 	ubfx	r5, r8, #20, #11
 802615c:	4682      	mov	sl, r0
 802615e:	2d00      	cmp	r5, #0
 8026160:	d07e      	beq.n	8026260 <_dtoa_r+0x1e8>
 8026162:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8026166:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 802616a:	4630      	mov	r0, r6
 802616c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8026170:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8026174:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
 8026178:	2200      	movs	r2, #0
 802617a:	4b85      	ldr	r3, [pc, #532]	; (8026390 <_dtoa_r+0x318>)
 802617c:	f7fa f89c 	bl	80202b8 <__aeabi_dsub>
 8026180:	a379      	add	r3, pc, #484	; (adr r3, 8026368 <_dtoa_r+0x2f0>)
 8026182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026186:	f7fa fa4b 	bl	8020620 <__aeabi_dmul>
 802618a:	a379      	add	r3, pc, #484	; (adr r3, 8026370 <_dtoa_r+0x2f8>)
 802618c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026190:	f7fa f894 	bl	80202bc <__adddf3>
 8026194:	4606      	mov	r6, r0
 8026196:	4628      	mov	r0, r5
 8026198:	460f      	mov	r7, r1
 802619a:	f7fa f9db 	bl	8020554 <__aeabi_i2d>
 802619e:	a376      	add	r3, pc, #472	; (adr r3, 8026378 <_dtoa_r+0x300>)
 80261a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80261a4:	f7fa fa3c 	bl	8020620 <__aeabi_dmul>
 80261a8:	4602      	mov	r2, r0
 80261aa:	460b      	mov	r3, r1
 80261ac:	4630      	mov	r0, r6
 80261ae:	4639      	mov	r1, r7
 80261b0:	f7fa f884 	bl	80202bc <__adddf3>
 80261b4:	4606      	mov	r6, r0
 80261b6:	460f      	mov	r7, r1
 80261b8:	f7fa fce2 	bl	8020b80 <__aeabi_d2iz>
 80261bc:	2200      	movs	r2, #0
 80261be:	4683      	mov	fp, r0
 80261c0:	2300      	movs	r3, #0
 80261c2:	4630      	mov	r0, r6
 80261c4:	4639      	mov	r1, r7
 80261c6:	f7fa fc9d 	bl	8020b04 <__aeabi_dcmplt>
 80261ca:	b158      	cbz	r0, 80261e4 <_dtoa_r+0x16c>
 80261cc:	4658      	mov	r0, fp
 80261ce:	f7fa f9c1 	bl	8020554 <__aeabi_i2d>
 80261d2:	4602      	mov	r2, r0
 80261d4:	460b      	mov	r3, r1
 80261d6:	4630      	mov	r0, r6
 80261d8:	4639      	mov	r1, r7
 80261da:	f7fa fc89 	bl	8020af0 <__aeabi_dcmpeq>
 80261de:	b908      	cbnz	r0, 80261e4 <_dtoa_r+0x16c>
 80261e0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80261e4:	f1bb 0f16 	cmp.w	fp, #22
 80261e8:	d859      	bhi.n	802629e <_dtoa_r+0x226>
 80261ea:	496a      	ldr	r1, [pc, #424]	; (8026394 <_dtoa_r+0x31c>)
 80261ec:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 80261f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80261f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80261f8:	f7fa fca2 	bl	8020b40 <__aeabi_dcmpgt>
 80261fc:	2800      	cmp	r0, #0
 80261fe:	d050      	beq.n	80262a2 <_dtoa_r+0x22a>
 8026200:	f10b 3bff 	add.w	fp, fp, #4294967295
 8026204:	2300      	movs	r3, #0
 8026206:	930e      	str	r3, [sp, #56]	; 0x38
 8026208:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802620a:	1b5d      	subs	r5, r3, r5
 802620c:	1e6b      	subs	r3, r5, #1
 802620e:	9306      	str	r3, [sp, #24]
 8026210:	bf45      	ittet	mi
 8026212:	f1c5 0301 	rsbmi	r3, r5, #1
 8026216:	9305      	strmi	r3, [sp, #20]
 8026218:	2300      	movpl	r3, #0
 802621a:	2300      	movmi	r3, #0
 802621c:	bf4c      	ite	mi
 802621e:	9306      	strmi	r3, [sp, #24]
 8026220:	9305      	strpl	r3, [sp, #20]
 8026222:	f1bb 0f00 	cmp.w	fp, #0
 8026226:	db3e      	blt.n	80262a6 <_dtoa_r+0x22e>
 8026228:	9b06      	ldr	r3, [sp, #24]
 802622a:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 802622e:	445b      	add	r3, fp
 8026230:	9306      	str	r3, [sp, #24]
 8026232:	2300      	movs	r3, #0
 8026234:	9308      	str	r3, [sp, #32]
 8026236:	9b07      	ldr	r3, [sp, #28]
 8026238:	2b09      	cmp	r3, #9
 802623a:	f200 80af 	bhi.w	802639c <_dtoa_r+0x324>
 802623e:	2b05      	cmp	r3, #5
 8026240:	bfc4      	itt	gt
 8026242:	3b04      	subgt	r3, #4
 8026244:	9307      	strgt	r3, [sp, #28]
 8026246:	9b07      	ldr	r3, [sp, #28]
 8026248:	f1a3 0302 	sub.w	r3, r3, #2
 802624c:	bfcc      	ite	gt
 802624e:	2600      	movgt	r6, #0
 8026250:	2601      	movle	r6, #1
 8026252:	2b03      	cmp	r3, #3
 8026254:	f200 80ae 	bhi.w	80263b4 <_dtoa_r+0x33c>
 8026258:	e8df f003 	tbb	[pc, r3]
 802625c:	772f8482 	.word	0x772f8482
 8026260:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8026262:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8026264:	441d      	add	r5, r3
 8026266:	f205 4332 	addw	r3, r5, #1074	; 0x432
 802626a:	2b20      	cmp	r3, #32
 802626c:	dd11      	ble.n	8026292 <_dtoa_r+0x21a>
 802626e:	9a00      	ldr	r2, [sp, #0]
 8026270:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8026274:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8026278:	fa22 f000 	lsr.w	r0, r2, r0
 802627c:	fa08 f303 	lsl.w	r3, r8, r3
 8026280:	4318      	orrs	r0, r3
 8026282:	f7fa f957 	bl	8020534 <__aeabi_ui2d>
 8026286:	2301      	movs	r3, #1
 8026288:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 802628c:	3d01      	subs	r5, #1
 802628e:	9312      	str	r3, [sp, #72]	; 0x48
 8026290:	e772      	b.n	8026178 <_dtoa_r+0x100>
 8026292:	f1c3 0020 	rsb	r0, r3, #32
 8026296:	9b00      	ldr	r3, [sp, #0]
 8026298:	fa03 f000 	lsl.w	r0, r3, r0
 802629c:	e7f1      	b.n	8026282 <_dtoa_r+0x20a>
 802629e:	2301      	movs	r3, #1
 80262a0:	e7b1      	b.n	8026206 <_dtoa_r+0x18e>
 80262a2:	900e      	str	r0, [sp, #56]	; 0x38
 80262a4:	e7b0      	b.n	8026208 <_dtoa_r+0x190>
 80262a6:	9b05      	ldr	r3, [sp, #20]
 80262a8:	eba3 030b 	sub.w	r3, r3, fp
 80262ac:	9305      	str	r3, [sp, #20]
 80262ae:	f1cb 0300 	rsb	r3, fp, #0
 80262b2:	9308      	str	r3, [sp, #32]
 80262b4:	2300      	movs	r3, #0
 80262b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80262b8:	e7bd      	b.n	8026236 <_dtoa_r+0x1be>
 80262ba:	2301      	movs	r3, #1
 80262bc:	9309      	str	r3, [sp, #36]	; 0x24
 80262be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80262c0:	2b00      	cmp	r3, #0
 80262c2:	dd7a      	ble.n	80263ba <_dtoa_r+0x342>
 80262c4:	9304      	str	r3, [sp, #16]
 80262c6:	9303      	str	r3, [sp, #12]
 80262c8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80262ca:	2200      	movs	r2, #0
 80262cc:	606a      	str	r2, [r5, #4]
 80262ce:	2104      	movs	r1, #4
 80262d0:	f101 0214 	add.w	r2, r1, #20
 80262d4:	429a      	cmp	r2, r3
 80262d6:	d975      	bls.n	80263c4 <_dtoa_r+0x34c>
 80262d8:	6869      	ldr	r1, [r5, #4]
 80262da:	4620      	mov	r0, r4
 80262dc:	f000 fcb0 	bl	8026c40 <_Balloc>
 80262e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80262e2:	6028      	str	r0, [r5, #0]
 80262e4:	681b      	ldr	r3, [r3, #0]
 80262e6:	9302      	str	r3, [sp, #8]
 80262e8:	9b03      	ldr	r3, [sp, #12]
 80262ea:	2b0e      	cmp	r3, #14
 80262ec:	f200 80e5 	bhi.w	80264ba <_dtoa_r+0x442>
 80262f0:	2e00      	cmp	r6, #0
 80262f2:	f000 80e2 	beq.w	80264ba <_dtoa_r+0x442>
 80262f6:	ed9d 7b00 	vldr	d7, [sp]
 80262fa:	f1bb 0f00 	cmp.w	fp, #0
 80262fe:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8026302:	dd74      	ble.n	80263ee <_dtoa_r+0x376>
 8026304:	4a23      	ldr	r2, [pc, #140]	; (8026394 <_dtoa_r+0x31c>)
 8026306:	f00b 030f 	and.w	r3, fp, #15
 802630a:	ea4f 162b 	mov.w	r6, fp, asr #4
 802630e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8026312:	06f0      	lsls	r0, r6, #27
 8026314:	e9d3 8900 	ldrd	r8, r9, [r3]
 8026318:	d559      	bpl.n	80263ce <_dtoa_r+0x356>
 802631a:	4b1f      	ldr	r3, [pc, #124]	; (8026398 <_dtoa_r+0x320>)
 802631c:	ec51 0b17 	vmov	r0, r1, d7
 8026320:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8026324:	f7fa faa6 	bl	8020874 <__aeabi_ddiv>
 8026328:	e9cd 0100 	strd	r0, r1, [sp]
 802632c:	f006 060f 	and.w	r6, r6, #15
 8026330:	2503      	movs	r5, #3
 8026332:	4f19      	ldr	r7, [pc, #100]	; (8026398 <_dtoa_r+0x320>)
 8026334:	2e00      	cmp	r6, #0
 8026336:	d14c      	bne.n	80263d2 <_dtoa_r+0x35a>
 8026338:	4642      	mov	r2, r8
 802633a:	464b      	mov	r3, r9
 802633c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8026340:	f7fa fa98 	bl	8020874 <__aeabi_ddiv>
 8026344:	e9cd 0100 	strd	r0, r1, [sp]
 8026348:	e06a      	b.n	8026420 <_dtoa_r+0x3a8>
 802634a:	2301      	movs	r3, #1
 802634c:	9309      	str	r3, [sp, #36]	; 0x24
 802634e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026350:	445b      	add	r3, fp
 8026352:	9304      	str	r3, [sp, #16]
 8026354:	3301      	adds	r3, #1
 8026356:	2b01      	cmp	r3, #1
 8026358:	9303      	str	r3, [sp, #12]
 802635a:	bfb8      	it	lt
 802635c:	2301      	movlt	r3, #1
 802635e:	e7b3      	b.n	80262c8 <_dtoa_r+0x250>
 8026360:	2300      	movs	r3, #0
 8026362:	e7ab      	b.n	80262bc <_dtoa_r+0x244>
 8026364:	2300      	movs	r3, #0
 8026366:	e7f1      	b.n	802634c <_dtoa_r+0x2d4>
 8026368:	636f4361 	.word	0x636f4361
 802636c:	3fd287a7 	.word	0x3fd287a7
 8026370:	8b60c8b3 	.word	0x8b60c8b3
 8026374:	3fc68a28 	.word	0x3fc68a28
 8026378:	509f79fb 	.word	0x509f79fb
 802637c:	3fd34413 	.word	0x3fd34413
 8026380:	7ff00000 	.word	0x7ff00000
 8026384:	08028580 	.word	0x08028580
 8026388:	08028577 	.word	0x08028577
 802638c:	080286ac 	.word	0x080286ac
 8026390:	3ff80000 	.word	0x3ff80000
 8026394:	080285b0 	.word	0x080285b0
 8026398:	08028588 	.word	0x08028588
 802639c:	2601      	movs	r6, #1
 802639e:	2300      	movs	r3, #0
 80263a0:	9307      	str	r3, [sp, #28]
 80263a2:	9609      	str	r6, [sp, #36]	; 0x24
 80263a4:	f04f 33ff 	mov.w	r3, #4294967295
 80263a8:	9304      	str	r3, [sp, #16]
 80263aa:	9303      	str	r3, [sp, #12]
 80263ac:	2200      	movs	r2, #0
 80263ae:	2312      	movs	r3, #18
 80263b0:	920a      	str	r2, [sp, #40]	; 0x28
 80263b2:	e789      	b.n	80262c8 <_dtoa_r+0x250>
 80263b4:	2301      	movs	r3, #1
 80263b6:	9309      	str	r3, [sp, #36]	; 0x24
 80263b8:	e7f4      	b.n	80263a4 <_dtoa_r+0x32c>
 80263ba:	2301      	movs	r3, #1
 80263bc:	9304      	str	r3, [sp, #16]
 80263be:	9303      	str	r3, [sp, #12]
 80263c0:	461a      	mov	r2, r3
 80263c2:	e7f5      	b.n	80263b0 <_dtoa_r+0x338>
 80263c4:	686a      	ldr	r2, [r5, #4]
 80263c6:	3201      	adds	r2, #1
 80263c8:	606a      	str	r2, [r5, #4]
 80263ca:	0049      	lsls	r1, r1, #1
 80263cc:	e780      	b.n	80262d0 <_dtoa_r+0x258>
 80263ce:	2502      	movs	r5, #2
 80263d0:	e7af      	b.n	8026332 <_dtoa_r+0x2ba>
 80263d2:	07f1      	lsls	r1, r6, #31
 80263d4:	d508      	bpl.n	80263e8 <_dtoa_r+0x370>
 80263d6:	4640      	mov	r0, r8
 80263d8:	4649      	mov	r1, r9
 80263da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80263de:	f7fa f91f 	bl	8020620 <__aeabi_dmul>
 80263e2:	3501      	adds	r5, #1
 80263e4:	4680      	mov	r8, r0
 80263e6:	4689      	mov	r9, r1
 80263e8:	1076      	asrs	r6, r6, #1
 80263ea:	3708      	adds	r7, #8
 80263ec:	e7a2      	b.n	8026334 <_dtoa_r+0x2bc>
 80263ee:	f000 809d 	beq.w	802652c <_dtoa_r+0x4b4>
 80263f2:	f1cb 0600 	rsb	r6, fp, #0
 80263f6:	4b9f      	ldr	r3, [pc, #636]	; (8026674 <_dtoa_r+0x5fc>)
 80263f8:	4f9f      	ldr	r7, [pc, #636]	; (8026678 <_dtoa_r+0x600>)
 80263fa:	f006 020f 	and.w	r2, r6, #15
 80263fe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8026402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026406:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 802640a:	f7fa f909 	bl	8020620 <__aeabi_dmul>
 802640e:	e9cd 0100 	strd	r0, r1, [sp]
 8026412:	1136      	asrs	r6, r6, #4
 8026414:	2300      	movs	r3, #0
 8026416:	2502      	movs	r5, #2
 8026418:	2e00      	cmp	r6, #0
 802641a:	d17c      	bne.n	8026516 <_dtoa_r+0x49e>
 802641c:	2b00      	cmp	r3, #0
 802641e:	d191      	bne.n	8026344 <_dtoa_r+0x2cc>
 8026420:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8026422:	2b00      	cmp	r3, #0
 8026424:	f000 8084 	beq.w	8026530 <_dtoa_r+0x4b8>
 8026428:	e9dd 8900 	ldrd	r8, r9, [sp]
 802642c:	2200      	movs	r2, #0
 802642e:	4b93      	ldr	r3, [pc, #588]	; (802667c <_dtoa_r+0x604>)
 8026430:	4640      	mov	r0, r8
 8026432:	4649      	mov	r1, r9
 8026434:	f7fa fb66 	bl	8020b04 <__aeabi_dcmplt>
 8026438:	2800      	cmp	r0, #0
 802643a:	d079      	beq.n	8026530 <_dtoa_r+0x4b8>
 802643c:	9b03      	ldr	r3, [sp, #12]
 802643e:	2b00      	cmp	r3, #0
 8026440:	d076      	beq.n	8026530 <_dtoa_r+0x4b8>
 8026442:	9b04      	ldr	r3, [sp, #16]
 8026444:	2b00      	cmp	r3, #0
 8026446:	dd34      	ble.n	80264b2 <_dtoa_r+0x43a>
 8026448:	2200      	movs	r2, #0
 802644a:	4b8d      	ldr	r3, [pc, #564]	; (8026680 <_dtoa_r+0x608>)
 802644c:	4640      	mov	r0, r8
 802644e:	4649      	mov	r1, r9
 8026450:	f7fa f8e6 	bl	8020620 <__aeabi_dmul>
 8026454:	e9cd 0100 	strd	r0, r1, [sp]
 8026458:	9e04      	ldr	r6, [sp, #16]
 802645a:	f10b 37ff 	add.w	r7, fp, #4294967295
 802645e:	3501      	adds	r5, #1
 8026460:	4628      	mov	r0, r5
 8026462:	f7fa f877 	bl	8020554 <__aeabi_i2d>
 8026466:	e9dd 2300 	ldrd	r2, r3, [sp]
 802646a:	f7fa f8d9 	bl	8020620 <__aeabi_dmul>
 802646e:	2200      	movs	r2, #0
 8026470:	4b84      	ldr	r3, [pc, #528]	; (8026684 <_dtoa_r+0x60c>)
 8026472:	f7f9 ff23 	bl	80202bc <__adddf3>
 8026476:	4680      	mov	r8, r0
 8026478:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 802647c:	2e00      	cmp	r6, #0
 802647e:	d15a      	bne.n	8026536 <_dtoa_r+0x4be>
 8026480:	2200      	movs	r2, #0
 8026482:	4b81      	ldr	r3, [pc, #516]	; (8026688 <_dtoa_r+0x610>)
 8026484:	e9dd 0100 	ldrd	r0, r1, [sp]
 8026488:	f7f9 ff16 	bl	80202b8 <__aeabi_dsub>
 802648c:	4642      	mov	r2, r8
 802648e:	464b      	mov	r3, r9
 8026490:	e9cd 0100 	strd	r0, r1, [sp]
 8026494:	f7fa fb54 	bl	8020b40 <__aeabi_dcmpgt>
 8026498:	2800      	cmp	r0, #0
 802649a:	f040 829b 	bne.w	80269d4 <_dtoa_r+0x95c>
 802649e:	4642      	mov	r2, r8
 80264a0:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80264a4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80264a8:	f7fa fb2c 	bl	8020b04 <__aeabi_dcmplt>
 80264ac:	2800      	cmp	r0, #0
 80264ae:	f040 828f 	bne.w	80269d0 <_dtoa_r+0x958>
 80264b2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80264b6:	e9cd 2300 	strd	r2, r3, [sp]
 80264ba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80264bc:	2b00      	cmp	r3, #0
 80264be:	f2c0 8150 	blt.w	8026762 <_dtoa_r+0x6ea>
 80264c2:	f1bb 0f0e 	cmp.w	fp, #14
 80264c6:	f300 814c 	bgt.w	8026762 <_dtoa_r+0x6ea>
 80264ca:	4b6a      	ldr	r3, [pc, #424]	; (8026674 <_dtoa_r+0x5fc>)
 80264cc:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80264d0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80264d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80264d6:	2b00      	cmp	r3, #0
 80264d8:	f280 80da 	bge.w	8026690 <_dtoa_r+0x618>
 80264dc:	9b03      	ldr	r3, [sp, #12]
 80264de:	2b00      	cmp	r3, #0
 80264e0:	f300 80d6 	bgt.w	8026690 <_dtoa_r+0x618>
 80264e4:	f040 8273 	bne.w	80269ce <_dtoa_r+0x956>
 80264e8:	2200      	movs	r2, #0
 80264ea:	4b67      	ldr	r3, [pc, #412]	; (8026688 <_dtoa_r+0x610>)
 80264ec:	4640      	mov	r0, r8
 80264ee:	4649      	mov	r1, r9
 80264f0:	f7fa f896 	bl	8020620 <__aeabi_dmul>
 80264f4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80264f8:	f7fa fb18 	bl	8020b2c <__aeabi_dcmpge>
 80264fc:	9e03      	ldr	r6, [sp, #12]
 80264fe:	4637      	mov	r7, r6
 8026500:	2800      	cmp	r0, #0
 8026502:	f040 824a 	bne.w	802699a <_dtoa_r+0x922>
 8026506:	9b02      	ldr	r3, [sp, #8]
 8026508:	9a02      	ldr	r2, [sp, #8]
 802650a:	1c5d      	adds	r5, r3, #1
 802650c:	2331      	movs	r3, #49	; 0x31
 802650e:	7013      	strb	r3, [r2, #0]
 8026510:	f10b 0b01 	add.w	fp, fp, #1
 8026514:	e245      	b.n	80269a2 <_dtoa_r+0x92a>
 8026516:	07f2      	lsls	r2, r6, #31
 8026518:	d505      	bpl.n	8026526 <_dtoa_r+0x4ae>
 802651a:	e9d7 2300 	ldrd	r2, r3, [r7]
 802651e:	f7fa f87f 	bl	8020620 <__aeabi_dmul>
 8026522:	3501      	adds	r5, #1
 8026524:	2301      	movs	r3, #1
 8026526:	1076      	asrs	r6, r6, #1
 8026528:	3708      	adds	r7, #8
 802652a:	e775      	b.n	8026418 <_dtoa_r+0x3a0>
 802652c:	2502      	movs	r5, #2
 802652e:	e777      	b.n	8026420 <_dtoa_r+0x3a8>
 8026530:	465f      	mov	r7, fp
 8026532:	9e03      	ldr	r6, [sp, #12]
 8026534:	e794      	b.n	8026460 <_dtoa_r+0x3e8>
 8026536:	9a02      	ldr	r2, [sp, #8]
 8026538:	4b4e      	ldr	r3, [pc, #312]	; (8026674 <_dtoa_r+0x5fc>)
 802653a:	4432      	add	r2, r6
 802653c:	9213      	str	r2, [sp, #76]	; 0x4c
 802653e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8026540:	1e71      	subs	r1, r6, #1
 8026542:	2a00      	cmp	r2, #0
 8026544:	d048      	beq.n	80265d8 <_dtoa_r+0x560>
 8026546:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 802654a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802654e:	2000      	movs	r0, #0
 8026550:	494e      	ldr	r1, [pc, #312]	; (802668c <_dtoa_r+0x614>)
 8026552:	f7fa f98f 	bl	8020874 <__aeabi_ddiv>
 8026556:	4642      	mov	r2, r8
 8026558:	464b      	mov	r3, r9
 802655a:	f7f9 fead 	bl	80202b8 <__aeabi_dsub>
 802655e:	9d02      	ldr	r5, [sp, #8]
 8026560:	4680      	mov	r8, r0
 8026562:	4689      	mov	r9, r1
 8026564:	e9dd 0100 	ldrd	r0, r1, [sp]
 8026568:	f7fa fb0a 	bl	8020b80 <__aeabi_d2iz>
 802656c:	4606      	mov	r6, r0
 802656e:	f7f9 fff1 	bl	8020554 <__aeabi_i2d>
 8026572:	4602      	mov	r2, r0
 8026574:	460b      	mov	r3, r1
 8026576:	e9dd 0100 	ldrd	r0, r1, [sp]
 802657a:	f7f9 fe9d 	bl	80202b8 <__aeabi_dsub>
 802657e:	3630      	adds	r6, #48	; 0x30
 8026580:	f805 6b01 	strb.w	r6, [r5], #1
 8026584:	4642      	mov	r2, r8
 8026586:	464b      	mov	r3, r9
 8026588:	e9cd 0100 	strd	r0, r1, [sp]
 802658c:	f7fa faba 	bl	8020b04 <__aeabi_dcmplt>
 8026590:	2800      	cmp	r0, #0
 8026592:	d165      	bne.n	8026660 <_dtoa_r+0x5e8>
 8026594:	e9dd 2300 	ldrd	r2, r3, [sp]
 8026598:	2000      	movs	r0, #0
 802659a:	4938      	ldr	r1, [pc, #224]	; (802667c <_dtoa_r+0x604>)
 802659c:	f7f9 fe8c 	bl	80202b8 <__aeabi_dsub>
 80265a0:	4642      	mov	r2, r8
 80265a2:	464b      	mov	r3, r9
 80265a4:	f7fa faae 	bl	8020b04 <__aeabi_dcmplt>
 80265a8:	2800      	cmp	r0, #0
 80265aa:	f040 80ba 	bne.w	8026722 <_dtoa_r+0x6aa>
 80265ae:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80265b0:	429d      	cmp	r5, r3
 80265b2:	f43f af7e 	beq.w	80264b2 <_dtoa_r+0x43a>
 80265b6:	2200      	movs	r2, #0
 80265b8:	4b31      	ldr	r3, [pc, #196]	; (8026680 <_dtoa_r+0x608>)
 80265ba:	4640      	mov	r0, r8
 80265bc:	4649      	mov	r1, r9
 80265be:	f7fa f82f 	bl	8020620 <__aeabi_dmul>
 80265c2:	2200      	movs	r2, #0
 80265c4:	4680      	mov	r8, r0
 80265c6:	4689      	mov	r9, r1
 80265c8:	4b2d      	ldr	r3, [pc, #180]	; (8026680 <_dtoa_r+0x608>)
 80265ca:	e9dd 0100 	ldrd	r0, r1, [sp]
 80265ce:	f7fa f827 	bl	8020620 <__aeabi_dmul>
 80265d2:	e9cd 0100 	strd	r0, r1, [sp]
 80265d6:	e7c5      	b.n	8026564 <_dtoa_r+0x4ec>
 80265d8:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 80265dc:	4642      	mov	r2, r8
 80265de:	464b      	mov	r3, r9
 80265e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80265e4:	f7fa f81c 	bl	8020620 <__aeabi_dmul>
 80265e8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80265ec:	9d02      	ldr	r5, [sp, #8]
 80265ee:	e9dd 0100 	ldrd	r0, r1, [sp]
 80265f2:	f7fa fac5 	bl	8020b80 <__aeabi_d2iz>
 80265f6:	4606      	mov	r6, r0
 80265f8:	f7f9 ffac 	bl	8020554 <__aeabi_i2d>
 80265fc:	3630      	adds	r6, #48	; 0x30
 80265fe:	4602      	mov	r2, r0
 8026600:	460b      	mov	r3, r1
 8026602:	e9dd 0100 	ldrd	r0, r1, [sp]
 8026606:	f7f9 fe57 	bl	80202b8 <__aeabi_dsub>
 802660a:	f805 6b01 	strb.w	r6, [r5], #1
 802660e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8026610:	42ab      	cmp	r3, r5
 8026612:	4680      	mov	r8, r0
 8026614:	4689      	mov	r9, r1
 8026616:	f04f 0200 	mov.w	r2, #0
 802661a:	d125      	bne.n	8026668 <_dtoa_r+0x5f0>
 802661c:	4b1b      	ldr	r3, [pc, #108]	; (802668c <_dtoa_r+0x614>)
 802661e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8026622:	f7f9 fe4b 	bl	80202bc <__adddf3>
 8026626:	4602      	mov	r2, r0
 8026628:	460b      	mov	r3, r1
 802662a:	4640      	mov	r0, r8
 802662c:	4649      	mov	r1, r9
 802662e:	f7fa fa87 	bl	8020b40 <__aeabi_dcmpgt>
 8026632:	2800      	cmp	r0, #0
 8026634:	d175      	bne.n	8026722 <_dtoa_r+0x6aa>
 8026636:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 802663a:	2000      	movs	r0, #0
 802663c:	4913      	ldr	r1, [pc, #76]	; (802668c <_dtoa_r+0x614>)
 802663e:	f7f9 fe3b 	bl	80202b8 <__aeabi_dsub>
 8026642:	4602      	mov	r2, r0
 8026644:	460b      	mov	r3, r1
 8026646:	4640      	mov	r0, r8
 8026648:	4649      	mov	r1, r9
 802664a:	f7fa fa5b 	bl	8020b04 <__aeabi_dcmplt>
 802664e:	2800      	cmp	r0, #0
 8026650:	f43f af2f 	beq.w	80264b2 <_dtoa_r+0x43a>
 8026654:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8026658:	2b30      	cmp	r3, #48	; 0x30
 802665a:	f105 32ff 	add.w	r2, r5, #4294967295
 802665e:	d001      	beq.n	8026664 <_dtoa_r+0x5ec>
 8026660:	46bb      	mov	fp, r7
 8026662:	e04d      	b.n	8026700 <_dtoa_r+0x688>
 8026664:	4615      	mov	r5, r2
 8026666:	e7f5      	b.n	8026654 <_dtoa_r+0x5dc>
 8026668:	4b05      	ldr	r3, [pc, #20]	; (8026680 <_dtoa_r+0x608>)
 802666a:	f7f9 ffd9 	bl	8020620 <__aeabi_dmul>
 802666e:	e9cd 0100 	strd	r0, r1, [sp]
 8026672:	e7bc      	b.n	80265ee <_dtoa_r+0x576>
 8026674:	080285b0 	.word	0x080285b0
 8026678:	08028588 	.word	0x08028588
 802667c:	3ff00000 	.word	0x3ff00000
 8026680:	40240000 	.word	0x40240000
 8026684:	401c0000 	.word	0x401c0000
 8026688:	40140000 	.word	0x40140000
 802668c:	3fe00000 	.word	0x3fe00000
 8026690:	e9dd 6700 	ldrd	r6, r7, [sp]
 8026694:	9d02      	ldr	r5, [sp, #8]
 8026696:	4642      	mov	r2, r8
 8026698:	464b      	mov	r3, r9
 802669a:	4630      	mov	r0, r6
 802669c:	4639      	mov	r1, r7
 802669e:	f7fa f8e9 	bl	8020874 <__aeabi_ddiv>
 80266a2:	f7fa fa6d 	bl	8020b80 <__aeabi_d2iz>
 80266a6:	9000      	str	r0, [sp, #0]
 80266a8:	f7f9 ff54 	bl	8020554 <__aeabi_i2d>
 80266ac:	4642      	mov	r2, r8
 80266ae:	464b      	mov	r3, r9
 80266b0:	f7f9 ffb6 	bl	8020620 <__aeabi_dmul>
 80266b4:	4602      	mov	r2, r0
 80266b6:	460b      	mov	r3, r1
 80266b8:	4630      	mov	r0, r6
 80266ba:	4639      	mov	r1, r7
 80266bc:	f7f9 fdfc 	bl	80202b8 <__aeabi_dsub>
 80266c0:	9e00      	ldr	r6, [sp, #0]
 80266c2:	9f03      	ldr	r7, [sp, #12]
 80266c4:	3630      	adds	r6, #48	; 0x30
 80266c6:	f805 6b01 	strb.w	r6, [r5], #1
 80266ca:	9e02      	ldr	r6, [sp, #8]
 80266cc:	1bae      	subs	r6, r5, r6
 80266ce:	42b7      	cmp	r7, r6
 80266d0:	4602      	mov	r2, r0
 80266d2:	460b      	mov	r3, r1
 80266d4:	d138      	bne.n	8026748 <_dtoa_r+0x6d0>
 80266d6:	f7f9 fdf1 	bl	80202bc <__adddf3>
 80266da:	4606      	mov	r6, r0
 80266dc:	460f      	mov	r7, r1
 80266de:	4602      	mov	r2, r0
 80266e0:	460b      	mov	r3, r1
 80266e2:	4640      	mov	r0, r8
 80266e4:	4649      	mov	r1, r9
 80266e6:	f7fa fa0d 	bl	8020b04 <__aeabi_dcmplt>
 80266ea:	b9c8      	cbnz	r0, 8026720 <_dtoa_r+0x6a8>
 80266ec:	4632      	mov	r2, r6
 80266ee:	463b      	mov	r3, r7
 80266f0:	4640      	mov	r0, r8
 80266f2:	4649      	mov	r1, r9
 80266f4:	f7fa f9fc 	bl	8020af0 <__aeabi_dcmpeq>
 80266f8:	b110      	cbz	r0, 8026700 <_dtoa_r+0x688>
 80266fa:	9b00      	ldr	r3, [sp, #0]
 80266fc:	07db      	lsls	r3, r3, #31
 80266fe:	d40f      	bmi.n	8026720 <_dtoa_r+0x6a8>
 8026700:	4651      	mov	r1, sl
 8026702:	4620      	mov	r0, r4
 8026704:	f000 fad0 	bl	8026ca8 <_Bfree>
 8026708:	2300      	movs	r3, #0
 802670a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802670c:	702b      	strb	r3, [r5, #0]
 802670e:	f10b 0301 	add.w	r3, fp, #1
 8026712:	6013      	str	r3, [r2, #0]
 8026714:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8026716:	2b00      	cmp	r3, #0
 8026718:	f43f acf8 	beq.w	802610c <_dtoa_r+0x94>
 802671c:	601d      	str	r5, [r3, #0]
 802671e:	e4f5      	b.n	802610c <_dtoa_r+0x94>
 8026720:	465f      	mov	r7, fp
 8026722:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8026726:	2a39      	cmp	r2, #57	; 0x39
 8026728:	f105 33ff 	add.w	r3, r5, #4294967295
 802672c:	d106      	bne.n	802673c <_dtoa_r+0x6c4>
 802672e:	9a02      	ldr	r2, [sp, #8]
 8026730:	429a      	cmp	r2, r3
 8026732:	d107      	bne.n	8026744 <_dtoa_r+0x6cc>
 8026734:	2330      	movs	r3, #48	; 0x30
 8026736:	7013      	strb	r3, [r2, #0]
 8026738:	3701      	adds	r7, #1
 802673a:	4613      	mov	r3, r2
 802673c:	781a      	ldrb	r2, [r3, #0]
 802673e:	3201      	adds	r2, #1
 8026740:	701a      	strb	r2, [r3, #0]
 8026742:	e78d      	b.n	8026660 <_dtoa_r+0x5e8>
 8026744:	461d      	mov	r5, r3
 8026746:	e7ec      	b.n	8026722 <_dtoa_r+0x6aa>
 8026748:	2200      	movs	r2, #0
 802674a:	4ba4      	ldr	r3, [pc, #656]	; (80269dc <_dtoa_r+0x964>)
 802674c:	f7f9 ff68 	bl	8020620 <__aeabi_dmul>
 8026750:	2200      	movs	r2, #0
 8026752:	2300      	movs	r3, #0
 8026754:	4606      	mov	r6, r0
 8026756:	460f      	mov	r7, r1
 8026758:	f7fa f9ca 	bl	8020af0 <__aeabi_dcmpeq>
 802675c:	2800      	cmp	r0, #0
 802675e:	d09a      	beq.n	8026696 <_dtoa_r+0x61e>
 8026760:	e7ce      	b.n	8026700 <_dtoa_r+0x688>
 8026762:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8026764:	2a00      	cmp	r2, #0
 8026766:	f000 80cd 	beq.w	8026904 <_dtoa_r+0x88c>
 802676a:	9a07      	ldr	r2, [sp, #28]
 802676c:	2a01      	cmp	r2, #1
 802676e:	f300 80af 	bgt.w	80268d0 <_dtoa_r+0x858>
 8026772:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8026774:	2a00      	cmp	r2, #0
 8026776:	f000 80a7 	beq.w	80268c8 <_dtoa_r+0x850>
 802677a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 802677e:	9e08      	ldr	r6, [sp, #32]
 8026780:	9d05      	ldr	r5, [sp, #20]
 8026782:	9a05      	ldr	r2, [sp, #20]
 8026784:	441a      	add	r2, r3
 8026786:	9205      	str	r2, [sp, #20]
 8026788:	9a06      	ldr	r2, [sp, #24]
 802678a:	2101      	movs	r1, #1
 802678c:	441a      	add	r2, r3
 802678e:	4620      	mov	r0, r4
 8026790:	9206      	str	r2, [sp, #24]
 8026792:	f000 fb29 	bl	8026de8 <__i2b>
 8026796:	4607      	mov	r7, r0
 8026798:	2d00      	cmp	r5, #0
 802679a:	dd0c      	ble.n	80267b6 <_dtoa_r+0x73e>
 802679c:	9b06      	ldr	r3, [sp, #24]
 802679e:	2b00      	cmp	r3, #0
 80267a0:	dd09      	ble.n	80267b6 <_dtoa_r+0x73e>
 80267a2:	42ab      	cmp	r3, r5
 80267a4:	9a05      	ldr	r2, [sp, #20]
 80267a6:	bfa8      	it	ge
 80267a8:	462b      	movge	r3, r5
 80267aa:	1ad2      	subs	r2, r2, r3
 80267ac:	9205      	str	r2, [sp, #20]
 80267ae:	9a06      	ldr	r2, [sp, #24]
 80267b0:	1aed      	subs	r5, r5, r3
 80267b2:	1ad3      	subs	r3, r2, r3
 80267b4:	9306      	str	r3, [sp, #24]
 80267b6:	9b08      	ldr	r3, [sp, #32]
 80267b8:	b1f3      	cbz	r3, 80267f8 <_dtoa_r+0x780>
 80267ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80267bc:	2b00      	cmp	r3, #0
 80267be:	f000 80a5 	beq.w	802690c <_dtoa_r+0x894>
 80267c2:	2e00      	cmp	r6, #0
 80267c4:	dd10      	ble.n	80267e8 <_dtoa_r+0x770>
 80267c6:	4639      	mov	r1, r7
 80267c8:	4632      	mov	r2, r6
 80267ca:	4620      	mov	r0, r4
 80267cc:	f000 fba2 	bl	8026f14 <__pow5mult>
 80267d0:	4652      	mov	r2, sl
 80267d2:	4601      	mov	r1, r0
 80267d4:	4607      	mov	r7, r0
 80267d6:	4620      	mov	r0, r4
 80267d8:	f000 fb0f 	bl	8026dfa <__multiply>
 80267dc:	4651      	mov	r1, sl
 80267de:	4680      	mov	r8, r0
 80267e0:	4620      	mov	r0, r4
 80267e2:	f000 fa61 	bl	8026ca8 <_Bfree>
 80267e6:	46c2      	mov	sl, r8
 80267e8:	9b08      	ldr	r3, [sp, #32]
 80267ea:	1b9a      	subs	r2, r3, r6
 80267ec:	d004      	beq.n	80267f8 <_dtoa_r+0x780>
 80267ee:	4651      	mov	r1, sl
 80267f0:	4620      	mov	r0, r4
 80267f2:	f000 fb8f 	bl	8026f14 <__pow5mult>
 80267f6:	4682      	mov	sl, r0
 80267f8:	2101      	movs	r1, #1
 80267fa:	4620      	mov	r0, r4
 80267fc:	f000 faf4 	bl	8026de8 <__i2b>
 8026800:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8026802:	2b00      	cmp	r3, #0
 8026804:	4606      	mov	r6, r0
 8026806:	f340 8083 	ble.w	8026910 <_dtoa_r+0x898>
 802680a:	461a      	mov	r2, r3
 802680c:	4601      	mov	r1, r0
 802680e:	4620      	mov	r0, r4
 8026810:	f000 fb80 	bl	8026f14 <__pow5mult>
 8026814:	9b07      	ldr	r3, [sp, #28]
 8026816:	2b01      	cmp	r3, #1
 8026818:	4606      	mov	r6, r0
 802681a:	dd7c      	ble.n	8026916 <_dtoa_r+0x89e>
 802681c:	f04f 0800 	mov.w	r8, #0
 8026820:	6933      	ldr	r3, [r6, #16]
 8026822:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8026826:	6918      	ldr	r0, [r3, #16]
 8026828:	f000 fa90 	bl	8026d4c <__hi0bits>
 802682c:	f1c0 0020 	rsb	r0, r0, #32
 8026830:	9b06      	ldr	r3, [sp, #24]
 8026832:	4418      	add	r0, r3
 8026834:	f010 001f 	ands.w	r0, r0, #31
 8026838:	f000 8096 	beq.w	8026968 <_dtoa_r+0x8f0>
 802683c:	f1c0 0320 	rsb	r3, r0, #32
 8026840:	2b04      	cmp	r3, #4
 8026842:	f340 8087 	ble.w	8026954 <_dtoa_r+0x8dc>
 8026846:	9b05      	ldr	r3, [sp, #20]
 8026848:	f1c0 001c 	rsb	r0, r0, #28
 802684c:	4403      	add	r3, r0
 802684e:	9305      	str	r3, [sp, #20]
 8026850:	9b06      	ldr	r3, [sp, #24]
 8026852:	4405      	add	r5, r0
 8026854:	4403      	add	r3, r0
 8026856:	9306      	str	r3, [sp, #24]
 8026858:	9b05      	ldr	r3, [sp, #20]
 802685a:	2b00      	cmp	r3, #0
 802685c:	dd05      	ble.n	802686a <_dtoa_r+0x7f2>
 802685e:	4651      	mov	r1, sl
 8026860:	461a      	mov	r2, r3
 8026862:	4620      	mov	r0, r4
 8026864:	f000 fba4 	bl	8026fb0 <__lshift>
 8026868:	4682      	mov	sl, r0
 802686a:	9b06      	ldr	r3, [sp, #24]
 802686c:	2b00      	cmp	r3, #0
 802686e:	dd05      	ble.n	802687c <_dtoa_r+0x804>
 8026870:	4631      	mov	r1, r6
 8026872:	461a      	mov	r2, r3
 8026874:	4620      	mov	r0, r4
 8026876:	f000 fb9b 	bl	8026fb0 <__lshift>
 802687a:	4606      	mov	r6, r0
 802687c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802687e:	2b00      	cmp	r3, #0
 8026880:	d074      	beq.n	802696c <_dtoa_r+0x8f4>
 8026882:	4631      	mov	r1, r6
 8026884:	4650      	mov	r0, sl
 8026886:	f000 fbe4 	bl	8027052 <__mcmp>
 802688a:	2800      	cmp	r0, #0
 802688c:	da6e      	bge.n	802696c <_dtoa_r+0x8f4>
 802688e:	2300      	movs	r3, #0
 8026890:	4651      	mov	r1, sl
 8026892:	220a      	movs	r2, #10
 8026894:	4620      	mov	r0, r4
 8026896:	f000 fa1e 	bl	8026cd6 <__multadd>
 802689a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802689c:	f10b 3bff 	add.w	fp, fp, #4294967295
 80268a0:	4682      	mov	sl, r0
 80268a2:	2b00      	cmp	r3, #0
 80268a4:	f000 81a8 	beq.w	8026bf8 <_dtoa_r+0xb80>
 80268a8:	2300      	movs	r3, #0
 80268aa:	4639      	mov	r1, r7
 80268ac:	220a      	movs	r2, #10
 80268ae:	4620      	mov	r0, r4
 80268b0:	f000 fa11 	bl	8026cd6 <__multadd>
 80268b4:	9b04      	ldr	r3, [sp, #16]
 80268b6:	2b00      	cmp	r3, #0
 80268b8:	4607      	mov	r7, r0
 80268ba:	f300 80c8 	bgt.w	8026a4e <_dtoa_r+0x9d6>
 80268be:	9b07      	ldr	r3, [sp, #28]
 80268c0:	2b02      	cmp	r3, #2
 80268c2:	f340 80c4 	ble.w	8026a4e <_dtoa_r+0x9d6>
 80268c6:	e059      	b.n	802697c <_dtoa_r+0x904>
 80268c8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80268ca:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80268ce:	e756      	b.n	802677e <_dtoa_r+0x706>
 80268d0:	9b03      	ldr	r3, [sp, #12]
 80268d2:	1e5e      	subs	r6, r3, #1
 80268d4:	9b08      	ldr	r3, [sp, #32]
 80268d6:	42b3      	cmp	r3, r6
 80268d8:	bfbf      	itttt	lt
 80268da:	9b08      	ldrlt	r3, [sp, #32]
 80268dc:	9608      	strlt	r6, [sp, #32]
 80268de:	1af2      	sublt	r2, r6, r3
 80268e0:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 80268e2:	bfb6      	itet	lt
 80268e4:	189b      	addlt	r3, r3, r2
 80268e6:	1b9e      	subge	r6, r3, r6
 80268e8:	930b      	strlt	r3, [sp, #44]	; 0x2c
 80268ea:	9b03      	ldr	r3, [sp, #12]
 80268ec:	bfb8      	it	lt
 80268ee:	2600      	movlt	r6, #0
 80268f0:	2b00      	cmp	r3, #0
 80268f2:	bfb9      	ittee	lt
 80268f4:	9b05      	ldrlt	r3, [sp, #20]
 80268f6:	9a03      	ldrlt	r2, [sp, #12]
 80268f8:	9d05      	ldrge	r5, [sp, #20]
 80268fa:	9b03      	ldrge	r3, [sp, #12]
 80268fc:	bfbc      	itt	lt
 80268fe:	1a9d      	sublt	r5, r3, r2
 8026900:	2300      	movlt	r3, #0
 8026902:	e73e      	b.n	8026782 <_dtoa_r+0x70a>
 8026904:	9e08      	ldr	r6, [sp, #32]
 8026906:	9d05      	ldr	r5, [sp, #20]
 8026908:	9f09      	ldr	r7, [sp, #36]	; 0x24
 802690a:	e745      	b.n	8026798 <_dtoa_r+0x720>
 802690c:	9a08      	ldr	r2, [sp, #32]
 802690e:	e76e      	b.n	80267ee <_dtoa_r+0x776>
 8026910:	9b07      	ldr	r3, [sp, #28]
 8026912:	2b01      	cmp	r3, #1
 8026914:	dc19      	bgt.n	802694a <_dtoa_r+0x8d2>
 8026916:	9b00      	ldr	r3, [sp, #0]
 8026918:	b9bb      	cbnz	r3, 802694a <_dtoa_r+0x8d2>
 802691a:	9b01      	ldr	r3, [sp, #4]
 802691c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8026920:	b99b      	cbnz	r3, 802694a <_dtoa_r+0x8d2>
 8026922:	9b01      	ldr	r3, [sp, #4]
 8026924:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8026928:	0d1b      	lsrs	r3, r3, #20
 802692a:	051b      	lsls	r3, r3, #20
 802692c:	b183      	cbz	r3, 8026950 <_dtoa_r+0x8d8>
 802692e:	9b05      	ldr	r3, [sp, #20]
 8026930:	3301      	adds	r3, #1
 8026932:	9305      	str	r3, [sp, #20]
 8026934:	9b06      	ldr	r3, [sp, #24]
 8026936:	3301      	adds	r3, #1
 8026938:	9306      	str	r3, [sp, #24]
 802693a:	f04f 0801 	mov.w	r8, #1
 802693e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8026940:	2b00      	cmp	r3, #0
 8026942:	f47f af6d 	bne.w	8026820 <_dtoa_r+0x7a8>
 8026946:	2001      	movs	r0, #1
 8026948:	e772      	b.n	8026830 <_dtoa_r+0x7b8>
 802694a:	f04f 0800 	mov.w	r8, #0
 802694e:	e7f6      	b.n	802693e <_dtoa_r+0x8c6>
 8026950:	4698      	mov	r8, r3
 8026952:	e7f4      	b.n	802693e <_dtoa_r+0x8c6>
 8026954:	d080      	beq.n	8026858 <_dtoa_r+0x7e0>
 8026956:	9a05      	ldr	r2, [sp, #20]
 8026958:	331c      	adds	r3, #28
 802695a:	441a      	add	r2, r3
 802695c:	9205      	str	r2, [sp, #20]
 802695e:	9a06      	ldr	r2, [sp, #24]
 8026960:	441a      	add	r2, r3
 8026962:	441d      	add	r5, r3
 8026964:	4613      	mov	r3, r2
 8026966:	e776      	b.n	8026856 <_dtoa_r+0x7de>
 8026968:	4603      	mov	r3, r0
 802696a:	e7f4      	b.n	8026956 <_dtoa_r+0x8de>
 802696c:	9b03      	ldr	r3, [sp, #12]
 802696e:	2b00      	cmp	r3, #0
 8026970:	dc36      	bgt.n	80269e0 <_dtoa_r+0x968>
 8026972:	9b07      	ldr	r3, [sp, #28]
 8026974:	2b02      	cmp	r3, #2
 8026976:	dd33      	ble.n	80269e0 <_dtoa_r+0x968>
 8026978:	9b03      	ldr	r3, [sp, #12]
 802697a:	9304      	str	r3, [sp, #16]
 802697c:	9b04      	ldr	r3, [sp, #16]
 802697e:	b963      	cbnz	r3, 802699a <_dtoa_r+0x922>
 8026980:	4631      	mov	r1, r6
 8026982:	2205      	movs	r2, #5
 8026984:	4620      	mov	r0, r4
 8026986:	f000 f9a6 	bl	8026cd6 <__multadd>
 802698a:	4601      	mov	r1, r0
 802698c:	4606      	mov	r6, r0
 802698e:	4650      	mov	r0, sl
 8026990:	f000 fb5f 	bl	8027052 <__mcmp>
 8026994:	2800      	cmp	r0, #0
 8026996:	f73f adb6 	bgt.w	8026506 <_dtoa_r+0x48e>
 802699a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802699c:	9d02      	ldr	r5, [sp, #8]
 802699e:	ea6f 0b03 	mvn.w	fp, r3
 80269a2:	2300      	movs	r3, #0
 80269a4:	9303      	str	r3, [sp, #12]
 80269a6:	4631      	mov	r1, r6
 80269a8:	4620      	mov	r0, r4
 80269aa:	f000 f97d 	bl	8026ca8 <_Bfree>
 80269ae:	2f00      	cmp	r7, #0
 80269b0:	f43f aea6 	beq.w	8026700 <_dtoa_r+0x688>
 80269b4:	9b03      	ldr	r3, [sp, #12]
 80269b6:	b12b      	cbz	r3, 80269c4 <_dtoa_r+0x94c>
 80269b8:	42bb      	cmp	r3, r7
 80269ba:	d003      	beq.n	80269c4 <_dtoa_r+0x94c>
 80269bc:	4619      	mov	r1, r3
 80269be:	4620      	mov	r0, r4
 80269c0:	f000 f972 	bl	8026ca8 <_Bfree>
 80269c4:	4639      	mov	r1, r7
 80269c6:	4620      	mov	r0, r4
 80269c8:	f000 f96e 	bl	8026ca8 <_Bfree>
 80269cc:	e698      	b.n	8026700 <_dtoa_r+0x688>
 80269ce:	2600      	movs	r6, #0
 80269d0:	4637      	mov	r7, r6
 80269d2:	e7e2      	b.n	802699a <_dtoa_r+0x922>
 80269d4:	46bb      	mov	fp, r7
 80269d6:	4637      	mov	r7, r6
 80269d8:	e595      	b.n	8026506 <_dtoa_r+0x48e>
 80269da:	bf00      	nop
 80269dc:	40240000 	.word	0x40240000
 80269e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80269e2:	bb93      	cbnz	r3, 8026a4a <_dtoa_r+0x9d2>
 80269e4:	9b03      	ldr	r3, [sp, #12]
 80269e6:	9304      	str	r3, [sp, #16]
 80269e8:	9d02      	ldr	r5, [sp, #8]
 80269ea:	4631      	mov	r1, r6
 80269ec:	4650      	mov	r0, sl
 80269ee:	f7ff fab7 	bl	8025f60 <quorem>
 80269f2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80269f6:	f805 9b01 	strb.w	r9, [r5], #1
 80269fa:	9b02      	ldr	r3, [sp, #8]
 80269fc:	9a04      	ldr	r2, [sp, #16]
 80269fe:	1aeb      	subs	r3, r5, r3
 8026a00:	429a      	cmp	r2, r3
 8026a02:	f300 80dc 	bgt.w	8026bbe <_dtoa_r+0xb46>
 8026a06:	9b02      	ldr	r3, [sp, #8]
 8026a08:	2a01      	cmp	r2, #1
 8026a0a:	bfac      	ite	ge
 8026a0c:	189b      	addge	r3, r3, r2
 8026a0e:	3301      	addlt	r3, #1
 8026a10:	4698      	mov	r8, r3
 8026a12:	2300      	movs	r3, #0
 8026a14:	9303      	str	r3, [sp, #12]
 8026a16:	4651      	mov	r1, sl
 8026a18:	2201      	movs	r2, #1
 8026a1a:	4620      	mov	r0, r4
 8026a1c:	f000 fac8 	bl	8026fb0 <__lshift>
 8026a20:	4631      	mov	r1, r6
 8026a22:	4682      	mov	sl, r0
 8026a24:	f000 fb15 	bl	8027052 <__mcmp>
 8026a28:	2800      	cmp	r0, #0
 8026a2a:	f300 808d 	bgt.w	8026b48 <_dtoa_r+0xad0>
 8026a2e:	d103      	bne.n	8026a38 <_dtoa_r+0x9c0>
 8026a30:	f019 0f01 	tst.w	r9, #1
 8026a34:	f040 8088 	bne.w	8026b48 <_dtoa_r+0xad0>
 8026a38:	4645      	mov	r5, r8
 8026a3a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8026a3e:	2b30      	cmp	r3, #48	; 0x30
 8026a40:	f105 32ff 	add.w	r2, r5, #4294967295
 8026a44:	d1af      	bne.n	80269a6 <_dtoa_r+0x92e>
 8026a46:	4615      	mov	r5, r2
 8026a48:	e7f7      	b.n	8026a3a <_dtoa_r+0x9c2>
 8026a4a:	9b03      	ldr	r3, [sp, #12]
 8026a4c:	9304      	str	r3, [sp, #16]
 8026a4e:	2d00      	cmp	r5, #0
 8026a50:	dd05      	ble.n	8026a5e <_dtoa_r+0x9e6>
 8026a52:	4639      	mov	r1, r7
 8026a54:	462a      	mov	r2, r5
 8026a56:	4620      	mov	r0, r4
 8026a58:	f000 faaa 	bl	8026fb0 <__lshift>
 8026a5c:	4607      	mov	r7, r0
 8026a5e:	f1b8 0f00 	cmp.w	r8, #0
 8026a62:	d04c      	beq.n	8026afe <_dtoa_r+0xa86>
 8026a64:	6879      	ldr	r1, [r7, #4]
 8026a66:	4620      	mov	r0, r4
 8026a68:	f000 f8ea 	bl	8026c40 <_Balloc>
 8026a6c:	693a      	ldr	r2, [r7, #16]
 8026a6e:	3202      	adds	r2, #2
 8026a70:	4605      	mov	r5, r0
 8026a72:	0092      	lsls	r2, r2, #2
 8026a74:	f107 010c 	add.w	r1, r7, #12
 8026a78:	300c      	adds	r0, #12
 8026a7a:	f7fe fd8b 	bl	8025594 <memcpy>
 8026a7e:	2201      	movs	r2, #1
 8026a80:	4629      	mov	r1, r5
 8026a82:	4620      	mov	r0, r4
 8026a84:	f000 fa94 	bl	8026fb0 <__lshift>
 8026a88:	9b00      	ldr	r3, [sp, #0]
 8026a8a:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8026a8e:	9703      	str	r7, [sp, #12]
 8026a90:	f003 0301 	and.w	r3, r3, #1
 8026a94:	4607      	mov	r7, r0
 8026a96:	9305      	str	r3, [sp, #20]
 8026a98:	4631      	mov	r1, r6
 8026a9a:	4650      	mov	r0, sl
 8026a9c:	f7ff fa60 	bl	8025f60 <quorem>
 8026aa0:	9903      	ldr	r1, [sp, #12]
 8026aa2:	4605      	mov	r5, r0
 8026aa4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8026aa8:	4650      	mov	r0, sl
 8026aaa:	f000 fad2 	bl	8027052 <__mcmp>
 8026aae:	463a      	mov	r2, r7
 8026ab0:	9000      	str	r0, [sp, #0]
 8026ab2:	4631      	mov	r1, r6
 8026ab4:	4620      	mov	r0, r4
 8026ab6:	f000 fae6 	bl	8027086 <__mdiff>
 8026aba:	68c3      	ldr	r3, [r0, #12]
 8026abc:	4602      	mov	r2, r0
 8026abe:	bb03      	cbnz	r3, 8026b02 <_dtoa_r+0xa8a>
 8026ac0:	4601      	mov	r1, r0
 8026ac2:	9006      	str	r0, [sp, #24]
 8026ac4:	4650      	mov	r0, sl
 8026ac6:	f000 fac4 	bl	8027052 <__mcmp>
 8026aca:	9a06      	ldr	r2, [sp, #24]
 8026acc:	4603      	mov	r3, r0
 8026ace:	4611      	mov	r1, r2
 8026ad0:	4620      	mov	r0, r4
 8026ad2:	9306      	str	r3, [sp, #24]
 8026ad4:	f000 f8e8 	bl	8026ca8 <_Bfree>
 8026ad8:	9b06      	ldr	r3, [sp, #24]
 8026ada:	b9a3      	cbnz	r3, 8026b06 <_dtoa_r+0xa8e>
 8026adc:	9a07      	ldr	r2, [sp, #28]
 8026ade:	b992      	cbnz	r2, 8026b06 <_dtoa_r+0xa8e>
 8026ae0:	9a05      	ldr	r2, [sp, #20]
 8026ae2:	b982      	cbnz	r2, 8026b06 <_dtoa_r+0xa8e>
 8026ae4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8026ae8:	d029      	beq.n	8026b3e <_dtoa_r+0xac6>
 8026aea:	9b00      	ldr	r3, [sp, #0]
 8026aec:	2b00      	cmp	r3, #0
 8026aee:	dd01      	ble.n	8026af4 <_dtoa_r+0xa7c>
 8026af0:	f105 0931 	add.w	r9, r5, #49	; 0x31
 8026af4:	f108 0501 	add.w	r5, r8, #1
 8026af8:	f888 9000 	strb.w	r9, [r8]
 8026afc:	e753      	b.n	80269a6 <_dtoa_r+0x92e>
 8026afe:	4638      	mov	r0, r7
 8026b00:	e7c2      	b.n	8026a88 <_dtoa_r+0xa10>
 8026b02:	2301      	movs	r3, #1
 8026b04:	e7e3      	b.n	8026ace <_dtoa_r+0xa56>
 8026b06:	9a00      	ldr	r2, [sp, #0]
 8026b08:	2a00      	cmp	r2, #0
 8026b0a:	db04      	blt.n	8026b16 <_dtoa_r+0xa9e>
 8026b0c:	d125      	bne.n	8026b5a <_dtoa_r+0xae2>
 8026b0e:	9a07      	ldr	r2, [sp, #28]
 8026b10:	bb1a      	cbnz	r2, 8026b5a <_dtoa_r+0xae2>
 8026b12:	9a05      	ldr	r2, [sp, #20]
 8026b14:	bb0a      	cbnz	r2, 8026b5a <_dtoa_r+0xae2>
 8026b16:	2b00      	cmp	r3, #0
 8026b18:	ddec      	ble.n	8026af4 <_dtoa_r+0xa7c>
 8026b1a:	4651      	mov	r1, sl
 8026b1c:	2201      	movs	r2, #1
 8026b1e:	4620      	mov	r0, r4
 8026b20:	f000 fa46 	bl	8026fb0 <__lshift>
 8026b24:	4631      	mov	r1, r6
 8026b26:	4682      	mov	sl, r0
 8026b28:	f000 fa93 	bl	8027052 <__mcmp>
 8026b2c:	2800      	cmp	r0, #0
 8026b2e:	dc03      	bgt.n	8026b38 <_dtoa_r+0xac0>
 8026b30:	d1e0      	bne.n	8026af4 <_dtoa_r+0xa7c>
 8026b32:	f019 0f01 	tst.w	r9, #1
 8026b36:	d0dd      	beq.n	8026af4 <_dtoa_r+0xa7c>
 8026b38:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8026b3c:	d1d8      	bne.n	8026af0 <_dtoa_r+0xa78>
 8026b3e:	2339      	movs	r3, #57	; 0x39
 8026b40:	f888 3000 	strb.w	r3, [r8]
 8026b44:	f108 0801 	add.w	r8, r8, #1
 8026b48:	4645      	mov	r5, r8
 8026b4a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8026b4e:	2b39      	cmp	r3, #57	; 0x39
 8026b50:	f105 32ff 	add.w	r2, r5, #4294967295
 8026b54:	d03b      	beq.n	8026bce <_dtoa_r+0xb56>
 8026b56:	3301      	adds	r3, #1
 8026b58:	e040      	b.n	8026bdc <_dtoa_r+0xb64>
 8026b5a:	2b00      	cmp	r3, #0
 8026b5c:	f108 0501 	add.w	r5, r8, #1
 8026b60:	dd05      	ble.n	8026b6e <_dtoa_r+0xaf6>
 8026b62:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8026b66:	d0ea      	beq.n	8026b3e <_dtoa_r+0xac6>
 8026b68:	f109 0901 	add.w	r9, r9, #1
 8026b6c:	e7c4      	b.n	8026af8 <_dtoa_r+0xa80>
 8026b6e:	9b02      	ldr	r3, [sp, #8]
 8026b70:	9a04      	ldr	r2, [sp, #16]
 8026b72:	f805 9c01 	strb.w	r9, [r5, #-1]
 8026b76:	1aeb      	subs	r3, r5, r3
 8026b78:	4293      	cmp	r3, r2
 8026b7a:	46a8      	mov	r8, r5
 8026b7c:	f43f af4b 	beq.w	8026a16 <_dtoa_r+0x99e>
 8026b80:	4651      	mov	r1, sl
 8026b82:	2300      	movs	r3, #0
 8026b84:	220a      	movs	r2, #10
 8026b86:	4620      	mov	r0, r4
 8026b88:	f000 f8a5 	bl	8026cd6 <__multadd>
 8026b8c:	9b03      	ldr	r3, [sp, #12]
 8026b8e:	9903      	ldr	r1, [sp, #12]
 8026b90:	42bb      	cmp	r3, r7
 8026b92:	4682      	mov	sl, r0
 8026b94:	f04f 0300 	mov.w	r3, #0
 8026b98:	f04f 020a 	mov.w	r2, #10
 8026b9c:	4620      	mov	r0, r4
 8026b9e:	d104      	bne.n	8026baa <_dtoa_r+0xb32>
 8026ba0:	f000 f899 	bl	8026cd6 <__multadd>
 8026ba4:	9003      	str	r0, [sp, #12]
 8026ba6:	4607      	mov	r7, r0
 8026ba8:	e776      	b.n	8026a98 <_dtoa_r+0xa20>
 8026baa:	f000 f894 	bl	8026cd6 <__multadd>
 8026bae:	2300      	movs	r3, #0
 8026bb0:	9003      	str	r0, [sp, #12]
 8026bb2:	220a      	movs	r2, #10
 8026bb4:	4639      	mov	r1, r7
 8026bb6:	4620      	mov	r0, r4
 8026bb8:	f000 f88d 	bl	8026cd6 <__multadd>
 8026bbc:	e7f3      	b.n	8026ba6 <_dtoa_r+0xb2e>
 8026bbe:	4651      	mov	r1, sl
 8026bc0:	2300      	movs	r3, #0
 8026bc2:	220a      	movs	r2, #10
 8026bc4:	4620      	mov	r0, r4
 8026bc6:	f000 f886 	bl	8026cd6 <__multadd>
 8026bca:	4682      	mov	sl, r0
 8026bcc:	e70d      	b.n	80269ea <_dtoa_r+0x972>
 8026bce:	9b02      	ldr	r3, [sp, #8]
 8026bd0:	4293      	cmp	r3, r2
 8026bd2:	d105      	bne.n	8026be0 <_dtoa_r+0xb68>
 8026bd4:	9a02      	ldr	r2, [sp, #8]
 8026bd6:	f10b 0b01 	add.w	fp, fp, #1
 8026bda:	2331      	movs	r3, #49	; 0x31
 8026bdc:	7013      	strb	r3, [r2, #0]
 8026bde:	e6e2      	b.n	80269a6 <_dtoa_r+0x92e>
 8026be0:	4615      	mov	r5, r2
 8026be2:	e7b2      	b.n	8026b4a <_dtoa_r+0xad2>
 8026be4:	4b09      	ldr	r3, [pc, #36]	; (8026c0c <_dtoa_r+0xb94>)
 8026be6:	f7ff baae 	b.w	8026146 <_dtoa_r+0xce>
 8026bea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8026bec:	2b00      	cmp	r3, #0
 8026bee:	f47f aa88 	bne.w	8026102 <_dtoa_r+0x8a>
 8026bf2:	4b07      	ldr	r3, [pc, #28]	; (8026c10 <_dtoa_r+0xb98>)
 8026bf4:	f7ff baa7 	b.w	8026146 <_dtoa_r+0xce>
 8026bf8:	9b04      	ldr	r3, [sp, #16]
 8026bfa:	2b00      	cmp	r3, #0
 8026bfc:	f73f aef4 	bgt.w	80269e8 <_dtoa_r+0x970>
 8026c00:	9b07      	ldr	r3, [sp, #28]
 8026c02:	2b02      	cmp	r3, #2
 8026c04:	f77f aef0 	ble.w	80269e8 <_dtoa_r+0x970>
 8026c08:	e6b8      	b.n	802697c <_dtoa_r+0x904>
 8026c0a:	bf00      	nop
 8026c0c:	080286ab 	.word	0x080286ab
 8026c10:	08028577 	.word	0x08028577

08026c14 <_localeconv_r>:
 8026c14:	4b04      	ldr	r3, [pc, #16]	; (8026c28 <_localeconv_r+0x14>)
 8026c16:	681b      	ldr	r3, [r3, #0]
 8026c18:	6a18      	ldr	r0, [r3, #32]
 8026c1a:	4b04      	ldr	r3, [pc, #16]	; (8026c2c <_localeconv_r+0x18>)
 8026c1c:	2800      	cmp	r0, #0
 8026c1e:	bf08      	it	eq
 8026c20:	4618      	moveq	r0, r3
 8026c22:	30f0      	adds	r0, #240	; 0xf0
 8026c24:	4770      	bx	lr
 8026c26:	bf00      	nop
 8026c28:	20000028 	.word	0x20000028
 8026c2c:	2000008c 	.word	0x2000008c

08026c30 <malloc>:
 8026c30:	4b02      	ldr	r3, [pc, #8]	; (8026c3c <malloc+0xc>)
 8026c32:	4601      	mov	r1, r0
 8026c34:	6818      	ldr	r0, [r3, #0]
 8026c36:	f000 bb2f 	b.w	8027298 <_malloc_r>
 8026c3a:	bf00      	nop
 8026c3c:	20000028 	.word	0x20000028

08026c40 <_Balloc>:
 8026c40:	b570      	push	{r4, r5, r6, lr}
 8026c42:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8026c44:	4604      	mov	r4, r0
 8026c46:	460e      	mov	r6, r1
 8026c48:	b93d      	cbnz	r5, 8026c5a <_Balloc+0x1a>
 8026c4a:	2010      	movs	r0, #16
 8026c4c:	f7ff fff0 	bl	8026c30 <malloc>
 8026c50:	6260      	str	r0, [r4, #36]	; 0x24
 8026c52:	6045      	str	r5, [r0, #4]
 8026c54:	6085      	str	r5, [r0, #8]
 8026c56:	6005      	str	r5, [r0, #0]
 8026c58:	60c5      	str	r5, [r0, #12]
 8026c5a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8026c5c:	68eb      	ldr	r3, [r5, #12]
 8026c5e:	b183      	cbz	r3, 8026c82 <_Balloc+0x42>
 8026c60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8026c62:	68db      	ldr	r3, [r3, #12]
 8026c64:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8026c68:	b9b8      	cbnz	r0, 8026c9a <_Balloc+0x5a>
 8026c6a:	2101      	movs	r1, #1
 8026c6c:	fa01 f506 	lsl.w	r5, r1, r6
 8026c70:	1d6a      	adds	r2, r5, #5
 8026c72:	0092      	lsls	r2, r2, #2
 8026c74:	4620      	mov	r0, r4
 8026c76:	f000 fab3 	bl	80271e0 <_calloc_r>
 8026c7a:	b160      	cbz	r0, 8026c96 <_Balloc+0x56>
 8026c7c:	6046      	str	r6, [r0, #4]
 8026c7e:	6085      	str	r5, [r0, #8]
 8026c80:	e00e      	b.n	8026ca0 <_Balloc+0x60>
 8026c82:	2221      	movs	r2, #33	; 0x21
 8026c84:	2104      	movs	r1, #4
 8026c86:	4620      	mov	r0, r4
 8026c88:	f000 faaa 	bl	80271e0 <_calloc_r>
 8026c8c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8026c8e:	60e8      	str	r0, [r5, #12]
 8026c90:	68db      	ldr	r3, [r3, #12]
 8026c92:	2b00      	cmp	r3, #0
 8026c94:	d1e4      	bne.n	8026c60 <_Balloc+0x20>
 8026c96:	2000      	movs	r0, #0
 8026c98:	bd70      	pop	{r4, r5, r6, pc}
 8026c9a:	6802      	ldr	r2, [r0, #0]
 8026c9c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8026ca0:	2300      	movs	r3, #0
 8026ca2:	6103      	str	r3, [r0, #16]
 8026ca4:	60c3      	str	r3, [r0, #12]
 8026ca6:	bd70      	pop	{r4, r5, r6, pc}

08026ca8 <_Bfree>:
 8026ca8:	b570      	push	{r4, r5, r6, lr}
 8026caa:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8026cac:	4606      	mov	r6, r0
 8026cae:	460d      	mov	r5, r1
 8026cb0:	b93c      	cbnz	r4, 8026cc2 <_Bfree+0x1a>
 8026cb2:	2010      	movs	r0, #16
 8026cb4:	f7ff ffbc 	bl	8026c30 <malloc>
 8026cb8:	6270      	str	r0, [r6, #36]	; 0x24
 8026cba:	6044      	str	r4, [r0, #4]
 8026cbc:	6084      	str	r4, [r0, #8]
 8026cbe:	6004      	str	r4, [r0, #0]
 8026cc0:	60c4      	str	r4, [r0, #12]
 8026cc2:	b13d      	cbz	r5, 8026cd4 <_Bfree+0x2c>
 8026cc4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8026cc6:	686a      	ldr	r2, [r5, #4]
 8026cc8:	68db      	ldr	r3, [r3, #12]
 8026cca:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8026cce:	6029      	str	r1, [r5, #0]
 8026cd0:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8026cd4:	bd70      	pop	{r4, r5, r6, pc}

08026cd6 <__multadd>:
 8026cd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026cda:	690d      	ldr	r5, [r1, #16]
 8026cdc:	461f      	mov	r7, r3
 8026cde:	4606      	mov	r6, r0
 8026ce0:	460c      	mov	r4, r1
 8026ce2:	f101 0e14 	add.w	lr, r1, #20
 8026ce6:	2300      	movs	r3, #0
 8026ce8:	f8de 0000 	ldr.w	r0, [lr]
 8026cec:	b281      	uxth	r1, r0
 8026cee:	fb02 7101 	mla	r1, r2, r1, r7
 8026cf2:	0c0f      	lsrs	r7, r1, #16
 8026cf4:	0c00      	lsrs	r0, r0, #16
 8026cf6:	fb02 7000 	mla	r0, r2, r0, r7
 8026cfa:	b289      	uxth	r1, r1
 8026cfc:	3301      	adds	r3, #1
 8026cfe:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8026d02:	429d      	cmp	r5, r3
 8026d04:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8026d08:	f84e 1b04 	str.w	r1, [lr], #4
 8026d0c:	dcec      	bgt.n	8026ce8 <__multadd+0x12>
 8026d0e:	b1d7      	cbz	r7, 8026d46 <__multadd+0x70>
 8026d10:	68a3      	ldr	r3, [r4, #8]
 8026d12:	429d      	cmp	r5, r3
 8026d14:	db12      	blt.n	8026d3c <__multadd+0x66>
 8026d16:	6861      	ldr	r1, [r4, #4]
 8026d18:	4630      	mov	r0, r6
 8026d1a:	3101      	adds	r1, #1
 8026d1c:	f7ff ff90 	bl	8026c40 <_Balloc>
 8026d20:	6922      	ldr	r2, [r4, #16]
 8026d22:	3202      	adds	r2, #2
 8026d24:	f104 010c 	add.w	r1, r4, #12
 8026d28:	4680      	mov	r8, r0
 8026d2a:	0092      	lsls	r2, r2, #2
 8026d2c:	300c      	adds	r0, #12
 8026d2e:	f7fe fc31 	bl	8025594 <memcpy>
 8026d32:	4621      	mov	r1, r4
 8026d34:	4630      	mov	r0, r6
 8026d36:	f7ff ffb7 	bl	8026ca8 <_Bfree>
 8026d3a:	4644      	mov	r4, r8
 8026d3c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8026d40:	3501      	adds	r5, #1
 8026d42:	615f      	str	r7, [r3, #20]
 8026d44:	6125      	str	r5, [r4, #16]
 8026d46:	4620      	mov	r0, r4
 8026d48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08026d4c <__hi0bits>:
 8026d4c:	0c02      	lsrs	r2, r0, #16
 8026d4e:	0412      	lsls	r2, r2, #16
 8026d50:	4603      	mov	r3, r0
 8026d52:	b9b2      	cbnz	r2, 8026d82 <__hi0bits+0x36>
 8026d54:	0403      	lsls	r3, r0, #16
 8026d56:	2010      	movs	r0, #16
 8026d58:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8026d5c:	bf04      	itt	eq
 8026d5e:	021b      	lsleq	r3, r3, #8
 8026d60:	3008      	addeq	r0, #8
 8026d62:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8026d66:	bf04      	itt	eq
 8026d68:	011b      	lsleq	r3, r3, #4
 8026d6a:	3004      	addeq	r0, #4
 8026d6c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8026d70:	bf04      	itt	eq
 8026d72:	009b      	lsleq	r3, r3, #2
 8026d74:	3002      	addeq	r0, #2
 8026d76:	2b00      	cmp	r3, #0
 8026d78:	db06      	blt.n	8026d88 <__hi0bits+0x3c>
 8026d7a:	005b      	lsls	r3, r3, #1
 8026d7c:	d503      	bpl.n	8026d86 <__hi0bits+0x3a>
 8026d7e:	3001      	adds	r0, #1
 8026d80:	4770      	bx	lr
 8026d82:	2000      	movs	r0, #0
 8026d84:	e7e8      	b.n	8026d58 <__hi0bits+0xc>
 8026d86:	2020      	movs	r0, #32
 8026d88:	4770      	bx	lr

08026d8a <__lo0bits>:
 8026d8a:	6803      	ldr	r3, [r0, #0]
 8026d8c:	f013 0207 	ands.w	r2, r3, #7
 8026d90:	4601      	mov	r1, r0
 8026d92:	d00b      	beq.n	8026dac <__lo0bits+0x22>
 8026d94:	07da      	lsls	r2, r3, #31
 8026d96:	d423      	bmi.n	8026de0 <__lo0bits+0x56>
 8026d98:	0798      	lsls	r0, r3, #30
 8026d9a:	bf49      	itett	mi
 8026d9c:	085b      	lsrmi	r3, r3, #1
 8026d9e:	089b      	lsrpl	r3, r3, #2
 8026da0:	2001      	movmi	r0, #1
 8026da2:	600b      	strmi	r3, [r1, #0]
 8026da4:	bf5c      	itt	pl
 8026da6:	600b      	strpl	r3, [r1, #0]
 8026da8:	2002      	movpl	r0, #2
 8026daa:	4770      	bx	lr
 8026dac:	b298      	uxth	r0, r3
 8026dae:	b9a8      	cbnz	r0, 8026ddc <__lo0bits+0x52>
 8026db0:	0c1b      	lsrs	r3, r3, #16
 8026db2:	2010      	movs	r0, #16
 8026db4:	f013 0fff 	tst.w	r3, #255	; 0xff
 8026db8:	bf04      	itt	eq
 8026dba:	0a1b      	lsreq	r3, r3, #8
 8026dbc:	3008      	addeq	r0, #8
 8026dbe:	071a      	lsls	r2, r3, #28
 8026dc0:	bf04      	itt	eq
 8026dc2:	091b      	lsreq	r3, r3, #4
 8026dc4:	3004      	addeq	r0, #4
 8026dc6:	079a      	lsls	r2, r3, #30
 8026dc8:	bf04      	itt	eq
 8026dca:	089b      	lsreq	r3, r3, #2
 8026dcc:	3002      	addeq	r0, #2
 8026dce:	07da      	lsls	r2, r3, #31
 8026dd0:	d402      	bmi.n	8026dd8 <__lo0bits+0x4e>
 8026dd2:	085b      	lsrs	r3, r3, #1
 8026dd4:	d006      	beq.n	8026de4 <__lo0bits+0x5a>
 8026dd6:	3001      	adds	r0, #1
 8026dd8:	600b      	str	r3, [r1, #0]
 8026dda:	4770      	bx	lr
 8026ddc:	4610      	mov	r0, r2
 8026dde:	e7e9      	b.n	8026db4 <__lo0bits+0x2a>
 8026de0:	2000      	movs	r0, #0
 8026de2:	4770      	bx	lr
 8026de4:	2020      	movs	r0, #32
 8026de6:	4770      	bx	lr

08026de8 <__i2b>:
 8026de8:	b510      	push	{r4, lr}
 8026dea:	460c      	mov	r4, r1
 8026dec:	2101      	movs	r1, #1
 8026dee:	f7ff ff27 	bl	8026c40 <_Balloc>
 8026df2:	2201      	movs	r2, #1
 8026df4:	6144      	str	r4, [r0, #20]
 8026df6:	6102      	str	r2, [r0, #16]
 8026df8:	bd10      	pop	{r4, pc}

08026dfa <__multiply>:
 8026dfa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026dfe:	4614      	mov	r4, r2
 8026e00:	690a      	ldr	r2, [r1, #16]
 8026e02:	6923      	ldr	r3, [r4, #16]
 8026e04:	429a      	cmp	r2, r3
 8026e06:	bfb8      	it	lt
 8026e08:	460b      	movlt	r3, r1
 8026e0a:	4689      	mov	r9, r1
 8026e0c:	bfbc      	itt	lt
 8026e0e:	46a1      	movlt	r9, r4
 8026e10:	461c      	movlt	r4, r3
 8026e12:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8026e16:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8026e1a:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8026e1e:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8026e22:	eb07 060a 	add.w	r6, r7, sl
 8026e26:	429e      	cmp	r6, r3
 8026e28:	bfc8      	it	gt
 8026e2a:	3101      	addgt	r1, #1
 8026e2c:	f7ff ff08 	bl	8026c40 <_Balloc>
 8026e30:	f100 0514 	add.w	r5, r0, #20
 8026e34:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8026e38:	462b      	mov	r3, r5
 8026e3a:	2200      	movs	r2, #0
 8026e3c:	4543      	cmp	r3, r8
 8026e3e:	d316      	bcc.n	8026e6e <__multiply+0x74>
 8026e40:	f104 0214 	add.w	r2, r4, #20
 8026e44:	f109 0114 	add.w	r1, r9, #20
 8026e48:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 8026e4c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8026e50:	9301      	str	r3, [sp, #4]
 8026e52:	9c01      	ldr	r4, [sp, #4]
 8026e54:	4294      	cmp	r4, r2
 8026e56:	4613      	mov	r3, r2
 8026e58:	d80c      	bhi.n	8026e74 <__multiply+0x7a>
 8026e5a:	2e00      	cmp	r6, #0
 8026e5c:	dd03      	ble.n	8026e66 <__multiply+0x6c>
 8026e5e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8026e62:	2b00      	cmp	r3, #0
 8026e64:	d054      	beq.n	8026f10 <__multiply+0x116>
 8026e66:	6106      	str	r6, [r0, #16]
 8026e68:	b003      	add	sp, #12
 8026e6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026e6e:	f843 2b04 	str.w	r2, [r3], #4
 8026e72:	e7e3      	b.n	8026e3c <__multiply+0x42>
 8026e74:	f8b3 a000 	ldrh.w	sl, [r3]
 8026e78:	3204      	adds	r2, #4
 8026e7a:	f1ba 0f00 	cmp.w	sl, #0
 8026e7e:	d020      	beq.n	8026ec2 <__multiply+0xc8>
 8026e80:	46ae      	mov	lr, r5
 8026e82:	4689      	mov	r9, r1
 8026e84:	f04f 0c00 	mov.w	ip, #0
 8026e88:	f859 4b04 	ldr.w	r4, [r9], #4
 8026e8c:	f8be b000 	ldrh.w	fp, [lr]
 8026e90:	b2a3      	uxth	r3, r4
 8026e92:	fb0a b303 	mla	r3, sl, r3, fp
 8026e96:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 8026e9a:	f8de 4000 	ldr.w	r4, [lr]
 8026e9e:	4463      	add	r3, ip
 8026ea0:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8026ea4:	fb0a c40b 	mla	r4, sl, fp, ip
 8026ea8:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8026eac:	b29b      	uxth	r3, r3
 8026eae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8026eb2:	454f      	cmp	r7, r9
 8026eb4:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8026eb8:	f84e 3b04 	str.w	r3, [lr], #4
 8026ebc:	d8e4      	bhi.n	8026e88 <__multiply+0x8e>
 8026ebe:	f8ce c000 	str.w	ip, [lr]
 8026ec2:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 8026ec6:	f1b9 0f00 	cmp.w	r9, #0
 8026eca:	d01f      	beq.n	8026f0c <__multiply+0x112>
 8026ecc:	682b      	ldr	r3, [r5, #0]
 8026ece:	46ae      	mov	lr, r5
 8026ed0:	468c      	mov	ip, r1
 8026ed2:	f04f 0a00 	mov.w	sl, #0
 8026ed6:	f8bc 4000 	ldrh.w	r4, [ip]
 8026eda:	f8be b002 	ldrh.w	fp, [lr, #2]
 8026ede:	fb09 b404 	mla	r4, r9, r4, fp
 8026ee2:	44a2      	add	sl, r4
 8026ee4:	b29b      	uxth	r3, r3
 8026ee6:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 8026eea:	f84e 3b04 	str.w	r3, [lr], #4
 8026eee:	f85c 3b04 	ldr.w	r3, [ip], #4
 8026ef2:	f8be 4000 	ldrh.w	r4, [lr]
 8026ef6:	0c1b      	lsrs	r3, r3, #16
 8026ef8:	fb09 4303 	mla	r3, r9, r3, r4
 8026efc:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 8026f00:	4567      	cmp	r7, ip
 8026f02:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8026f06:	d8e6      	bhi.n	8026ed6 <__multiply+0xdc>
 8026f08:	f8ce 3000 	str.w	r3, [lr]
 8026f0c:	3504      	adds	r5, #4
 8026f0e:	e7a0      	b.n	8026e52 <__multiply+0x58>
 8026f10:	3e01      	subs	r6, #1
 8026f12:	e7a2      	b.n	8026e5a <__multiply+0x60>

08026f14 <__pow5mult>:
 8026f14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8026f18:	4615      	mov	r5, r2
 8026f1a:	f012 0203 	ands.w	r2, r2, #3
 8026f1e:	4606      	mov	r6, r0
 8026f20:	460f      	mov	r7, r1
 8026f22:	d007      	beq.n	8026f34 <__pow5mult+0x20>
 8026f24:	3a01      	subs	r2, #1
 8026f26:	4c21      	ldr	r4, [pc, #132]	; (8026fac <__pow5mult+0x98>)
 8026f28:	2300      	movs	r3, #0
 8026f2a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8026f2e:	f7ff fed2 	bl	8026cd6 <__multadd>
 8026f32:	4607      	mov	r7, r0
 8026f34:	10ad      	asrs	r5, r5, #2
 8026f36:	d035      	beq.n	8026fa4 <__pow5mult+0x90>
 8026f38:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8026f3a:	b93c      	cbnz	r4, 8026f4c <__pow5mult+0x38>
 8026f3c:	2010      	movs	r0, #16
 8026f3e:	f7ff fe77 	bl	8026c30 <malloc>
 8026f42:	6270      	str	r0, [r6, #36]	; 0x24
 8026f44:	6044      	str	r4, [r0, #4]
 8026f46:	6084      	str	r4, [r0, #8]
 8026f48:	6004      	str	r4, [r0, #0]
 8026f4a:	60c4      	str	r4, [r0, #12]
 8026f4c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8026f50:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8026f54:	b94c      	cbnz	r4, 8026f6a <__pow5mult+0x56>
 8026f56:	f240 2171 	movw	r1, #625	; 0x271
 8026f5a:	4630      	mov	r0, r6
 8026f5c:	f7ff ff44 	bl	8026de8 <__i2b>
 8026f60:	2300      	movs	r3, #0
 8026f62:	f8c8 0008 	str.w	r0, [r8, #8]
 8026f66:	4604      	mov	r4, r0
 8026f68:	6003      	str	r3, [r0, #0]
 8026f6a:	f04f 0800 	mov.w	r8, #0
 8026f6e:	07eb      	lsls	r3, r5, #31
 8026f70:	d50a      	bpl.n	8026f88 <__pow5mult+0x74>
 8026f72:	4639      	mov	r1, r7
 8026f74:	4622      	mov	r2, r4
 8026f76:	4630      	mov	r0, r6
 8026f78:	f7ff ff3f 	bl	8026dfa <__multiply>
 8026f7c:	4639      	mov	r1, r7
 8026f7e:	4681      	mov	r9, r0
 8026f80:	4630      	mov	r0, r6
 8026f82:	f7ff fe91 	bl	8026ca8 <_Bfree>
 8026f86:	464f      	mov	r7, r9
 8026f88:	106d      	asrs	r5, r5, #1
 8026f8a:	d00b      	beq.n	8026fa4 <__pow5mult+0x90>
 8026f8c:	6820      	ldr	r0, [r4, #0]
 8026f8e:	b938      	cbnz	r0, 8026fa0 <__pow5mult+0x8c>
 8026f90:	4622      	mov	r2, r4
 8026f92:	4621      	mov	r1, r4
 8026f94:	4630      	mov	r0, r6
 8026f96:	f7ff ff30 	bl	8026dfa <__multiply>
 8026f9a:	6020      	str	r0, [r4, #0]
 8026f9c:	f8c0 8000 	str.w	r8, [r0]
 8026fa0:	4604      	mov	r4, r0
 8026fa2:	e7e4      	b.n	8026f6e <__pow5mult+0x5a>
 8026fa4:	4638      	mov	r0, r7
 8026fa6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8026faa:	bf00      	nop
 8026fac:	08028678 	.word	0x08028678

08026fb0 <__lshift>:
 8026fb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026fb4:	460c      	mov	r4, r1
 8026fb6:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8026fba:	6923      	ldr	r3, [r4, #16]
 8026fbc:	6849      	ldr	r1, [r1, #4]
 8026fbe:	eb0a 0903 	add.w	r9, sl, r3
 8026fc2:	68a3      	ldr	r3, [r4, #8]
 8026fc4:	4607      	mov	r7, r0
 8026fc6:	4616      	mov	r6, r2
 8026fc8:	f109 0501 	add.w	r5, r9, #1
 8026fcc:	42ab      	cmp	r3, r5
 8026fce:	db31      	blt.n	8027034 <__lshift+0x84>
 8026fd0:	4638      	mov	r0, r7
 8026fd2:	f7ff fe35 	bl	8026c40 <_Balloc>
 8026fd6:	2200      	movs	r2, #0
 8026fd8:	4680      	mov	r8, r0
 8026fda:	f100 0314 	add.w	r3, r0, #20
 8026fde:	4611      	mov	r1, r2
 8026fe0:	4552      	cmp	r2, sl
 8026fe2:	db2a      	blt.n	802703a <__lshift+0x8a>
 8026fe4:	6920      	ldr	r0, [r4, #16]
 8026fe6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8026fea:	f104 0114 	add.w	r1, r4, #20
 8026fee:	f016 021f 	ands.w	r2, r6, #31
 8026ff2:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8026ff6:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 8026ffa:	d022      	beq.n	8027042 <__lshift+0x92>
 8026ffc:	f1c2 0c20 	rsb	ip, r2, #32
 8027000:	2000      	movs	r0, #0
 8027002:	680e      	ldr	r6, [r1, #0]
 8027004:	4096      	lsls	r6, r2
 8027006:	4330      	orrs	r0, r6
 8027008:	f843 0b04 	str.w	r0, [r3], #4
 802700c:	f851 0b04 	ldr.w	r0, [r1], #4
 8027010:	458e      	cmp	lr, r1
 8027012:	fa20 f00c 	lsr.w	r0, r0, ip
 8027016:	d8f4      	bhi.n	8027002 <__lshift+0x52>
 8027018:	6018      	str	r0, [r3, #0]
 802701a:	b108      	cbz	r0, 8027020 <__lshift+0x70>
 802701c:	f109 0502 	add.w	r5, r9, #2
 8027020:	3d01      	subs	r5, #1
 8027022:	4638      	mov	r0, r7
 8027024:	f8c8 5010 	str.w	r5, [r8, #16]
 8027028:	4621      	mov	r1, r4
 802702a:	f7ff fe3d 	bl	8026ca8 <_Bfree>
 802702e:	4640      	mov	r0, r8
 8027030:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8027034:	3101      	adds	r1, #1
 8027036:	005b      	lsls	r3, r3, #1
 8027038:	e7c8      	b.n	8026fcc <__lshift+0x1c>
 802703a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 802703e:	3201      	adds	r2, #1
 8027040:	e7ce      	b.n	8026fe0 <__lshift+0x30>
 8027042:	3b04      	subs	r3, #4
 8027044:	f851 2b04 	ldr.w	r2, [r1], #4
 8027048:	f843 2f04 	str.w	r2, [r3, #4]!
 802704c:	458e      	cmp	lr, r1
 802704e:	d8f9      	bhi.n	8027044 <__lshift+0x94>
 8027050:	e7e6      	b.n	8027020 <__lshift+0x70>

08027052 <__mcmp>:
 8027052:	6903      	ldr	r3, [r0, #16]
 8027054:	690a      	ldr	r2, [r1, #16]
 8027056:	1a9b      	subs	r3, r3, r2
 8027058:	b530      	push	{r4, r5, lr}
 802705a:	d10c      	bne.n	8027076 <__mcmp+0x24>
 802705c:	0092      	lsls	r2, r2, #2
 802705e:	3014      	adds	r0, #20
 8027060:	3114      	adds	r1, #20
 8027062:	1884      	adds	r4, r0, r2
 8027064:	4411      	add	r1, r2
 8027066:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 802706a:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 802706e:	4295      	cmp	r5, r2
 8027070:	d003      	beq.n	802707a <__mcmp+0x28>
 8027072:	d305      	bcc.n	8027080 <__mcmp+0x2e>
 8027074:	2301      	movs	r3, #1
 8027076:	4618      	mov	r0, r3
 8027078:	bd30      	pop	{r4, r5, pc}
 802707a:	42a0      	cmp	r0, r4
 802707c:	d3f3      	bcc.n	8027066 <__mcmp+0x14>
 802707e:	e7fa      	b.n	8027076 <__mcmp+0x24>
 8027080:	f04f 33ff 	mov.w	r3, #4294967295
 8027084:	e7f7      	b.n	8027076 <__mcmp+0x24>

08027086 <__mdiff>:
 8027086:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802708a:	460d      	mov	r5, r1
 802708c:	4607      	mov	r7, r0
 802708e:	4611      	mov	r1, r2
 8027090:	4628      	mov	r0, r5
 8027092:	4614      	mov	r4, r2
 8027094:	f7ff ffdd 	bl	8027052 <__mcmp>
 8027098:	1e06      	subs	r6, r0, #0
 802709a:	d108      	bne.n	80270ae <__mdiff+0x28>
 802709c:	4631      	mov	r1, r6
 802709e:	4638      	mov	r0, r7
 80270a0:	f7ff fdce 	bl	8026c40 <_Balloc>
 80270a4:	2301      	movs	r3, #1
 80270a6:	6103      	str	r3, [r0, #16]
 80270a8:	6146      	str	r6, [r0, #20]
 80270aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80270ae:	bfa4      	itt	ge
 80270b0:	4623      	movge	r3, r4
 80270b2:	462c      	movge	r4, r5
 80270b4:	4638      	mov	r0, r7
 80270b6:	6861      	ldr	r1, [r4, #4]
 80270b8:	bfa6      	itte	ge
 80270ba:	461d      	movge	r5, r3
 80270bc:	2600      	movge	r6, #0
 80270be:	2601      	movlt	r6, #1
 80270c0:	f7ff fdbe 	bl	8026c40 <_Balloc>
 80270c4:	692b      	ldr	r3, [r5, #16]
 80270c6:	60c6      	str	r6, [r0, #12]
 80270c8:	6926      	ldr	r6, [r4, #16]
 80270ca:	f105 0914 	add.w	r9, r5, #20
 80270ce:	f104 0214 	add.w	r2, r4, #20
 80270d2:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80270d6:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80270da:	f100 0514 	add.w	r5, r0, #20
 80270de:	f04f 0c00 	mov.w	ip, #0
 80270e2:	f852 ab04 	ldr.w	sl, [r2], #4
 80270e6:	f859 4b04 	ldr.w	r4, [r9], #4
 80270ea:	fa1c f18a 	uxtah	r1, ip, sl
 80270ee:	b2a3      	uxth	r3, r4
 80270f0:	1ac9      	subs	r1, r1, r3
 80270f2:	0c23      	lsrs	r3, r4, #16
 80270f4:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80270f8:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80270fc:	b289      	uxth	r1, r1
 80270fe:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8027102:	45c8      	cmp	r8, r9
 8027104:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8027108:	4696      	mov	lr, r2
 802710a:	f845 3b04 	str.w	r3, [r5], #4
 802710e:	d8e8      	bhi.n	80270e2 <__mdiff+0x5c>
 8027110:	45be      	cmp	lr, r7
 8027112:	d305      	bcc.n	8027120 <__mdiff+0x9a>
 8027114:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8027118:	b18b      	cbz	r3, 802713e <__mdiff+0xb8>
 802711a:	6106      	str	r6, [r0, #16]
 802711c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8027120:	f85e 1b04 	ldr.w	r1, [lr], #4
 8027124:	fa1c f381 	uxtah	r3, ip, r1
 8027128:	141a      	asrs	r2, r3, #16
 802712a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 802712e:	b29b      	uxth	r3, r3
 8027130:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8027134:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8027138:	f845 3b04 	str.w	r3, [r5], #4
 802713c:	e7e8      	b.n	8027110 <__mdiff+0x8a>
 802713e:	3e01      	subs	r6, #1
 8027140:	e7e8      	b.n	8027114 <__mdiff+0x8e>

08027142 <__d2b>:
 8027142:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8027146:	460e      	mov	r6, r1
 8027148:	2101      	movs	r1, #1
 802714a:	ec59 8b10 	vmov	r8, r9, d0
 802714e:	4615      	mov	r5, r2
 8027150:	f7ff fd76 	bl	8026c40 <_Balloc>
 8027154:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8027158:	4607      	mov	r7, r0
 802715a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 802715e:	bb34      	cbnz	r4, 80271ae <__d2b+0x6c>
 8027160:	9301      	str	r3, [sp, #4]
 8027162:	f1b8 0f00 	cmp.w	r8, #0
 8027166:	d027      	beq.n	80271b8 <__d2b+0x76>
 8027168:	a802      	add	r0, sp, #8
 802716a:	f840 8d08 	str.w	r8, [r0, #-8]!
 802716e:	f7ff fe0c 	bl	8026d8a <__lo0bits>
 8027172:	9900      	ldr	r1, [sp, #0]
 8027174:	b1f0      	cbz	r0, 80271b4 <__d2b+0x72>
 8027176:	9a01      	ldr	r2, [sp, #4]
 8027178:	f1c0 0320 	rsb	r3, r0, #32
 802717c:	fa02 f303 	lsl.w	r3, r2, r3
 8027180:	430b      	orrs	r3, r1
 8027182:	40c2      	lsrs	r2, r0
 8027184:	617b      	str	r3, [r7, #20]
 8027186:	9201      	str	r2, [sp, #4]
 8027188:	9b01      	ldr	r3, [sp, #4]
 802718a:	61bb      	str	r3, [r7, #24]
 802718c:	2b00      	cmp	r3, #0
 802718e:	bf14      	ite	ne
 8027190:	2102      	movne	r1, #2
 8027192:	2101      	moveq	r1, #1
 8027194:	6139      	str	r1, [r7, #16]
 8027196:	b1c4      	cbz	r4, 80271ca <__d2b+0x88>
 8027198:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 802719c:	4404      	add	r4, r0
 802719e:	6034      	str	r4, [r6, #0]
 80271a0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80271a4:	6028      	str	r0, [r5, #0]
 80271a6:	4638      	mov	r0, r7
 80271a8:	b003      	add	sp, #12
 80271aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80271ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80271b2:	e7d5      	b.n	8027160 <__d2b+0x1e>
 80271b4:	6179      	str	r1, [r7, #20]
 80271b6:	e7e7      	b.n	8027188 <__d2b+0x46>
 80271b8:	a801      	add	r0, sp, #4
 80271ba:	f7ff fde6 	bl	8026d8a <__lo0bits>
 80271be:	9b01      	ldr	r3, [sp, #4]
 80271c0:	617b      	str	r3, [r7, #20]
 80271c2:	2101      	movs	r1, #1
 80271c4:	6139      	str	r1, [r7, #16]
 80271c6:	3020      	adds	r0, #32
 80271c8:	e7e5      	b.n	8027196 <__d2b+0x54>
 80271ca:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80271ce:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80271d2:	6030      	str	r0, [r6, #0]
 80271d4:	6918      	ldr	r0, [r3, #16]
 80271d6:	f7ff fdb9 	bl	8026d4c <__hi0bits>
 80271da:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80271de:	e7e1      	b.n	80271a4 <__d2b+0x62>

080271e0 <_calloc_r>:
 80271e0:	b538      	push	{r3, r4, r5, lr}
 80271e2:	fb02 f401 	mul.w	r4, r2, r1
 80271e6:	4621      	mov	r1, r4
 80271e8:	f000 f856 	bl	8027298 <_malloc_r>
 80271ec:	4605      	mov	r5, r0
 80271ee:	b118      	cbz	r0, 80271f8 <_calloc_r+0x18>
 80271f0:	4622      	mov	r2, r4
 80271f2:	2100      	movs	r1, #0
 80271f4:	f7fe f9d9 	bl	80255aa <memset>
 80271f8:	4628      	mov	r0, r5
 80271fa:	bd38      	pop	{r3, r4, r5, pc}

080271fc <_free_r>:
 80271fc:	b538      	push	{r3, r4, r5, lr}
 80271fe:	4605      	mov	r5, r0
 8027200:	2900      	cmp	r1, #0
 8027202:	d045      	beq.n	8027290 <_free_r+0x94>
 8027204:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8027208:	1f0c      	subs	r4, r1, #4
 802720a:	2b00      	cmp	r3, #0
 802720c:	bfb8      	it	lt
 802720e:	18e4      	addlt	r4, r4, r3
 8027210:	f000 fed0 	bl	8027fb4 <__malloc_lock>
 8027214:	4a1f      	ldr	r2, [pc, #124]	; (8027294 <_free_r+0x98>)
 8027216:	6813      	ldr	r3, [r2, #0]
 8027218:	4610      	mov	r0, r2
 802721a:	b933      	cbnz	r3, 802722a <_free_r+0x2e>
 802721c:	6063      	str	r3, [r4, #4]
 802721e:	6014      	str	r4, [r2, #0]
 8027220:	4628      	mov	r0, r5
 8027222:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8027226:	f000 bec6 	b.w	8027fb6 <__malloc_unlock>
 802722a:	42a3      	cmp	r3, r4
 802722c:	d90c      	bls.n	8027248 <_free_r+0x4c>
 802722e:	6821      	ldr	r1, [r4, #0]
 8027230:	1862      	adds	r2, r4, r1
 8027232:	4293      	cmp	r3, r2
 8027234:	bf04      	itt	eq
 8027236:	681a      	ldreq	r2, [r3, #0]
 8027238:	685b      	ldreq	r3, [r3, #4]
 802723a:	6063      	str	r3, [r4, #4]
 802723c:	bf04      	itt	eq
 802723e:	1852      	addeq	r2, r2, r1
 8027240:	6022      	streq	r2, [r4, #0]
 8027242:	6004      	str	r4, [r0, #0]
 8027244:	e7ec      	b.n	8027220 <_free_r+0x24>
 8027246:	4613      	mov	r3, r2
 8027248:	685a      	ldr	r2, [r3, #4]
 802724a:	b10a      	cbz	r2, 8027250 <_free_r+0x54>
 802724c:	42a2      	cmp	r2, r4
 802724e:	d9fa      	bls.n	8027246 <_free_r+0x4a>
 8027250:	6819      	ldr	r1, [r3, #0]
 8027252:	1858      	adds	r0, r3, r1
 8027254:	42a0      	cmp	r0, r4
 8027256:	d10b      	bne.n	8027270 <_free_r+0x74>
 8027258:	6820      	ldr	r0, [r4, #0]
 802725a:	4401      	add	r1, r0
 802725c:	1858      	adds	r0, r3, r1
 802725e:	4282      	cmp	r2, r0
 8027260:	6019      	str	r1, [r3, #0]
 8027262:	d1dd      	bne.n	8027220 <_free_r+0x24>
 8027264:	6810      	ldr	r0, [r2, #0]
 8027266:	6852      	ldr	r2, [r2, #4]
 8027268:	605a      	str	r2, [r3, #4]
 802726a:	4401      	add	r1, r0
 802726c:	6019      	str	r1, [r3, #0]
 802726e:	e7d7      	b.n	8027220 <_free_r+0x24>
 8027270:	d902      	bls.n	8027278 <_free_r+0x7c>
 8027272:	230c      	movs	r3, #12
 8027274:	602b      	str	r3, [r5, #0]
 8027276:	e7d3      	b.n	8027220 <_free_r+0x24>
 8027278:	6820      	ldr	r0, [r4, #0]
 802727a:	1821      	adds	r1, r4, r0
 802727c:	428a      	cmp	r2, r1
 802727e:	bf04      	itt	eq
 8027280:	6811      	ldreq	r1, [r2, #0]
 8027282:	6852      	ldreq	r2, [r2, #4]
 8027284:	6062      	str	r2, [r4, #4]
 8027286:	bf04      	itt	eq
 8027288:	1809      	addeq	r1, r1, r0
 802728a:	6021      	streq	r1, [r4, #0]
 802728c:	605c      	str	r4, [r3, #4]
 802728e:	e7c7      	b.n	8027220 <_free_r+0x24>
 8027290:	bd38      	pop	{r3, r4, r5, pc}
 8027292:	bf00      	nop
 8027294:	20000524 	.word	0x20000524

08027298 <_malloc_r>:
 8027298:	b570      	push	{r4, r5, r6, lr}
 802729a:	1ccd      	adds	r5, r1, #3
 802729c:	f025 0503 	bic.w	r5, r5, #3
 80272a0:	3508      	adds	r5, #8
 80272a2:	2d0c      	cmp	r5, #12
 80272a4:	bf38      	it	cc
 80272a6:	250c      	movcc	r5, #12
 80272a8:	2d00      	cmp	r5, #0
 80272aa:	4606      	mov	r6, r0
 80272ac:	db01      	blt.n	80272b2 <_malloc_r+0x1a>
 80272ae:	42a9      	cmp	r1, r5
 80272b0:	d903      	bls.n	80272ba <_malloc_r+0x22>
 80272b2:	230c      	movs	r3, #12
 80272b4:	6033      	str	r3, [r6, #0]
 80272b6:	2000      	movs	r0, #0
 80272b8:	bd70      	pop	{r4, r5, r6, pc}
 80272ba:	f000 fe7b 	bl	8027fb4 <__malloc_lock>
 80272be:	4a23      	ldr	r2, [pc, #140]	; (802734c <_malloc_r+0xb4>)
 80272c0:	6814      	ldr	r4, [r2, #0]
 80272c2:	4621      	mov	r1, r4
 80272c4:	b991      	cbnz	r1, 80272ec <_malloc_r+0x54>
 80272c6:	4c22      	ldr	r4, [pc, #136]	; (8027350 <_malloc_r+0xb8>)
 80272c8:	6823      	ldr	r3, [r4, #0]
 80272ca:	b91b      	cbnz	r3, 80272d4 <_malloc_r+0x3c>
 80272cc:	4630      	mov	r0, r6
 80272ce:	f000 fc97 	bl	8027c00 <_sbrk_r>
 80272d2:	6020      	str	r0, [r4, #0]
 80272d4:	4629      	mov	r1, r5
 80272d6:	4630      	mov	r0, r6
 80272d8:	f000 fc92 	bl	8027c00 <_sbrk_r>
 80272dc:	1c43      	adds	r3, r0, #1
 80272de:	d126      	bne.n	802732e <_malloc_r+0x96>
 80272e0:	230c      	movs	r3, #12
 80272e2:	6033      	str	r3, [r6, #0]
 80272e4:	4630      	mov	r0, r6
 80272e6:	f000 fe66 	bl	8027fb6 <__malloc_unlock>
 80272ea:	e7e4      	b.n	80272b6 <_malloc_r+0x1e>
 80272ec:	680b      	ldr	r3, [r1, #0]
 80272ee:	1b5b      	subs	r3, r3, r5
 80272f0:	d41a      	bmi.n	8027328 <_malloc_r+0x90>
 80272f2:	2b0b      	cmp	r3, #11
 80272f4:	d90f      	bls.n	8027316 <_malloc_r+0x7e>
 80272f6:	600b      	str	r3, [r1, #0]
 80272f8:	50cd      	str	r5, [r1, r3]
 80272fa:	18cc      	adds	r4, r1, r3
 80272fc:	4630      	mov	r0, r6
 80272fe:	f000 fe5a 	bl	8027fb6 <__malloc_unlock>
 8027302:	f104 000b 	add.w	r0, r4, #11
 8027306:	1d23      	adds	r3, r4, #4
 8027308:	f020 0007 	bic.w	r0, r0, #7
 802730c:	1ac3      	subs	r3, r0, r3
 802730e:	d01b      	beq.n	8027348 <_malloc_r+0xb0>
 8027310:	425a      	negs	r2, r3
 8027312:	50e2      	str	r2, [r4, r3]
 8027314:	bd70      	pop	{r4, r5, r6, pc}
 8027316:	428c      	cmp	r4, r1
 8027318:	bf0d      	iteet	eq
 802731a:	6863      	ldreq	r3, [r4, #4]
 802731c:	684b      	ldrne	r3, [r1, #4]
 802731e:	6063      	strne	r3, [r4, #4]
 8027320:	6013      	streq	r3, [r2, #0]
 8027322:	bf18      	it	ne
 8027324:	460c      	movne	r4, r1
 8027326:	e7e9      	b.n	80272fc <_malloc_r+0x64>
 8027328:	460c      	mov	r4, r1
 802732a:	6849      	ldr	r1, [r1, #4]
 802732c:	e7ca      	b.n	80272c4 <_malloc_r+0x2c>
 802732e:	1cc4      	adds	r4, r0, #3
 8027330:	f024 0403 	bic.w	r4, r4, #3
 8027334:	42a0      	cmp	r0, r4
 8027336:	d005      	beq.n	8027344 <_malloc_r+0xac>
 8027338:	1a21      	subs	r1, r4, r0
 802733a:	4630      	mov	r0, r6
 802733c:	f000 fc60 	bl	8027c00 <_sbrk_r>
 8027340:	3001      	adds	r0, #1
 8027342:	d0cd      	beq.n	80272e0 <_malloc_r+0x48>
 8027344:	6025      	str	r5, [r4, #0]
 8027346:	e7d9      	b.n	80272fc <_malloc_r+0x64>
 8027348:	bd70      	pop	{r4, r5, r6, pc}
 802734a:	bf00      	nop
 802734c:	20000524 	.word	0x20000524
 8027350:	20000528 	.word	0x20000528

08027354 <__ssputs_r>:
 8027354:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8027358:	688e      	ldr	r6, [r1, #8]
 802735a:	429e      	cmp	r6, r3
 802735c:	4682      	mov	sl, r0
 802735e:	460c      	mov	r4, r1
 8027360:	4691      	mov	r9, r2
 8027362:	4698      	mov	r8, r3
 8027364:	d835      	bhi.n	80273d2 <__ssputs_r+0x7e>
 8027366:	898a      	ldrh	r2, [r1, #12]
 8027368:	f412 6f90 	tst.w	r2, #1152	; 0x480
 802736c:	d031      	beq.n	80273d2 <__ssputs_r+0x7e>
 802736e:	6825      	ldr	r5, [r4, #0]
 8027370:	6909      	ldr	r1, [r1, #16]
 8027372:	1a6f      	subs	r7, r5, r1
 8027374:	6965      	ldr	r5, [r4, #20]
 8027376:	2302      	movs	r3, #2
 8027378:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802737c:	fb95 f5f3 	sdiv	r5, r5, r3
 8027380:	f108 0301 	add.w	r3, r8, #1
 8027384:	443b      	add	r3, r7
 8027386:	429d      	cmp	r5, r3
 8027388:	bf38      	it	cc
 802738a:	461d      	movcc	r5, r3
 802738c:	0553      	lsls	r3, r2, #21
 802738e:	d531      	bpl.n	80273f4 <__ssputs_r+0xa0>
 8027390:	4629      	mov	r1, r5
 8027392:	f7ff ff81 	bl	8027298 <_malloc_r>
 8027396:	4606      	mov	r6, r0
 8027398:	b950      	cbnz	r0, 80273b0 <__ssputs_r+0x5c>
 802739a:	230c      	movs	r3, #12
 802739c:	f8ca 3000 	str.w	r3, [sl]
 80273a0:	89a3      	ldrh	r3, [r4, #12]
 80273a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80273a6:	81a3      	strh	r3, [r4, #12]
 80273a8:	f04f 30ff 	mov.w	r0, #4294967295
 80273ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80273b0:	463a      	mov	r2, r7
 80273b2:	6921      	ldr	r1, [r4, #16]
 80273b4:	f7fe f8ee 	bl	8025594 <memcpy>
 80273b8:	89a3      	ldrh	r3, [r4, #12]
 80273ba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80273be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80273c2:	81a3      	strh	r3, [r4, #12]
 80273c4:	6126      	str	r6, [r4, #16]
 80273c6:	6165      	str	r5, [r4, #20]
 80273c8:	443e      	add	r6, r7
 80273ca:	1bed      	subs	r5, r5, r7
 80273cc:	6026      	str	r6, [r4, #0]
 80273ce:	60a5      	str	r5, [r4, #8]
 80273d0:	4646      	mov	r6, r8
 80273d2:	4546      	cmp	r6, r8
 80273d4:	bf28      	it	cs
 80273d6:	4646      	movcs	r6, r8
 80273d8:	4632      	mov	r2, r6
 80273da:	4649      	mov	r1, r9
 80273dc:	6820      	ldr	r0, [r4, #0]
 80273de:	f000 fdcf 	bl	8027f80 <memmove>
 80273e2:	68a3      	ldr	r3, [r4, #8]
 80273e4:	1b9b      	subs	r3, r3, r6
 80273e6:	60a3      	str	r3, [r4, #8]
 80273e8:	6823      	ldr	r3, [r4, #0]
 80273ea:	441e      	add	r6, r3
 80273ec:	6026      	str	r6, [r4, #0]
 80273ee:	2000      	movs	r0, #0
 80273f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80273f4:	462a      	mov	r2, r5
 80273f6:	f000 fddf 	bl	8027fb8 <_realloc_r>
 80273fa:	4606      	mov	r6, r0
 80273fc:	2800      	cmp	r0, #0
 80273fe:	d1e1      	bne.n	80273c4 <__ssputs_r+0x70>
 8027400:	6921      	ldr	r1, [r4, #16]
 8027402:	4650      	mov	r0, sl
 8027404:	f7ff fefa 	bl	80271fc <_free_r>
 8027408:	e7c7      	b.n	802739a <__ssputs_r+0x46>
	...

0802740c <_svfiprintf_r>:
 802740c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027410:	b09d      	sub	sp, #116	; 0x74
 8027412:	4680      	mov	r8, r0
 8027414:	9303      	str	r3, [sp, #12]
 8027416:	898b      	ldrh	r3, [r1, #12]
 8027418:	061c      	lsls	r4, r3, #24
 802741a:	460d      	mov	r5, r1
 802741c:	4616      	mov	r6, r2
 802741e:	d50f      	bpl.n	8027440 <_svfiprintf_r+0x34>
 8027420:	690b      	ldr	r3, [r1, #16]
 8027422:	b96b      	cbnz	r3, 8027440 <_svfiprintf_r+0x34>
 8027424:	2140      	movs	r1, #64	; 0x40
 8027426:	f7ff ff37 	bl	8027298 <_malloc_r>
 802742a:	6028      	str	r0, [r5, #0]
 802742c:	6128      	str	r0, [r5, #16]
 802742e:	b928      	cbnz	r0, 802743c <_svfiprintf_r+0x30>
 8027430:	230c      	movs	r3, #12
 8027432:	f8c8 3000 	str.w	r3, [r8]
 8027436:	f04f 30ff 	mov.w	r0, #4294967295
 802743a:	e0c5      	b.n	80275c8 <_svfiprintf_r+0x1bc>
 802743c:	2340      	movs	r3, #64	; 0x40
 802743e:	616b      	str	r3, [r5, #20]
 8027440:	2300      	movs	r3, #0
 8027442:	9309      	str	r3, [sp, #36]	; 0x24
 8027444:	2320      	movs	r3, #32
 8027446:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802744a:	2330      	movs	r3, #48	; 0x30
 802744c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8027450:	f04f 0b01 	mov.w	fp, #1
 8027454:	4637      	mov	r7, r6
 8027456:	463c      	mov	r4, r7
 8027458:	f814 3b01 	ldrb.w	r3, [r4], #1
 802745c:	2b00      	cmp	r3, #0
 802745e:	d13c      	bne.n	80274da <_svfiprintf_r+0xce>
 8027460:	ebb7 0a06 	subs.w	sl, r7, r6
 8027464:	d00b      	beq.n	802747e <_svfiprintf_r+0x72>
 8027466:	4653      	mov	r3, sl
 8027468:	4632      	mov	r2, r6
 802746a:	4629      	mov	r1, r5
 802746c:	4640      	mov	r0, r8
 802746e:	f7ff ff71 	bl	8027354 <__ssputs_r>
 8027472:	3001      	adds	r0, #1
 8027474:	f000 80a3 	beq.w	80275be <_svfiprintf_r+0x1b2>
 8027478:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802747a:	4453      	add	r3, sl
 802747c:	9309      	str	r3, [sp, #36]	; 0x24
 802747e:	783b      	ldrb	r3, [r7, #0]
 8027480:	2b00      	cmp	r3, #0
 8027482:	f000 809c 	beq.w	80275be <_svfiprintf_r+0x1b2>
 8027486:	2300      	movs	r3, #0
 8027488:	f04f 32ff 	mov.w	r2, #4294967295
 802748c:	9304      	str	r3, [sp, #16]
 802748e:	9307      	str	r3, [sp, #28]
 8027490:	9205      	str	r2, [sp, #20]
 8027492:	9306      	str	r3, [sp, #24]
 8027494:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8027498:	931a      	str	r3, [sp, #104]	; 0x68
 802749a:	2205      	movs	r2, #5
 802749c:	7821      	ldrb	r1, [r4, #0]
 802749e:	4850      	ldr	r0, [pc, #320]	; (80275e0 <_svfiprintf_r+0x1d4>)
 80274a0:	f7f8 feb6 	bl	8020210 <memchr>
 80274a4:	1c67      	adds	r7, r4, #1
 80274a6:	9b04      	ldr	r3, [sp, #16]
 80274a8:	b9d8      	cbnz	r0, 80274e2 <_svfiprintf_r+0xd6>
 80274aa:	06d9      	lsls	r1, r3, #27
 80274ac:	bf44      	itt	mi
 80274ae:	2220      	movmi	r2, #32
 80274b0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80274b4:	071a      	lsls	r2, r3, #28
 80274b6:	bf44      	itt	mi
 80274b8:	222b      	movmi	r2, #43	; 0x2b
 80274ba:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80274be:	7822      	ldrb	r2, [r4, #0]
 80274c0:	2a2a      	cmp	r2, #42	; 0x2a
 80274c2:	d016      	beq.n	80274f2 <_svfiprintf_r+0xe6>
 80274c4:	9a07      	ldr	r2, [sp, #28]
 80274c6:	2100      	movs	r1, #0
 80274c8:	200a      	movs	r0, #10
 80274ca:	4627      	mov	r7, r4
 80274cc:	3401      	adds	r4, #1
 80274ce:	783b      	ldrb	r3, [r7, #0]
 80274d0:	3b30      	subs	r3, #48	; 0x30
 80274d2:	2b09      	cmp	r3, #9
 80274d4:	d951      	bls.n	802757a <_svfiprintf_r+0x16e>
 80274d6:	b1c9      	cbz	r1, 802750c <_svfiprintf_r+0x100>
 80274d8:	e011      	b.n	80274fe <_svfiprintf_r+0xf2>
 80274da:	2b25      	cmp	r3, #37	; 0x25
 80274dc:	d0c0      	beq.n	8027460 <_svfiprintf_r+0x54>
 80274de:	4627      	mov	r7, r4
 80274e0:	e7b9      	b.n	8027456 <_svfiprintf_r+0x4a>
 80274e2:	4a3f      	ldr	r2, [pc, #252]	; (80275e0 <_svfiprintf_r+0x1d4>)
 80274e4:	1a80      	subs	r0, r0, r2
 80274e6:	fa0b f000 	lsl.w	r0, fp, r0
 80274ea:	4318      	orrs	r0, r3
 80274ec:	9004      	str	r0, [sp, #16]
 80274ee:	463c      	mov	r4, r7
 80274f0:	e7d3      	b.n	802749a <_svfiprintf_r+0x8e>
 80274f2:	9a03      	ldr	r2, [sp, #12]
 80274f4:	1d11      	adds	r1, r2, #4
 80274f6:	6812      	ldr	r2, [r2, #0]
 80274f8:	9103      	str	r1, [sp, #12]
 80274fa:	2a00      	cmp	r2, #0
 80274fc:	db01      	blt.n	8027502 <_svfiprintf_r+0xf6>
 80274fe:	9207      	str	r2, [sp, #28]
 8027500:	e004      	b.n	802750c <_svfiprintf_r+0x100>
 8027502:	4252      	negs	r2, r2
 8027504:	f043 0302 	orr.w	r3, r3, #2
 8027508:	9207      	str	r2, [sp, #28]
 802750a:	9304      	str	r3, [sp, #16]
 802750c:	783b      	ldrb	r3, [r7, #0]
 802750e:	2b2e      	cmp	r3, #46	; 0x2e
 8027510:	d10e      	bne.n	8027530 <_svfiprintf_r+0x124>
 8027512:	787b      	ldrb	r3, [r7, #1]
 8027514:	2b2a      	cmp	r3, #42	; 0x2a
 8027516:	f107 0101 	add.w	r1, r7, #1
 802751a:	d132      	bne.n	8027582 <_svfiprintf_r+0x176>
 802751c:	9b03      	ldr	r3, [sp, #12]
 802751e:	1d1a      	adds	r2, r3, #4
 8027520:	681b      	ldr	r3, [r3, #0]
 8027522:	9203      	str	r2, [sp, #12]
 8027524:	2b00      	cmp	r3, #0
 8027526:	bfb8      	it	lt
 8027528:	f04f 33ff 	movlt.w	r3, #4294967295
 802752c:	3702      	adds	r7, #2
 802752e:	9305      	str	r3, [sp, #20]
 8027530:	4c2c      	ldr	r4, [pc, #176]	; (80275e4 <_svfiprintf_r+0x1d8>)
 8027532:	7839      	ldrb	r1, [r7, #0]
 8027534:	2203      	movs	r2, #3
 8027536:	4620      	mov	r0, r4
 8027538:	f7f8 fe6a 	bl	8020210 <memchr>
 802753c:	b138      	cbz	r0, 802754e <_svfiprintf_r+0x142>
 802753e:	2340      	movs	r3, #64	; 0x40
 8027540:	1b00      	subs	r0, r0, r4
 8027542:	fa03 f000 	lsl.w	r0, r3, r0
 8027546:	9b04      	ldr	r3, [sp, #16]
 8027548:	4303      	orrs	r3, r0
 802754a:	9304      	str	r3, [sp, #16]
 802754c:	3701      	adds	r7, #1
 802754e:	7839      	ldrb	r1, [r7, #0]
 8027550:	4825      	ldr	r0, [pc, #148]	; (80275e8 <_svfiprintf_r+0x1dc>)
 8027552:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8027556:	2206      	movs	r2, #6
 8027558:	1c7e      	adds	r6, r7, #1
 802755a:	f7f8 fe59 	bl	8020210 <memchr>
 802755e:	2800      	cmp	r0, #0
 8027560:	d035      	beq.n	80275ce <_svfiprintf_r+0x1c2>
 8027562:	4b22      	ldr	r3, [pc, #136]	; (80275ec <_svfiprintf_r+0x1e0>)
 8027564:	b9fb      	cbnz	r3, 80275a6 <_svfiprintf_r+0x19a>
 8027566:	9b03      	ldr	r3, [sp, #12]
 8027568:	3307      	adds	r3, #7
 802756a:	f023 0307 	bic.w	r3, r3, #7
 802756e:	3308      	adds	r3, #8
 8027570:	9303      	str	r3, [sp, #12]
 8027572:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027574:	444b      	add	r3, r9
 8027576:	9309      	str	r3, [sp, #36]	; 0x24
 8027578:	e76c      	b.n	8027454 <_svfiprintf_r+0x48>
 802757a:	fb00 3202 	mla	r2, r0, r2, r3
 802757e:	2101      	movs	r1, #1
 8027580:	e7a3      	b.n	80274ca <_svfiprintf_r+0xbe>
 8027582:	2300      	movs	r3, #0
 8027584:	9305      	str	r3, [sp, #20]
 8027586:	4618      	mov	r0, r3
 8027588:	240a      	movs	r4, #10
 802758a:	460f      	mov	r7, r1
 802758c:	3101      	adds	r1, #1
 802758e:	783a      	ldrb	r2, [r7, #0]
 8027590:	3a30      	subs	r2, #48	; 0x30
 8027592:	2a09      	cmp	r2, #9
 8027594:	d903      	bls.n	802759e <_svfiprintf_r+0x192>
 8027596:	2b00      	cmp	r3, #0
 8027598:	d0ca      	beq.n	8027530 <_svfiprintf_r+0x124>
 802759a:	9005      	str	r0, [sp, #20]
 802759c:	e7c8      	b.n	8027530 <_svfiprintf_r+0x124>
 802759e:	fb04 2000 	mla	r0, r4, r0, r2
 80275a2:	2301      	movs	r3, #1
 80275a4:	e7f1      	b.n	802758a <_svfiprintf_r+0x17e>
 80275a6:	ab03      	add	r3, sp, #12
 80275a8:	9300      	str	r3, [sp, #0]
 80275aa:	462a      	mov	r2, r5
 80275ac:	4b10      	ldr	r3, [pc, #64]	; (80275f0 <_svfiprintf_r+0x1e4>)
 80275ae:	a904      	add	r1, sp, #16
 80275b0:	4640      	mov	r0, r8
 80275b2:	f7fe f899 	bl	80256e8 <_printf_float>
 80275b6:	f1b0 3fff 	cmp.w	r0, #4294967295
 80275ba:	4681      	mov	r9, r0
 80275bc:	d1d9      	bne.n	8027572 <_svfiprintf_r+0x166>
 80275be:	89ab      	ldrh	r3, [r5, #12]
 80275c0:	065b      	lsls	r3, r3, #25
 80275c2:	f53f af38 	bmi.w	8027436 <_svfiprintf_r+0x2a>
 80275c6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80275c8:	b01d      	add	sp, #116	; 0x74
 80275ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80275ce:	ab03      	add	r3, sp, #12
 80275d0:	9300      	str	r3, [sp, #0]
 80275d2:	462a      	mov	r2, r5
 80275d4:	4b06      	ldr	r3, [pc, #24]	; (80275f0 <_svfiprintf_r+0x1e4>)
 80275d6:	a904      	add	r1, sp, #16
 80275d8:	4640      	mov	r0, r8
 80275da:	f7fe fb3b 	bl	8025c54 <_printf_i>
 80275de:	e7ea      	b.n	80275b6 <_svfiprintf_r+0x1aa>
 80275e0:	08028684 	.word	0x08028684
 80275e4:	0802868a 	.word	0x0802868a
 80275e8:	0802868e 	.word	0x0802868e
 80275ec:	080256e9 	.word	0x080256e9
 80275f0:	08027355 	.word	0x08027355

080275f4 <_sungetc_r>:
 80275f4:	b538      	push	{r3, r4, r5, lr}
 80275f6:	1c4b      	adds	r3, r1, #1
 80275f8:	4614      	mov	r4, r2
 80275fa:	d103      	bne.n	8027604 <_sungetc_r+0x10>
 80275fc:	f04f 35ff 	mov.w	r5, #4294967295
 8027600:	4628      	mov	r0, r5
 8027602:	bd38      	pop	{r3, r4, r5, pc}
 8027604:	8993      	ldrh	r3, [r2, #12]
 8027606:	f023 0320 	bic.w	r3, r3, #32
 802760a:	8193      	strh	r3, [r2, #12]
 802760c:	6b53      	ldr	r3, [r2, #52]	; 0x34
 802760e:	6852      	ldr	r2, [r2, #4]
 8027610:	b2cd      	uxtb	r5, r1
 8027612:	b18b      	cbz	r3, 8027638 <_sungetc_r+0x44>
 8027614:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8027616:	429a      	cmp	r2, r3
 8027618:	da08      	bge.n	802762c <_sungetc_r+0x38>
 802761a:	6823      	ldr	r3, [r4, #0]
 802761c:	1e5a      	subs	r2, r3, #1
 802761e:	6022      	str	r2, [r4, #0]
 8027620:	f803 5c01 	strb.w	r5, [r3, #-1]
 8027624:	6863      	ldr	r3, [r4, #4]
 8027626:	3301      	adds	r3, #1
 8027628:	6063      	str	r3, [r4, #4]
 802762a:	e7e9      	b.n	8027600 <_sungetc_r+0xc>
 802762c:	4621      	mov	r1, r4
 802762e:	f000 fc49 	bl	8027ec4 <__submore>
 8027632:	2800      	cmp	r0, #0
 8027634:	d0f1      	beq.n	802761a <_sungetc_r+0x26>
 8027636:	e7e1      	b.n	80275fc <_sungetc_r+0x8>
 8027638:	6921      	ldr	r1, [r4, #16]
 802763a:	6823      	ldr	r3, [r4, #0]
 802763c:	b151      	cbz	r1, 8027654 <_sungetc_r+0x60>
 802763e:	4299      	cmp	r1, r3
 8027640:	d208      	bcs.n	8027654 <_sungetc_r+0x60>
 8027642:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8027646:	428d      	cmp	r5, r1
 8027648:	d104      	bne.n	8027654 <_sungetc_r+0x60>
 802764a:	3b01      	subs	r3, #1
 802764c:	3201      	adds	r2, #1
 802764e:	6023      	str	r3, [r4, #0]
 8027650:	6062      	str	r2, [r4, #4]
 8027652:	e7d5      	b.n	8027600 <_sungetc_r+0xc>
 8027654:	63e3      	str	r3, [r4, #60]	; 0x3c
 8027656:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802765a:	6363      	str	r3, [r4, #52]	; 0x34
 802765c:	2303      	movs	r3, #3
 802765e:	63a3      	str	r3, [r4, #56]	; 0x38
 8027660:	4623      	mov	r3, r4
 8027662:	6422      	str	r2, [r4, #64]	; 0x40
 8027664:	f803 5f46 	strb.w	r5, [r3, #70]!
 8027668:	6023      	str	r3, [r4, #0]
 802766a:	2301      	movs	r3, #1
 802766c:	e7dc      	b.n	8027628 <_sungetc_r+0x34>

0802766e <__ssrefill_r>:
 802766e:	b510      	push	{r4, lr}
 8027670:	460c      	mov	r4, r1
 8027672:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8027674:	b169      	cbz	r1, 8027692 <__ssrefill_r+0x24>
 8027676:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802767a:	4299      	cmp	r1, r3
 802767c:	d001      	beq.n	8027682 <__ssrefill_r+0x14>
 802767e:	f7ff fdbd 	bl	80271fc <_free_r>
 8027682:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8027684:	6063      	str	r3, [r4, #4]
 8027686:	2000      	movs	r0, #0
 8027688:	6360      	str	r0, [r4, #52]	; 0x34
 802768a:	b113      	cbz	r3, 8027692 <__ssrefill_r+0x24>
 802768c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802768e:	6023      	str	r3, [r4, #0]
 8027690:	bd10      	pop	{r4, pc}
 8027692:	6923      	ldr	r3, [r4, #16]
 8027694:	6023      	str	r3, [r4, #0]
 8027696:	2300      	movs	r3, #0
 8027698:	6063      	str	r3, [r4, #4]
 802769a:	89a3      	ldrh	r3, [r4, #12]
 802769c:	f043 0320 	orr.w	r3, r3, #32
 80276a0:	81a3      	strh	r3, [r4, #12]
 80276a2:	f04f 30ff 	mov.w	r0, #4294967295
 80276a6:	bd10      	pop	{r4, pc}

080276a8 <__ssvfiscanf_r>:
 80276a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80276ac:	f5ad 7d25 	sub.w	sp, sp, #660	; 0x294
 80276b0:	f10d 080c 	add.w	r8, sp, #12
 80276b4:	9301      	str	r3, [sp, #4]
 80276b6:	2300      	movs	r3, #0
 80276b8:	9346      	str	r3, [sp, #280]	; 0x118
 80276ba:	9347      	str	r3, [sp, #284]	; 0x11c
 80276bc:	4ba0      	ldr	r3, [pc, #640]	; (8027940 <__ssvfiscanf_r+0x298>)
 80276be:	93a2      	str	r3, [sp, #648]	; 0x288
 80276c0:	f8df 9284 	ldr.w	r9, [pc, #644]	; 8027948 <__ssvfiscanf_r+0x2a0>
 80276c4:	4b9f      	ldr	r3, [pc, #636]	; (8027944 <__ssvfiscanf_r+0x29c>)
 80276c6:	f8cd 8120 	str.w	r8, [sp, #288]	; 0x120
 80276ca:	4606      	mov	r6, r0
 80276cc:	460c      	mov	r4, r1
 80276ce:	93a3      	str	r3, [sp, #652]	; 0x28c
 80276d0:	4692      	mov	sl, r2
 80276d2:	270a      	movs	r7, #10
 80276d4:	f89a 3000 	ldrb.w	r3, [sl]
 80276d8:	2b00      	cmp	r3, #0
 80276da:	f000 812f 	beq.w	802793c <__ssvfiscanf_r+0x294>
 80276de:	f000 fc2f 	bl	8027f40 <__locale_ctype_ptr>
 80276e2:	f89a b000 	ldrb.w	fp, [sl]
 80276e6:	4458      	add	r0, fp
 80276e8:	7843      	ldrb	r3, [r0, #1]
 80276ea:	f013 0308 	ands.w	r3, r3, #8
 80276ee:	d143      	bne.n	8027778 <__ssvfiscanf_r+0xd0>
 80276f0:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 80276f4:	f10a 0501 	add.w	r5, sl, #1
 80276f8:	f040 8099 	bne.w	802782e <__ssvfiscanf_r+0x186>
 80276fc:	9345      	str	r3, [sp, #276]	; 0x114
 80276fe:	9343      	str	r3, [sp, #268]	; 0x10c
 8027700:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8027704:	2b2a      	cmp	r3, #42	; 0x2a
 8027706:	d103      	bne.n	8027710 <__ssvfiscanf_r+0x68>
 8027708:	2310      	movs	r3, #16
 802770a:	9343      	str	r3, [sp, #268]	; 0x10c
 802770c:	f10a 0502 	add.w	r5, sl, #2
 8027710:	7829      	ldrb	r1, [r5, #0]
 8027712:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8027716:	2a09      	cmp	r2, #9
 8027718:	46aa      	mov	sl, r5
 802771a:	f105 0501 	add.w	r5, r5, #1
 802771e:	d941      	bls.n	80277a4 <__ssvfiscanf_r+0xfc>
 8027720:	2203      	movs	r2, #3
 8027722:	4889      	ldr	r0, [pc, #548]	; (8027948 <__ssvfiscanf_r+0x2a0>)
 8027724:	f7f8 fd74 	bl	8020210 <memchr>
 8027728:	b138      	cbz	r0, 802773a <__ssvfiscanf_r+0x92>
 802772a:	eba0 0309 	sub.w	r3, r0, r9
 802772e:	2001      	movs	r0, #1
 8027730:	4098      	lsls	r0, r3
 8027732:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8027734:	4318      	orrs	r0, r3
 8027736:	9043      	str	r0, [sp, #268]	; 0x10c
 8027738:	46aa      	mov	sl, r5
 802773a:	f89a 3000 	ldrb.w	r3, [sl]
 802773e:	2b67      	cmp	r3, #103	; 0x67
 8027740:	f10a 0501 	add.w	r5, sl, #1
 8027744:	d84a      	bhi.n	80277dc <__ssvfiscanf_r+0x134>
 8027746:	2b65      	cmp	r3, #101	; 0x65
 8027748:	f080 80b7 	bcs.w	80278ba <__ssvfiscanf_r+0x212>
 802774c:	2b47      	cmp	r3, #71	; 0x47
 802774e:	d82f      	bhi.n	80277b0 <__ssvfiscanf_r+0x108>
 8027750:	2b45      	cmp	r3, #69	; 0x45
 8027752:	f080 80b2 	bcs.w	80278ba <__ssvfiscanf_r+0x212>
 8027756:	2b00      	cmp	r3, #0
 8027758:	f000 8082 	beq.w	8027860 <__ssvfiscanf_r+0x1b8>
 802775c:	2b25      	cmp	r3, #37	; 0x25
 802775e:	d066      	beq.n	802782e <__ssvfiscanf_r+0x186>
 8027760:	2303      	movs	r3, #3
 8027762:	9349      	str	r3, [sp, #292]	; 0x124
 8027764:	9744      	str	r7, [sp, #272]	; 0x110
 8027766:	e045      	b.n	80277f4 <__ssvfiscanf_r+0x14c>
 8027768:	9947      	ldr	r1, [sp, #284]	; 0x11c
 802776a:	3101      	adds	r1, #1
 802776c:	9147      	str	r1, [sp, #284]	; 0x11c
 802776e:	6861      	ldr	r1, [r4, #4]
 8027770:	3301      	adds	r3, #1
 8027772:	3901      	subs	r1, #1
 8027774:	6061      	str	r1, [r4, #4]
 8027776:	6023      	str	r3, [r4, #0]
 8027778:	6863      	ldr	r3, [r4, #4]
 802777a:	2b00      	cmp	r3, #0
 802777c:	dd0b      	ble.n	8027796 <__ssvfiscanf_r+0xee>
 802777e:	f000 fbdf 	bl	8027f40 <__locale_ctype_ptr>
 8027782:	6823      	ldr	r3, [r4, #0]
 8027784:	7819      	ldrb	r1, [r3, #0]
 8027786:	4408      	add	r0, r1
 8027788:	7841      	ldrb	r1, [r0, #1]
 802778a:	070d      	lsls	r5, r1, #28
 802778c:	d4ec      	bmi.n	8027768 <__ssvfiscanf_r+0xc0>
 802778e:	f10a 0501 	add.w	r5, sl, #1
 8027792:	46aa      	mov	sl, r5
 8027794:	e79e      	b.n	80276d4 <__ssvfiscanf_r+0x2c>
 8027796:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8027798:	4621      	mov	r1, r4
 802779a:	4630      	mov	r0, r6
 802779c:	4798      	blx	r3
 802779e:	2800      	cmp	r0, #0
 80277a0:	d0ed      	beq.n	802777e <__ssvfiscanf_r+0xd6>
 80277a2:	e7f4      	b.n	802778e <__ssvfiscanf_r+0xe6>
 80277a4:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80277a6:	fb07 1303 	mla	r3, r7, r3, r1
 80277aa:	3b30      	subs	r3, #48	; 0x30
 80277ac:	9345      	str	r3, [sp, #276]	; 0x114
 80277ae:	e7af      	b.n	8027710 <__ssvfiscanf_r+0x68>
 80277b0:	2b5b      	cmp	r3, #91	; 0x5b
 80277b2:	d061      	beq.n	8027878 <__ssvfiscanf_r+0x1d0>
 80277b4:	d80c      	bhi.n	80277d0 <__ssvfiscanf_r+0x128>
 80277b6:	2b58      	cmp	r3, #88	; 0x58
 80277b8:	d1d2      	bne.n	8027760 <__ssvfiscanf_r+0xb8>
 80277ba:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 80277bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80277c0:	9243      	str	r2, [sp, #268]	; 0x10c
 80277c2:	2210      	movs	r2, #16
 80277c4:	9244      	str	r2, [sp, #272]	; 0x110
 80277c6:	2b6f      	cmp	r3, #111	; 0x6f
 80277c8:	bfb4      	ite	lt
 80277ca:	2303      	movlt	r3, #3
 80277cc:	2304      	movge	r3, #4
 80277ce:	e010      	b.n	80277f2 <__ssvfiscanf_r+0x14a>
 80277d0:	2b63      	cmp	r3, #99	; 0x63
 80277d2:	d05c      	beq.n	802788e <__ssvfiscanf_r+0x1e6>
 80277d4:	2b64      	cmp	r3, #100	; 0x64
 80277d6:	d1c3      	bne.n	8027760 <__ssvfiscanf_r+0xb8>
 80277d8:	9744      	str	r7, [sp, #272]	; 0x110
 80277da:	e7f4      	b.n	80277c6 <__ssvfiscanf_r+0x11e>
 80277dc:	2b70      	cmp	r3, #112	; 0x70
 80277de:	d042      	beq.n	8027866 <__ssvfiscanf_r+0x1be>
 80277e0:	d81d      	bhi.n	802781e <__ssvfiscanf_r+0x176>
 80277e2:	2b6e      	cmp	r3, #110	; 0x6e
 80277e4:	d059      	beq.n	802789a <__ssvfiscanf_r+0x1f2>
 80277e6:	d843      	bhi.n	8027870 <__ssvfiscanf_r+0x1c8>
 80277e8:	2b69      	cmp	r3, #105	; 0x69
 80277ea:	d1b9      	bne.n	8027760 <__ssvfiscanf_r+0xb8>
 80277ec:	2300      	movs	r3, #0
 80277ee:	9344      	str	r3, [sp, #272]	; 0x110
 80277f0:	2303      	movs	r3, #3
 80277f2:	9349      	str	r3, [sp, #292]	; 0x124
 80277f4:	6863      	ldr	r3, [r4, #4]
 80277f6:	2b00      	cmp	r3, #0
 80277f8:	dd61      	ble.n	80278be <__ssvfiscanf_r+0x216>
 80277fa:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80277fc:	0659      	lsls	r1, r3, #25
 80277fe:	d56f      	bpl.n	80278e0 <__ssvfiscanf_r+0x238>
 8027800:	9b49      	ldr	r3, [sp, #292]	; 0x124
 8027802:	2b02      	cmp	r3, #2
 8027804:	dc7c      	bgt.n	8027900 <__ssvfiscanf_r+0x258>
 8027806:	ab01      	add	r3, sp, #4
 8027808:	4622      	mov	r2, r4
 802780a:	a943      	add	r1, sp, #268	; 0x10c
 802780c:	4630      	mov	r0, r6
 802780e:	f000 f89f 	bl	8027950 <_scanf_chars>
 8027812:	2801      	cmp	r0, #1
 8027814:	f000 8092 	beq.w	802793c <__ssvfiscanf_r+0x294>
 8027818:	2802      	cmp	r0, #2
 802781a:	d1ba      	bne.n	8027792 <__ssvfiscanf_r+0xea>
 802781c:	e01d      	b.n	802785a <__ssvfiscanf_r+0x1b2>
 802781e:	2b75      	cmp	r3, #117	; 0x75
 8027820:	d0da      	beq.n	80277d8 <__ssvfiscanf_r+0x130>
 8027822:	2b78      	cmp	r3, #120	; 0x78
 8027824:	d0c9      	beq.n	80277ba <__ssvfiscanf_r+0x112>
 8027826:	2b73      	cmp	r3, #115	; 0x73
 8027828:	d19a      	bne.n	8027760 <__ssvfiscanf_r+0xb8>
 802782a:	2302      	movs	r3, #2
 802782c:	e7e1      	b.n	80277f2 <__ssvfiscanf_r+0x14a>
 802782e:	6863      	ldr	r3, [r4, #4]
 8027830:	2b00      	cmp	r3, #0
 8027832:	dd0c      	ble.n	802784e <__ssvfiscanf_r+0x1a6>
 8027834:	6823      	ldr	r3, [r4, #0]
 8027836:	781a      	ldrb	r2, [r3, #0]
 8027838:	4593      	cmp	fp, r2
 802783a:	d17f      	bne.n	802793c <__ssvfiscanf_r+0x294>
 802783c:	3301      	adds	r3, #1
 802783e:	6862      	ldr	r2, [r4, #4]
 8027840:	6023      	str	r3, [r4, #0]
 8027842:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8027844:	3a01      	subs	r2, #1
 8027846:	3301      	adds	r3, #1
 8027848:	6062      	str	r2, [r4, #4]
 802784a:	9347      	str	r3, [sp, #284]	; 0x11c
 802784c:	e7a1      	b.n	8027792 <__ssvfiscanf_r+0xea>
 802784e:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8027850:	4621      	mov	r1, r4
 8027852:	4630      	mov	r0, r6
 8027854:	4798      	blx	r3
 8027856:	2800      	cmp	r0, #0
 8027858:	d0ec      	beq.n	8027834 <__ssvfiscanf_r+0x18c>
 802785a:	9846      	ldr	r0, [sp, #280]	; 0x118
 802785c:	2800      	cmp	r0, #0
 802785e:	d163      	bne.n	8027928 <__ssvfiscanf_r+0x280>
 8027860:	f04f 30ff 	mov.w	r0, #4294967295
 8027864:	e066      	b.n	8027934 <__ssvfiscanf_r+0x28c>
 8027866:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 8027868:	f042 0220 	orr.w	r2, r2, #32
 802786c:	9243      	str	r2, [sp, #268]	; 0x10c
 802786e:	e7a4      	b.n	80277ba <__ssvfiscanf_r+0x112>
 8027870:	2308      	movs	r3, #8
 8027872:	9344      	str	r3, [sp, #272]	; 0x110
 8027874:	2304      	movs	r3, #4
 8027876:	e7bc      	b.n	80277f2 <__ssvfiscanf_r+0x14a>
 8027878:	4629      	mov	r1, r5
 802787a:	4640      	mov	r0, r8
 802787c:	f000 f9d0 	bl	8027c20 <__sccl>
 8027880:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8027882:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8027886:	9343      	str	r3, [sp, #268]	; 0x10c
 8027888:	4605      	mov	r5, r0
 802788a:	2301      	movs	r3, #1
 802788c:	e7b1      	b.n	80277f2 <__ssvfiscanf_r+0x14a>
 802788e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8027890:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8027894:	9343      	str	r3, [sp, #268]	; 0x10c
 8027896:	2300      	movs	r3, #0
 8027898:	e7ab      	b.n	80277f2 <__ssvfiscanf_r+0x14a>
 802789a:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 802789c:	06d0      	lsls	r0, r2, #27
 802789e:	f53f af78 	bmi.w	8027792 <__ssvfiscanf_r+0xea>
 80278a2:	f012 0f01 	tst.w	r2, #1
 80278a6:	9a01      	ldr	r2, [sp, #4]
 80278a8:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80278aa:	f102 0104 	add.w	r1, r2, #4
 80278ae:	9101      	str	r1, [sp, #4]
 80278b0:	6812      	ldr	r2, [r2, #0]
 80278b2:	bf14      	ite	ne
 80278b4:	8013      	strhne	r3, [r2, #0]
 80278b6:	6013      	streq	r3, [r2, #0]
 80278b8:	e76b      	b.n	8027792 <__ssvfiscanf_r+0xea>
 80278ba:	2305      	movs	r3, #5
 80278bc:	e799      	b.n	80277f2 <__ssvfiscanf_r+0x14a>
 80278be:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 80278c0:	4621      	mov	r1, r4
 80278c2:	4630      	mov	r0, r6
 80278c4:	4798      	blx	r3
 80278c6:	2800      	cmp	r0, #0
 80278c8:	d097      	beq.n	80277fa <__ssvfiscanf_r+0x152>
 80278ca:	e7c6      	b.n	802785a <__ssvfiscanf_r+0x1b2>
 80278cc:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 80278ce:	3201      	adds	r2, #1
 80278d0:	9247      	str	r2, [sp, #284]	; 0x11c
 80278d2:	6862      	ldr	r2, [r4, #4]
 80278d4:	3a01      	subs	r2, #1
 80278d6:	2a00      	cmp	r2, #0
 80278d8:	6062      	str	r2, [r4, #4]
 80278da:	dd0a      	ble.n	80278f2 <__ssvfiscanf_r+0x24a>
 80278dc:	3301      	adds	r3, #1
 80278de:	6023      	str	r3, [r4, #0]
 80278e0:	f000 fb2e 	bl	8027f40 <__locale_ctype_ptr>
 80278e4:	6823      	ldr	r3, [r4, #0]
 80278e6:	781a      	ldrb	r2, [r3, #0]
 80278e8:	4410      	add	r0, r2
 80278ea:	7842      	ldrb	r2, [r0, #1]
 80278ec:	0712      	lsls	r2, r2, #28
 80278ee:	d4ed      	bmi.n	80278cc <__ssvfiscanf_r+0x224>
 80278f0:	e786      	b.n	8027800 <__ssvfiscanf_r+0x158>
 80278f2:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 80278f4:	4621      	mov	r1, r4
 80278f6:	4630      	mov	r0, r6
 80278f8:	4798      	blx	r3
 80278fa:	2800      	cmp	r0, #0
 80278fc:	d0f0      	beq.n	80278e0 <__ssvfiscanf_r+0x238>
 80278fe:	e7ac      	b.n	802785a <__ssvfiscanf_r+0x1b2>
 8027900:	2b04      	cmp	r3, #4
 8027902:	dc06      	bgt.n	8027912 <__ssvfiscanf_r+0x26a>
 8027904:	ab01      	add	r3, sp, #4
 8027906:	4622      	mov	r2, r4
 8027908:	a943      	add	r1, sp, #268	; 0x10c
 802790a:	4630      	mov	r0, r6
 802790c:	f000 f884 	bl	8027a18 <_scanf_i>
 8027910:	e77f      	b.n	8027812 <__ssvfiscanf_r+0x16a>
 8027912:	4b0e      	ldr	r3, [pc, #56]	; (802794c <__ssvfiscanf_r+0x2a4>)
 8027914:	2b00      	cmp	r3, #0
 8027916:	f43f af3c 	beq.w	8027792 <__ssvfiscanf_r+0xea>
 802791a:	ab01      	add	r3, sp, #4
 802791c:	4622      	mov	r2, r4
 802791e:	a943      	add	r1, sp, #268	; 0x10c
 8027920:	4630      	mov	r0, r6
 8027922:	f3af 8000 	nop.w
 8027926:	e774      	b.n	8027812 <__ssvfiscanf_r+0x16a>
 8027928:	89a3      	ldrh	r3, [r4, #12]
 802792a:	f013 0f40 	tst.w	r3, #64	; 0x40
 802792e:	bf18      	it	ne
 8027930:	f04f 30ff 	movne.w	r0, #4294967295
 8027934:	f50d 7d25 	add.w	sp, sp, #660	; 0x294
 8027938:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802793c:	9846      	ldr	r0, [sp, #280]	; 0x118
 802793e:	e7f9      	b.n	8027934 <__ssvfiscanf_r+0x28c>
 8027940:	080275f5 	.word	0x080275f5
 8027944:	0802766f 	.word	0x0802766f
 8027948:	0802868a 	.word	0x0802868a
 802794c:	00000000 	.word	0x00000000

08027950 <_scanf_chars>:
 8027950:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8027954:	4615      	mov	r5, r2
 8027956:	688a      	ldr	r2, [r1, #8]
 8027958:	4680      	mov	r8, r0
 802795a:	460c      	mov	r4, r1
 802795c:	b932      	cbnz	r2, 802796c <_scanf_chars+0x1c>
 802795e:	698a      	ldr	r2, [r1, #24]
 8027960:	2a00      	cmp	r2, #0
 8027962:	bf0c      	ite	eq
 8027964:	2201      	moveq	r2, #1
 8027966:	f04f 32ff 	movne.w	r2, #4294967295
 802796a:	608a      	str	r2, [r1, #8]
 802796c:	6822      	ldr	r2, [r4, #0]
 802796e:	06d1      	lsls	r1, r2, #27
 8027970:	bf5f      	itttt	pl
 8027972:	681a      	ldrpl	r2, [r3, #0]
 8027974:	1d11      	addpl	r1, r2, #4
 8027976:	6019      	strpl	r1, [r3, #0]
 8027978:	6817      	ldrpl	r7, [r2, #0]
 802797a:	2600      	movs	r6, #0
 802797c:	69a3      	ldr	r3, [r4, #24]
 802797e:	b1db      	cbz	r3, 80279b8 <_scanf_chars+0x68>
 8027980:	2b01      	cmp	r3, #1
 8027982:	d107      	bne.n	8027994 <_scanf_chars+0x44>
 8027984:	682b      	ldr	r3, [r5, #0]
 8027986:	6962      	ldr	r2, [r4, #20]
 8027988:	781b      	ldrb	r3, [r3, #0]
 802798a:	5cd3      	ldrb	r3, [r2, r3]
 802798c:	b9a3      	cbnz	r3, 80279b8 <_scanf_chars+0x68>
 802798e:	2e00      	cmp	r6, #0
 8027990:	d132      	bne.n	80279f8 <_scanf_chars+0xa8>
 8027992:	e006      	b.n	80279a2 <_scanf_chars+0x52>
 8027994:	2b02      	cmp	r3, #2
 8027996:	d007      	beq.n	80279a8 <_scanf_chars+0x58>
 8027998:	2e00      	cmp	r6, #0
 802799a:	d12d      	bne.n	80279f8 <_scanf_chars+0xa8>
 802799c:	69a3      	ldr	r3, [r4, #24]
 802799e:	2b01      	cmp	r3, #1
 80279a0:	d12a      	bne.n	80279f8 <_scanf_chars+0xa8>
 80279a2:	2001      	movs	r0, #1
 80279a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80279a8:	f000 faca 	bl	8027f40 <__locale_ctype_ptr>
 80279ac:	682b      	ldr	r3, [r5, #0]
 80279ae:	781b      	ldrb	r3, [r3, #0]
 80279b0:	4418      	add	r0, r3
 80279b2:	7843      	ldrb	r3, [r0, #1]
 80279b4:	071b      	lsls	r3, r3, #28
 80279b6:	d4ef      	bmi.n	8027998 <_scanf_chars+0x48>
 80279b8:	6823      	ldr	r3, [r4, #0]
 80279ba:	06da      	lsls	r2, r3, #27
 80279bc:	bf5e      	ittt	pl
 80279be:	682b      	ldrpl	r3, [r5, #0]
 80279c0:	781b      	ldrbpl	r3, [r3, #0]
 80279c2:	703b      	strbpl	r3, [r7, #0]
 80279c4:	682a      	ldr	r2, [r5, #0]
 80279c6:	686b      	ldr	r3, [r5, #4]
 80279c8:	f102 0201 	add.w	r2, r2, #1
 80279cc:	602a      	str	r2, [r5, #0]
 80279ce:	68a2      	ldr	r2, [r4, #8]
 80279d0:	f103 33ff 	add.w	r3, r3, #4294967295
 80279d4:	f102 32ff 	add.w	r2, r2, #4294967295
 80279d8:	606b      	str	r3, [r5, #4]
 80279da:	f106 0601 	add.w	r6, r6, #1
 80279de:	bf58      	it	pl
 80279e0:	3701      	addpl	r7, #1
 80279e2:	60a2      	str	r2, [r4, #8]
 80279e4:	b142      	cbz	r2, 80279f8 <_scanf_chars+0xa8>
 80279e6:	2b00      	cmp	r3, #0
 80279e8:	dcc8      	bgt.n	802797c <_scanf_chars+0x2c>
 80279ea:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80279ee:	4629      	mov	r1, r5
 80279f0:	4640      	mov	r0, r8
 80279f2:	4798      	blx	r3
 80279f4:	2800      	cmp	r0, #0
 80279f6:	d0c1      	beq.n	802797c <_scanf_chars+0x2c>
 80279f8:	6823      	ldr	r3, [r4, #0]
 80279fa:	f013 0310 	ands.w	r3, r3, #16
 80279fe:	d105      	bne.n	8027a0c <_scanf_chars+0xbc>
 8027a00:	68e2      	ldr	r2, [r4, #12]
 8027a02:	3201      	adds	r2, #1
 8027a04:	60e2      	str	r2, [r4, #12]
 8027a06:	69a2      	ldr	r2, [r4, #24]
 8027a08:	b102      	cbz	r2, 8027a0c <_scanf_chars+0xbc>
 8027a0a:	703b      	strb	r3, [r7, #0]
 8027a0c:	6923      	ldr	r3, [r4, #16]
 8027a0e:	441e      	add	r6, r3
 8027a10:	6126      	str	r6, [r4, #16]
 8027a12:	2000      	movs	r0, #0
 8027a14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08027a18 <_scanf_i>:
 8027a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027a1c:	469a      	mov	sl, r3
 8027a1e:	4b74      	ldr	r3, [pc, #464]	; (8027bf0 <_scanf_i+0x1d8>)
 8027a20:	460c      	mov	r4, r1
 8027a22:	4683      	mov	fp, r0
 8027a24:	4616      	mov	r6, r2
 8027a26:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8027a2a:	b087      	sub	sp, #28
 8027a2c:	ab03      	add	r3, sp, #12
 8027a2e:	68a7      	ldr	r7, [r4, #8]
 8027a30:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8027a34:	4b6f      	ldr	r3, [pc, #444]	; (8027bf4 <_scanf_i+0x1dc>)
 8027a36:	69a1      	ldr	r1, [r4, #24]
 8027a38:	4a6f      	ldr	r2, [pc, #444]	; (8027bf8 <_scanf_i+0x1e0>)
 8027a3a:	2903      	cmp	r1, #3
 8027a3c:	bf18      	it	ne
 8027a3e:	461a      	movne	r2, r3
 8027a40:	1e7b      	subs	r3, r7, #1
 8027a42:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8027a46:	bf84      	itt	hi
 8027a48:	f240 135d 	movwhi	r3, #349	; 0x15d
 8027a4c:	60a3      	strhi	r3, [r4, #8]
 8027a4e:	6823      	ldr	r3, [r4, #0]
 8027a50:	9200      	str	r2, [sp, #0]
 8027a52:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8027a56:	bf88      	it	hi
 8027a58:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8027a5c:	f104 091c 	add.w	r9, r4, #28
 8027a60:	6023      	str	r3, [r4, #0]
 8027a62:	bf8c      	ite	hi
 8027a64:	197f      	addhi	r7, r7, r5
 8027a66:	2700      	movls	r7, #0
 8027a68:	464b      	mov	r3, r9
 8027a6a:	f04f 0800 	mov.w	r8, #0
 8027a6e:	9301      	str	r3, [sp, #4]
 8027a70:	6831      	ldr	r1, [r6, #0]
 8027a72:	ab03      	add	r3, sp, #12
 8027a74:	2202      	movs	r2, #2
 8027a76:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8027a7a:	7809      	ldrb	r1, [r1, #0]
 8027a7c:	f7f8 fbc8 	bl	8020210 <memchr>
 8027a80:	9b01      	ldr	r3, [sp, #4]
 8027a82:	b328      	cbz	r0, 8027ad0 <_scanf_i+0xb8>
 8027a84:	f1b8 0f01 	cmp.w	r8, #1
 8027a88:	d156      	bne.n	8027b38 <_scanf_i+0x120>
 8027a8a:	6862      	ldr	r2, [r4, #4]
 8027a8c:	b92a      	cbnz	r2, 8027a9a <_scanf_i+0x82>
 8027a8e:	2208      	movs	r2, #8
 8027a90:	6062      	str	r2, [r4, #4]
 8027a92:	6822      	ldr	r2, [r4, #0]
 8027a94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8027a98:	6022      	str	r2, [r4, #0]
 8027a9a:	6822      	ldr	r2, [r4, #0]
 8027a9c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8027aa0:	6022      	str	r2, [r4, #0]
 8027aa2:	68a2      	ldr	r2, [r4, #8]
 8027aa4:	1e51      	subs	r1, r2, #1
 8027aa6:	60a1      	str	r1, [r4, #8]
 8027aa8:	b192      	cbz	r2, 8027ad0 <_scanf_i+0xb8>
 8027aaa:	6832      	ldr	r2, [r6, #0]
 8027aac:	1c51      	adds	r1, r2, #1
 8027aae:	6031      	str	r1, [r6, #0]
 8027ab0:	7812      	ldrb	r2, [r2, #0]
 8027ab2:	701a      	strb	r2, [r3, #0]
 8027ab4:	1c5d      	adds	r5, r3, #1
 8027ab6:	6873      	ldr	r3, [r6, #4]
 8027ab8:	3b01      	subs	r3, #1
 8027aba:	2b00      	cmp	r3, #0
 8027abc:	6073      	str	r3, [r6, #4]
 8027abe:	dc06      	bgt.n	8027ace <_scanf_i+0xb6>
 8027ac0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8027ac4:	4631      	mov	r1, r6
 8027ac6:	4658      	mov	r0, fp
 8027ac8:	4798      	blx	r3
 8027aca:	2800      	cmp	r0, #0
 8027acc:	d176      	bne.n	8027bbc <_scanf_i+0x1a4>
 8027ace:	462b      	mov	r3, r5
 8027ad0:	f108 0801 	add.w	r8, r8, #1
 8027ad4:	f1b8 0f03 	cmp.w	r8, #3
 8027ad8:	d1c9      	bne.n	8027a6e <_scanf_i+0x56>
 8027ada:	6862      	ldr	r2, [r4, #4]
 8027adc:	b90a      	cbnz	r2, 8027ae2 <_scanf_i+0xca>
 8027ade:	220a      	movs	r2, #10
 8027ae0:	6062      	str	r2, [r4, #4]
 8027ae2:	6862      	ldr	r2, [r4, #4]
 8027ae4:	4945      	ldr	r1, [pc, #276]	; (8027bfc <_scanf_i+0x1e4>)
 8027ae6:	6960      	ldr	r0, [r4, #20]
 8027ae8:	9301      	str	r3, [sp, #4]
 8027aea:	1a89      	subs	r1, r1, r2
 8027aec:	f000 f898 	bl	8027c20 <__sccl>
 8027af0:	9b01      	ldr	r3, [sp, #4]
 8027af2:	f04f 0800 	mov.w	r8, #0
 8027af6:	461d      	mov	r5, r3
 8027af8:	68a3      	ldr	r3, [r4, #8]
 8027afa:	2b00      	cmp	r3, #0
 8027afc:	d038      	beq.n	8027b70 <_scanf_i+0x158>
 8027afe:	6831      	ldr	r1, [r6, #0]
 8027b00:	6960      	ldr	r0, [r4, #20]
 8027b02:	780a      	ldrb	r2, [r1, #0]
 8027b04:	5c80      	ldrb	r0, [r0, r2]
 8027b06:	2800      	cmp	r0, #0
 8027b08:	d032      	beq.n	8027b70 <_scanf_i+0x158>
 8027b0a:	2a30      	cmp	r2, #48	; 0x30
 8027b0c:	6822      	ldr	r2, [r4, #0]
 8027b0e:	d121      	bne.n	8027b54 <_scanf_i+0x13c>
 8027b10:	0510      	lsls	r0, r2, #20
 8027b12:	d51f      	bpl.n	8027b54 <_scanf_i+0x13c>
 8027b14:	f108 0801 	add.w	r8, r8, #1
 8027b18:	b117      	cbz	r7, 8027b20 <_scanf_i+0x108>
 8027b1a:	3301      	adds	r3, #1
 8027b1c:	3f01      	subs	r7, #1
 8027b1e:	60a3      	str	r3, [r4, #8]
 8027b20:	6873      	ldr	r3, [r6, #4]
 8027b22:	3b01      	subs	r3, #1
 8027b24:	2b00      	cmp	r3, #0
 8027b26:	6073      	str	r3, [r6, #4]
 8027b28:	dd1b      	ble.n	8027b62 <_scanf_i+0x14a>
 8027b2a:	6833      	ldr	r3, [r6, #0]
 8027b2c:	3301      	adds	r3, #1
 8027b2e:	6033      	str	r3, [r6, #0]
 8027b30:	68a3      	ldr	r3, [r4, #8]
 8027b32:	3b01      	subs	r3, #1
 8027b34:	60a3      	str	r3, [r4, #8]
 8027b36:	e7df      	b.n	8027af8 <_scanf_i+0xe0>
 8027b38:	f1b8 0f02 	cmp.w	r8, #2
 8027b3c:	d1b1      	bne.n	8027aa2 <_scanf_i+0x8a>
 8027b3e:	6822      	ldr	r2, [r4, #0]
 8027b40:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8027b44:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8027b48:	d1c2      	bne.n	8027ad0 <_scanf_i+0xb8>
 8027b4a:	2110      	movs	r1, #16
 8027b4c:	6061      	str	r1, [r4, #4]
 8027b4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8027b52:	e7a5      	b.n	8027aa0 <_scanf_i+0x88>
 8027b54:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8027b58:	6022      	str	r2, [r4, #0]
 8027b5a:	780b      	ldrb	r3, [r1, #0]
 8027b5c:	702b      	strb	r3, [r5, #0]
 8027b5e:	3501      	adds	r5, #1
 8027b60:	e7de      	b.n	8027b20 <_scanf_i+0x108>
 8027b62:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8027b66:	4631      	mov	r1, r6
 8027b68:	4658      	mov	r0, fp
 8027b6a:	4798      	blx	r3
 8027b6c:	2800      	cmp	r0, #0
 8027b6e:	d0df      	beq.n	8027b30 <_scanf_i+0x118>
 8027b70:	6823      	ldr	r3, [r4, #0]
 8027b72:	05d9      	lsls	r1, r3, #23
 8027b74:	d50c      	bpl.n	8027b90 <_scanf_i+0x178>
 8027b76:	454d      	cmp	r5, r9
 8027b78:	d908      	bls.n	8027b8c <_scanf_i+0x174>
 8027b7a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8027b7e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8027b82:	4632      	mov	r2, r6
 8027b84:	4658      	mov	r0, fp
 8027b86:	4798      	blx	r3
 8027b88:	1e6f      	subs	r7, r5, #1
 8027b8a:	463d      	mov	r5, r7
 8027b8c:	454d      	cmp	r5, r9
 8027b8e:	d02c      	beq.n	8027bea <_scanf_i+0x1d2>
 8027b90:	6822      	ldr	r2, [r4, #0]
 8027b92:	f012 0210 	ands.w	r2, r2, #16
 8027b96:	d11e      	bne.n	8027bd6 <_scanf_i+0x1be>
 8027b98:	702a      	strb	r2, [r5, #0]
 8027b9a:	6863      	ldr	r3, [r4, #4]
 8027b9c:	9e00      	ldr	r6, [sp, #0]
 8027b9e:	4649      	mov	r1, r9
 8027ba0:	4658      	mov	r0, fp
 8027ba2:	47b0      	blx	r6
 8027ba4:	6822      	ldr	r2, [r4, #0]
 8027ba6:	f8da 3000 	ldr.w	r3, [sl]
 8027baa:	f012 0f20 	tst.w	r2, #32
 8027bae:	d008      	beq.n	8027bc2 <_scanf_i+0x1aa>
 8027bb0:	1d1a      	adds	r2, r3, #4
 8027bb2:	f8ca 2000 	str.w	r2, [sl]
 8027bb6:	681b      	ldr	r3, [r3, #0]
 8027bb8:	6018      	str	r0, [r3, #0]
 8027bba:	e009      	b.n	8027bd0 <_scanf_i+0x1b8>
 8027bbc:	f04f 0800 	mov.w	r8, #0
 8027bc0:	e7d6      	b.n	8027b70 <_scanf_i+0x158>
 8027bc2:	07d2      	lsls	r2, r2, #31
 8027bc4:	d5f4      	bpl.n	8027bb0 <_scanf_i+0x198>
 8027bc6:	1d1a      	adds	r2, r3, #4
 8027bc8:	f8ca 2000 	str.w	r2, [sl]
 8027bcc:	681b      	ldr	r3, [r3, #0]
 8027bce:	8018      	strh	r0, [r3, #0]
 8027bd0:	68e3      	ldr	r3, [r4, #12]
 8027bd2:	3301      	adds	r3, #1
 8027bd4:	60e3      	str	r3, [r4, #12]
 8027bd6:	eba5 0509 	sub.w	r5, r5, r9
 8027bda:	44a8      	add	r8, r5
 8027bdc:	6925      	ldr	r5, [r4, #16]
 8027bde:	4445      	add	r5, r8
 8027be0:	6125      	str	r5, [r4, #16]
 8027be2:	2000      	movs	r0, #0
 8027be4:	b007      	add	sp, #28
 8027be6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027bea:	2001      	movs	r0, #1
 8027bec:	e7fa      	b.n	8027be4 <_scanf_i+0x1cc>
 8027bee:	bf00      	nop
 8027bf0:	080283c0 	.word	0x080283c0
 8027bf4:	08027ea1 	.word	0x08027ea1
 8027bf8:	08027d81 	.word	0x08027d81
 8027bfc:	080286a5 	.word	0x080286a5

08027c00 <_sbrk_r>:
 8027c00:	b538      	push	{r3, r4, r5, lr}
 8027c02:	4c06      	ldr	r4, [pc, #24]	; (8027c1c <_sbrk_r+0x1c>)
 8027c04:	2300      	movs	r3, #0
 8027c06:	4605      	mov	r5, r0
 8027c08:	4608      	mov	r0, r1
 8027c0a:	6023      	str	r3, [r4, #0]
 8027c0c:	f000 fba4 	bl	8028358 <_sbrk>
 8027c10:	1c43      	adds	r3, r0, #1
 8027c12:	d102      	bne.n	8027c1a <_sbrk_r+0x1a>
 8027c14:	6823      	ldr	r3, [r4, #0]
 8027c16:	b103      	cbz	r3, 8027c1a <_sbrk_r+0x1a>
 8027c18:	602b      	str	r3, [r5, #0]
 8027c1a:	bd38      	pop	{r3, r4, r5, pc}
 8027c1c:	20000a10 	.word	0x20000a10

08027c20 <__sccl>:
 8027c20:	b570      	push	{r4, r5, r6, lr}
 8027c22:	780b      	ldrb	r3, [r1, #0]
 8027c24:	2b5e      	cmp	r3, #94	; 0x5e
 8027c26:	bf13      	iteet	ne
 8027c28:	1c4a      	addne	r2, r1, #1
 8027c2a:	1c8a      	addeq	r2, r1, #2
 8027c2c:	784b      	ldrbeq	r3, [r1, #1]
 8027c2e:	2100      	movne	r1, #0
 8027c30:	bf08      	it	eq
 8027c32:	2101      	moveq	r1, #1
 8027c34:	1e44      	subs	r4, r0, #1
 8027c36:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8027c3a:	f804 1f01 	strb.w	r1, [r4, #1]!
 8027c3e:	42a5      	cmp	r5, r4
 8027c40:	d1fb      	bne.n	8027c3a <__sccl+0x1a>
 8027c42:	b913      	cbnz	r3, 8027c4a <__sccl+0x2a>
 8027c44:	3a01      	subs	r2, #1
 8027c46:	4610      	mov	r0, r2
 8027c48:	bd70      	pop	{r4, r5, r6, pc}
 8027c4a:	f081 0401 	eor.w	r4, r1, #1
 8027c4e:	54c4      	strb	r4, [r0, r3]
 8027c50:	4611      	mov	r1, r2
 8027c52:	780d      	ldrb	r5, [r1, #0]
 8027c54:	2d2d      	cmp	r5, #45	; 0x2d
 8027c56:	f101 0201 	add.w	r2, r1, #1
 8027c5a:	d006      	beq.n	8027c6a <__sccl+0x4a>
 8027c5c:	2d5d      	cmp	r5, #93	; 0x5d
 8027c5e:	d0f2      	beq.n	8027c46 <__sccl+0x26>
 8027c60:	b90d      	cbnz	r5, 8027c66 <__sccl+0x46>
 8027c62:	460a      	mov	r2, r1
 8027c64:	e7ef      	b.n	8027c46 <__sccl+0x26>
 8027c66:	462b      	mov	r3, r5
 8027c68:	e7f1      	b.n	8027c4e <__sccl+0x2e>
 8027c6a:	784e      	ldrb	r6, [r1, #1]
 8027c6c:	2e5d      	cmp	r6, #93	; 0x5d
 8027c6e:	d0fa      	beq.n	8027c66 <__sccl+0x46>
 8027c70:	42b3      	cmp	r3, r6
 8027c72:	dcf8      	bgt.n	8027c66 <__sccl+0x46>
 8027c74:	3102      	adds	r1, #2
 8027c76:	3301      	adds	r3, #1
 8027c78:	429e      	cmp	r6, r3
 8027c7a:	54c4      	strb	r4, [r0, r3]
 8027c7c:	dcfb      	bgt.n	8027c76 <__sccl+0x56>
 8027c7e:	e7e8      	b.n	8027c52 <__sccl+0x32>

08027c80 <_strtol_l.isra.0>:
 8027c80:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027c84:	4680      	mov	r8, r0
 8027c86:	4689      	mov	r9, r1
 8027c88:	4692      	mov	sl, r2
 8027c8a:	461f      	mov	r7, r3
 8027c8c:	468b      	mov	fp, r1
 8027c8e:	465d      	mov	r5, fp
 8027c90:	980a      	ldr	r0, [sp, #40]	; 0x28
 8027c92:	f815 4b01 	ldrb.w	r4, [r5], #1
 8027c96:	f000 f950 	bl	8027f3a <__locale_ctype_ptr_l>
 8027c9a:	4420      	add	r0, r4
 8027c9c:	7846      	ldrb	r6, [r0, #1]
 8027c9e:	f016 0608 	ands.w	r6, r6, #8
 8027ca2:	d10b      	bne.n	8027cbc <_strtol_l.isra.0+0x3c>
 8027ca4:	2c2d      	cmp	r4, #45	; 0x2d
 8027ca6:	d10b      	bne.n	8027cc0 <_strtol_l.isra.0+0x40>
 8027ca8:	782c      	ldrb	r4, [r5, #0]
 8027caa:	2601      	movs	r6, #1
 8027cac:	f10b 0502 	add.w	r5, fp, #2
 8027cb0:	b167      	cbz	r7, 8027ccc <_strtol_l.isra.0+0x4c>
 8027cb2:	2f10      	cmp	r7, #16
 8027cb4:	d114      	bne.n	8027ce0 <_strtol_l.isra.0+0x60>
 8027cb6:	2c30      	cmp	r4, #48	; 0x30
 8027cb8:	d00a      	beq.n	8027cd0 <_strtol_l.isra.0+0x50>
 8027cba:	e011      	b.n	8027ce0 <_strtol_l.isra.0+0x60>
 8027cbc:	46ab      	mov	fp, r5
 8027cbe:	e7e6      	b.n	8027c8e <_strtol_l.isra.0+0xe>
 8027cc0:	2c2b      	cmp	r4, #43	; 0x2b
 8027cc2:	bf04      	itt	eq
 8027cc4:	782c      	ldrbeq	r4, [r5, #0]
 8027cc6:	f10b 0502 	addeq.w	r5, fp, #2
 8027cca:	e7f1      	b.n	8027cb0 <_strtol_l.isra.0+0x30>
 8027ccc:	2c30      	cmp	r4, #48	; 0x30
 8027cce:	d127      	bne.n	8027d20 <_strtol_l.isra.0+0xa0>
 8027cd0:	782b      	ldrb	r3, [r5, #0]
 8027cd2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8027cd6:	2b58      	cmp	r3, #88	; 0x58
 8027cd8:	d14b      	bne.n	8027d72 <_strtol_l.isra.0+0xf2>
 8027cda:	786c      	ldrb	r4, [r5, #1]
 8027cdc:	2710      	movs	r7, #16
 8027cde:	3502      	adds	r5, #2
 8027ce0:	2e00      	cmp	r6, #0
 8027ce2:	bf0c      	ite	eq
 8027ce4:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8027ce8:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8027cec:	2200      	movs	r2, #0
 8027cee:	fbb1 fef7 	udiv	lr, r1, r7
 8027cf2:	4610      	mov	r0, r2
 8027cf4:	fb07 1c1e 	mls	ip, r7, lr, r1
 8027cf8:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8027cfc:	2b09      	cmp	r3, #9
 8027cfe:	d811      	bhi.n	8027d24 <_strtol_l.isra.0+0xa4>
 8027d00:	461c      	mov	r4, r3
 8027d02:	42a7      	cmp	r7, r4
 8027d04:	dd1d      	ble.n	8027d42 <_strtol_l.isra.0+0xc2>
 8027d06:	1c53      	adds	r3, r2, #1
 8027d08:	d007      	beq.n	8027d1a <_strtol_l.isra.0+0x9a>
 8027d0a:	4586      	cmp	lr, r0
 8027d0c:	d316      	bcc.n	8027d3c <_strtol_l.isra.0+0xbc>
 8027d0e:	d101      	bne.n	8027d14 <_strtol_l.isra.0+0x94>
 8027d10:	45a4      	cmp	ip, r4
 8027d12:	db13      	blt.n	8027d3c <_strtol_l.isra.0+0xbc>
 8027d14:	fb00 4007 	mla	r0, r0, r7, r4
 8027d18:	2201      	movs	r2, #1
 8027d1a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8027d1e:	e7eb      	b.n	8027cf8 <_strtol_l.isra.0+0x78>
 8027d20:	270a      	movs	r7, #10
 8027d22:	e7dd      	b.n	8027ce0 <_strtol_l.isra.0+0x60>
 8027d24:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8027d28:	2b19      	cmp	r3, #25
 8027d2a:	d801      	bhi.n	8027d30 <_strtol_l.isra.0+0xb0>
 8027d2c:	3c37      	subs	r4, #55	; 0x37
 8027d2e:	e7e8      	b.n	8027d02 <_strtol_l.isra.0+0x82>
 8027d30:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8027d34:	2b19      	cmp	r3, #25
 8027d36:	d804      	bhi.n	8027d42 <_strtol_l.isra.0+0xc2>
 8027d38:	3c57      	subs	r4, #87	; 0x57
 8027d3a:	e7e2      	b.n	8027d02 <_strtol_l.isra.0+0x82>
 8027d3c:	f04f 32ff 	mov.w	r2, #4294967295
 8027d40:	e7eb      	b.n	8027d1a <_strtol_l.isra.0+0x9a>
 8027d42:	1c53      	adds	r3, r2, #1
 8027d44:	d108      	bne.n	8027d58 <_strtol_l.isra.0+0xd8>
 8027d46:	2322      	movs	r3, #34	; 0x22
 8027d48:	f8c8 3000 	str.w	r3, [r8]
 8027d4c:	4608      	mov	r0, r1
 8027d4e:	f1ba 0f00 	cmp.w	sl, #0
 8027d52:	d107      	bne.n	8027d64 <_strtol_l.isra.0+0xe4>
 8027d54:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027d58:	b106      	cbz	r6, 8027d5c <_strtol_l.isra.0+0xdc>
 8027d5a:	4240      	negs	r0, r0
 8027d5c:	f1ba 0f00 	cmp.w	sl, #0
 8027d60:	d00c      	beq.n	8027d7c <_strtol_l.isra.0+0xfc>
 8027d62:	b122      	cbz	r2, 8027d6e <_strtol_l.isra.0+0xee>
 8027d64:	3d01      	subs	r5, #1
 8027d66:	f8ca 5000 	str.w	r5, [sl]
 8027d6a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027d6e:	464d      	mov	r5, r9
 8027d70:	e7f9      	b.n	8027d66 <_strtol_l.isra.0+0xe6>
 8027d72:	2430      	movs	r4, #48	; 0x30
 8027d74:	2f00      	cmp	r7, #0
 8027d76:	d1b3      	bne.n	8027ce0 <_strtol_l.isra.0+0x60>
 8027d78:	2708      	movs	r7, #8
 8027d7a:	e7b1      	b.n	8027ce0 <_strtol_l.isra.0+0x60>
 8027d7c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08027d80 <_strtol_r>:
 8027d80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8027d82:	4c06      	ldr	r4, [pc, #24]	; (8027d9c <_strtol_r+0x1c>)
 8027d84:	4d06      	ldr	r5, [pc, #24]	; (8027da0 <_strtol_r+0x20>)
 8027d86:	6824      	ldr	r4, [r4, #0]
 8027d88:	6a24      	ldr	r4, [r4, #32]
 8027d8a:	2c00      	cmp	r4, #0
 8027d8c:	bf08      	it	eq
 8027d8e:	462c      	moveq	r4, r5
 8027d90:	9400      	str	r4, [sp, #0]
 8027d92:	f7ff ff75 	bl	8027c80 <_strtol_l.isra.0>
 8027d96:	b003      	add	sp, #12
 8027d98:	bd30      	pop	{r4, r5, pc}
 8027d9a:	bf00      	nop
 8027d9c:	20000028 	.word	0x20000028
 8027da0:	2000008c 	.word	0x2000008c

08027da4 <_strtoul_l.isra.0>:
 8027da4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8027da8:	4680      	mov	r8, r0
 8027daa:	4689      	mov	r9, r1
 8027dac:	4692      	mov	sl, r2
 8027dae:	461e      	mov	r6, r3
 8027db0:	460f      	mov	r7, r1
 8027db2:	463d      	mov	r5, r7
 8027db4:	9808      	ldr	r0, [sp, #32]
 8027db6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8027dba:	f000 f8be 	bl	8027f3a <__locale_ctype_ptr_l>
 8027dbe:	4420      	add	r0, r4
 8027dc0:	7843      	ldrb	r3, [r0, #1]
 8027dc2:	f013 0308 	ands.w	r3, r3, #8
 8027dc6:	d10a      	bne.n	8027dde <_strtoul_l.isra.0+0x3a>
 8027dc8:	2c2d      	cmp	r4, #45	; 0x2d
 8027dca:	d10a      	bne.n	8027de2 <_strtoul_l.isra.0+0x3e>
 8027dcc:	782c      	ldrb	r4, [r5, #0]
 8027dce:	2301      	movs	r3, #1
 8027dd0:	1cbd      	adds	r5, r7, #2
 8027dd2:	b15e      	cbz	r6, 8027dec <_strtoul_l.isra.0+0x48>
 8027dd4:	2e10      	cmp	r6, #16
 8027dd6:	d113      	bne.n	8027e00 <_strtoul_l.isra.0+0x5c>
 8027dd8:	2c30      	cmp	r4, #48	; 0x30
 8027dda:	d009      	beq.n	8027df0 <_strtoul_l.isra.0+0x4c>
 8027ddc:	e010      	b.n	8027e00 <_strtoul_l.isra.0+0x5c>
 8027dde:	462f      	mov	r7, r5
 8027de0:	e7e7      	b.n	8027db2 <_strtoul_l.isra.0+0xe>
 8027de2:	2c2b      	cmp	r4, #43	; 0x2b
 8027de4:	bf04      	itt	eq
 8027de6:	782c      	ldrbeq	r4, [r5, #0]
 8027de8:	1cbd      	addeq	r5, r7, #2
 8027dea:	e7f2      	b.n	8027dd2 <_strtoul_l.isra.0+0x2e>
 8027dec:	2c30      	cmp	r4, #48	; 0x30
 8027dee:	d125      	bne.n	8027e3c <_strtoul_l.isra.0+0x98>
 8027df0:	782a      	ldrb	r2, [r5, #0]
 8027df2:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8027df6:	2a58      	cmp	r2, #88	; 0x58
 8027df8:	d14a      	bne.n	8027e90 <_strtoul_l.isra.0+0xec>
 8027dfa:	786c      	ldrb	r4, [r5, #1]
 8027dfc:	2610      	movs	r6, #16
 8027dfe:	3502      	adds	r5, #2
 8027e00:	f04f 31ff 	mov.w	r1, #4294967295
 8027e04:	2700      	movs	r7, #0
 8027e06:	fbb1 f1f6 	udiv	r1, r1, r6
 8027e0a:	fb06 fe01 	mul.w	lr, r6, r1
 8027e0e:	ea6f 0e0e 	mvn.w	lr, lr
 8027e12:	4638      	mov	r0, r7
 8027e14:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
 8027e18:	2a09      	cmp	r2, #9
 8027e1a:	d811      	bhi.n	8027e40 <_strtoul_l.isra.0+0x9c>
 8027e1c:	4614      	mov	r4, r2
 8027e1e:	42a6      	cmp	r6, r4
 8027e20:	dd1d      	ble.n	8027e5e <_strtoul_l.isra.0+0xba>
 8027e22:	2f00      	cmp	r7, #0
 8027e24:	db18      	blt.n	8027e58 <_strtoul_l.isra.0+0xb4>
 8027e26:	4281      	cmp	r1, r0
 8027e28:	d316      	bcc.n	8027e58 <_strtoul_l.isra.0+0xb4>
 8027e2a:	d101      	bne.n	8027e30 <_strtoul_l.isra.0+0x8c>
 8027e2c:	45a6      	cmp	lr, r4
 8027e2e:	db13      	blt.n	8027e58 <_strtoul_l.isra.0+0xb4>
 8027e30:	fb00 4006 	mla	r0, r0, r6, r4
 8027e34:	2701      	movs	r7, #1
 8027e36:	f815 4b01 	ldrb.w	r4, [r5], #1
 8027e3a:	e7eb      	b.n	8027e14 <_strtoul_l.isra.0+0x70>
 8027e3c:	260a      	movs	r6, #10
 8027e3e:	e7df      	b.n	8027e00 <_strtoul_l.isra.0+0x5c>
 8027e40:	f1a4 0241 	sub.w	r2, r4, #65	; 0x41
 8027e44:	2a19      	cmp	r2, #25
 8027e46:	d801      	bhi.n	8027e4c <_strtoul_l.isra.0+0xa8>
 8027e48:	3c37      	subs	r4, #55	; 0x37
 8027e4a:	e7e8      	b.n	8027e1e <_strtoul_l.isra.0+0x7a>
 8027e4c:	f1a4 0261 	sub.w	r2, r4, #97	; 0x61
 8027e50:	2a19      	cmp	r2, #25
 8027e52:	d804      	bhi.n	8027e5e <_strtoul_l.isra.0+0xba>
 8027e54:	3c57      	subs	r4, #87	; 0x57
 8027e56:	e7e2      	b.n	8027e1e <_strtoul_l.isra.0+0x7a>
 8027e58:	f04f 37ff 	mov.w	r7, #4294967295
 8027e5c:	e7eb      	b.n	8027e36 <_strtoul_l.isra.0+0x92>
 8027e5e:	2f00      	cmp	r7, #0
 8027e60:	da09      	bge.n	8027e76 <_strtoul_l.isra.0+0xd2>
 8027e62:	2322      	movs	r3, #34	; 0x22
 8027e64:	f8c8 3000 	str.w	r3, [r8]
 8027e68:	f04f 30ff 	mov.w	r0, #4294967295
 8027e6c:	f1ba 0f00 	cmp.w	sl, #0
 8027e70:	d107      	bne.n	8027e82 <_strtoul_l.isra.0+0xde>
 8027e72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8027e76:	b103      	cbz	r3, 8027e7a <_strtoul_l.isra.0+0xd6>
 8027e78:	4240      	negs	r0, r0
 8027e7a:	f1ba 0f00 	cmp.w	sl, #0
 8027e7e:	d00c      	beq.n	8027e9a <_strtoul_l.isra.0+0xf6>
 8027e80:	b127      	cbz	r7, 8027e8c <_strtoul_l.isra.0+0xe8>
 8027e82:	3d01      	subs	r5, #1
 8027e84:	f8ca 5000 	str.w	r5, [sl]
 8027e88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8027e8c:	464d      	mov	r5, r9
 8027e8e:	e7f9      	b.n	8027e84 <_strtoul_l.isra.0+0xe0>
 8027e90:	2430      	movs	r4, #48	; 0x30
 8027e92:	2e00      	cmp	r6, #0
 8027e94:	d1b4      	bne.n	8027e00 <_strtoul_l.isra.0+0x5c>
 8027e96:	2608      	movs	r6, #8
 8027e98:	e7b2      	b.n	8027e00 <_strtoul_l.isra.0+0x5c>
 8027e9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08027ea0 <_strtoul_r>:
 8027ea0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8027ea2:	4c06      	ldr	r4, [pc, #24]	; (8027ebc <_strtoul_r+0x1c>)
 8027ea4:	4d06      	ldr	r5, [pc, #24]	; (8027ec0 <_strtoul_r+0x20>)
 8027ea6:	6824      	ldr	r4, [r4, #0]
 8027ea8:	6a24      	ldr	r4, [r4, #32]
 8027eaa:	2c00      	cmp	r4, #0
 8027eac:	bf08      	it	eq
 8027eae:	462c      	moveq	r4, r5
 8027eb0:	9400      	str	r4, [sp, #0]
 8027eb2:	f7ff ff77 	bl	8027da4 <_strtoul_l.isra.0>
 8027eb6:	b003      	add	sp, #12
 8027eb8:	bd30      	pop	{r4, r5, pc}
 8027eba:	bf00      	nop
 8027ebc:	20000028 	.word	0x20000028
 8027ec0:	2000008c 	.word	0x2000008c

08027ec4 <__submore>:
 8027ec4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8027ec8:	460c      	mov	r4, r1
 8027eca:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8027ecc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8027ed0:	4299      	cmp	r1, r3
 8027ed2:	d11e      	bne.n	8027f12 <__submore+0x4e>
 8027ed4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8027ed8:	f7ff f9de 	bl	8027298 <_malloc_r>
 8027edc:	b918      	cbnz	r0, 8027ee6 <__submore+0x22>
 8027ede:	f04f 30ff 	mov.w	r0, #4294967295
 8027ee2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8027ee6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8027eea:	63a3      	str	r3, [r4, #56]	; 0x38
 8027eec:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8027ef0:	6360      	str	r0, [r4, #52]	; 0x34
 8027ef2:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8027ef6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8027efa:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8027efe:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8027f02:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8027f06:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8027f0a:	6020      	str	r0, [r4, #0]
 8027f0c:	2000      	movs	r0, #0
 8027f0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8027f12:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8027f14:	0077      	lsls	r7, r6, #1
 8027f16:	463a      	mov	r2, r7
 8027f18:	f000 f84e 	bl	8027fb8 <_realloc_r>
 8027f1c:	4605      	mov	r5, r0
 8027f1e:	2800      	cmp	r0, #0
 8027f20:	d0dd      	beq.n	8027ede <__submore+0x1a>
 8027f22:	eb00 0806 	add.w	r8, r0, r6
 8027f26:	4601      	mov	r1, r0
 8027f28:	4632      	mov	r2, r6
 8027f2a:	4640      	mov	r0, r8
 8027f2c:	f7fd fb32 	bl	8025594 <memcpy>
 8027f30:	f8c4 8000 	str.w	r8, [r4]
 8027f34:	6365      	str	r5, [r4, #52]	; 0x34
 8027f36:	63a7      	str	r7, [r4, #56]	; 0x38
 8027f38:	e7e8      	b.n	8027f0c <__submore+0x48>

08027f3a <__locale_ctype_ptr_l>:
 8027f3a:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8027f3e:	4770      	bx	lr

08027f40 <__locale_ctype_ptr>:
 8027f40:	4b04      	ldr	r3, [pc, #16]	; (8027f54 <__locale_ctype_ptr+0x14>)
 8027f42:	4a05      	ldr	r2, [pc, #20]	; (8027f58 <__locale_ctype_ptr+0x18>)
 8027f44:	681b      	ldr	r3, [r3, #0]
 8027f46:	6a1b      	ldr	r3, [r3, #32]
 8027f48:	2b00      	cmp	r3, #0
 8027f4a:	bf08      	it	eq
 8027f4c:	4613      	moveq	r3, r2
 8027f4e:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8027f52:	4770      	bx	lr
 8027f54:	20000028 	.word	0x20000028
 8027f58:	2000008c 	.word	0x2000008c

08027f5c <__ascii_mbtowc>:
 8027f5c:	b082      	sub	sp, #8
 8027f5e:	b901      	cbnz	r1, 8027f62 <__ascii_mbtowc+0x6>
 8027f60:	a901      	add	r1, sp, #4
 8027f62:	b142      	cbz	r2, 8027f76 <__ascii_mbtowc+0x1a>
 8027f64:	b14b      	cbz	r3, 8027f7a <__ascii_mbtowc+0x1e>
 8027f66:	7813      	ldrb	r3, [r2, #0]
 8027f68:	600b      	str	r3, [r1, #0]
 8027f6a:	7812      	ldrb	r2, [r2, #0]
 8027f6c:	1c10      	adds	r0, r2, #0
 8027f6e:	bf18      	it	ne
 8027f70:	2001      	movne	r0, #1
 8027f72:	b002      	add	sp, #8
 8027f74:	4770      	bx	lr
 8027f76:	4610      	mov	r0, r2
 8027f78:	e7fb      	b.n	8027f72 <__ascii_mbtowc+0x16>
 8027f7a:	f06f 0001 	mvn.w	r0, #1
 8027f7e:	e7f8      	b.n	8027f72 <__ascii_mbtowc+0x16>

08027f80 <memmove>:
 8027f80:	4288      	cmp	r0, r1
 8027f82:	b510      	push	{r4, lr}
 8027f84:	eb01 0302 	add.w	r3, r1, r2
 8027f88:	d803      	bhi.n	8027f92 <memmove+0x12>
 8027f8a:	1e42      	subs	r2, r0, #1
 8027f8c:	4299      	cmp	r1, r3
 8027f8e:	d10c      	bne.n	8027faa <memmove+0x2a>
 8027f90:	bd10      	pop	{r4, pc}
 8027f92:	4298      	cmp	r0, r3
 8027f94:	d2f9      	bcs.n	8027f8a <memmove+0xa>
 8027f96:	1881      	adds	r1, r0, r2
 8027f98:	1ad2      	subs	r2, r2, r3
 8027f9a:	42d3      	cmn	r3, r2
 8027f9c:	d100      	bne.n	8027fa0 <memmove+0x20>
 8027f9e:	bd10      	pop	{r4, pc}
 8027fa0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8027fa4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8027fa8:	e7f7      	b.n	8027f9a <memmove+0x1a>
 8027faa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8027fae:	f802 4f01 	strb.w	r4, [r2, #1]!
 8027fb2:	e7eb      	b.n	8027f8c <memmove+0xc>

08027fb4 <__malloc_lock>:
 8027fb4:	4770      	bx	lr

08027fb6 <__malloc_unlock>:
 8027fb6:	4770      	bx	lr

08027fb8 <_realloc_r>:
 8027fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027fba:	4607      	mov	r7, r0
 8027fbc:	4614      	mov	r4, r2
 8027fbe:	460e      	mov	r6, r1
 8027fc0:	b921      	cbnz	r1, 8027fcc <_realloc_r+0x14>
 8027fc2:	4611      	mov	r1, r2
 8027fc4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8027fc8:	f7ff b966 	b.w	8027298 <_malloc_r>
 8027fcc:	b922      	cbnz	r2, 8027fd8 <_realloc_r+0x20>
 8027fce:	f7ff f915 	bl	80271fc <_free_r>
 8027fd2:	4625      	mov	r5, r4
 8027fd4:	4628      	mov	r0, r5
 8027fd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8027fd8:	f000 f821 	bl	802801e <_malloc_usable_size_r>
 8027fdc:	4284      	cmp	r4, r0
 8027fde:	d90f      	bls.n	8028000 <_realloc_r+0x48>
 8027fe0:	4621      	mov	r1, r4
 8027fe2:	4638      	mov	r0, r7
 8027fe4:	f7ff f958 	bl	8027298 <_malloc_r>
 8027fe8:	4605      	mov	r5, r0
 8027fea:	2800      	cmp	r0, #0
 8027fec:	d0f2      	beq.n	8027fd4 <_realloc_r+0x1c>
 8027fee:	4631      	mov	r1, r6
 8027ff0:	4622      	mov	r2, r4
 8027ff2:	f7fd facf 	bl	8025594 <memcpy>
 8027ff6:	4631      	mov	r1, r6
 8027ff8:	4638      	mov	r0, r7
 8027ffa:	f7ff f8ff 	bl	80271fc <_free_r>
 8027ffe:	e7e9      	b.n	8027fd4 <_realloc_r+0x1c>
 8028000:	4635      	mov	r5, r6
 8028002:	e7e7      	b.n	8027fd4 <_realloc_r+0x1c>

08028004 <__ascii_wctomb>:
 8028004:	b149      	cbz	r1, 802801a <__ascii_wctomb+0x16>
 8028006:	2aff      	cmp	r2, #255	; 0xff
 8028008:	bf85      	ittet	hi
 802800a:	238a      	movhi	r3, #138	; 0x8a
 802800c:	6003      	strhi	r3, [r0, #0]
 802800e:	700a      	strbls	r2, [r1, #0]
 8028010:	f04f 30ff 	movhi.w	r0, #4294967295
 8028014:	bf98      	it	ls
 8028016:	2001      	movls	r0, #1
 8028018:	4770      	bx	lr
 802801a:	4608      	mov	r0, r1
 802801c:	4770      	bx	lr

0802801e <_malloc_usable_size_r>:
 802801e:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8028022:	2800      	cmp	r0, #0
 8028024:	f1a0 0004 	sub.w	r0, r0, #4
 8028028:	bfbc      	itt	lt
 802802a:	580b      	ldrlt	r3, [r1, r0]
 802802c:	18c0      	addlt	r0, r0, r3
 802802e:	4770      	bx	lr

08028030 <logf>:
 8028030:	b510      	push	{r4, lr}
 8028032:	ed2d 8b02 	vpush	{d8}
 8028036:	b08a      	sub	sp, #40	; 0x28
 8028038:	eeb0 8a40 	vmov.f32	s16, s0
 802803c:	f000 f874 	bl	8028128 <__ieee754_logf>
 8028040:	4b34      	ldr	r3, [pc, #208]	; (8028114 <logf+0xe4>)
 8028042:	f993 4000 	ldrsb.w	r4, [r3]
 8028046:	1c63      	adds	r3, r4, #1
 8028048:	d009      	beq.n	802805e <logf+0x2e>
 802804a:	eeb4 8a48 	vcmp.f32	s16, s16
 802804e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028052:	d604      	bvs.n	802805e <logf+0x2e>
 8028054:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8028058:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802805c:	dd03      	ble.n	8028066 <logf+0x36>
 802805e:	b00a      	add	sp, #40	; 0x28
 8028060:	ecbd 8b02 	vpop	{d8}
 8028064:	bd10      	pop	{r4, pc}
 8028066:	4b2c      	ldr	r3, [pc, #176]	; (8028118 <logf+0xe8>)
 8028068:	9301      	str	r3, [sp, #4]
 802806a:	ee18 0a10 	vmov	r0, s16
 802806e:	2300      	movs	r3, #0
 8028070:	9308      	str	r3, [sp, #32]
 8028072:	f7f8 fa81 	bl	8020578 <__aeabi_f2d>
 8028076:	e9cd 0104 	strd	r0, r1, [sp, #16]
 802807a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802807e:	b9dc      	cbnz	r4, 80280b8 <logf+0x88>
 8028080:	4b26      	ldr	r3, [pc, #152]	; (802811c <logf+0xec>)
 8028082:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8028086:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 802808a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802808e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8028092:	d136      	bne.n	8028102 <logf+0xd2>
 8028094:	2302      	movs	r3, #2
 8028096:	9300      	str	r3, [sp, #0]
 8028098:	4668      	mov	r0, sp
 802809a:	f000 f951 	bl	8028340 <matherr>
 802809e:	b1c0      	cbz	r0, 80280d2 <logf+0xa2>
 80280a0:	9b08      	ldr	r3, [sp, #32]
 80280a2:	b9db      	cbnz	r3, 80280dc <logf+0xac>
 80280a4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80280a8:	f7f8 fd92 	bl	8020bd0 <__aeabi_d2f>
 80280ac:	ee00 0a10 	vmov	s0, r0
 80280b0:	b00a      	add	sp, #40	; 0x28
 80280b2:	ecbd 8b02 	vpop	{d8}
 80280b6:	bd10      	pop	{r4, pc}
 80280b8:	4b19      	ldr	r3, [pc, #100]	; (8028120 <logf+0xf0>)
 80280ba:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80280be:	2200      	movs	r2, #0
 80280c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80280c4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80280c8:	d10d      	bne.n	80280e6 <logf+0xb6>
 80280ca:	2302      	movs	r3, #2
 80280cc:	429c      	cmp	r4, r3
 80280ce:	9300      	str	r3, [sp, #0]
 80280d0:	d1e2      	bne.n	8028098 <logf+0x68>
 80280d2:	f000 f94f 	bl	8028374 <__errno>
 80280d6:	2322      	movs	r3, #34	; 0x22
 80280d8:	6003      	str	r3, [r0, #0]
 80280da:	e7e1      	b.n	80280a0 <logf+0x70>
 80280dc:	f000 f94a 	bl	8028374 <__errno>
 80280e0:	9b08      	ldr	r3, [sp, #32]
 80280e2:	6003      	str	r3, [r0, #0]
 80280e4:	e7de      	b.n	80280a4 <logf+0x74>
 80280e6:	2301      	movs	r3, #1
 80280e8:	2c02      	cmp	r4, #2
 80280ea:	9300      	str	r3, [sp, #0]
 80280ec:	d10b      	bne.n	8028106 <logf+0xd6>
 80280ee:	f000 f941 	bl	8028374 <__errno>
 80280f2:	2321      	movs	r3, #33	; 0x21
 80280f4:	6003      	str	r3, [r0, #0]
 80280f6:	480b      	ldr	r0, [pc, #44]	; (8028124 <logf+0xf4>)
 80280f8:	f000 f926 	bl	8028348 <nan>
 80280fc:	ed8d 0b06 	vstr	d0, [sp, #24]
 8028100:	e7ce      	b.n	80280a0 <logf+0x70>
 8028102:	2301      	movs	r3, #1
 8028104:	9300      	str	r3, [sp, #0]
 8028106:	4668      	mov	r0, sp
 8028108:	f000 f91a 	bl	8028340 <matherr>
 802810c:	2800      	cmp	r0, #0
 802810e:	d1f2      	bne.n	80280f6 <logf+0xc6>
 8028110:	e7ed      	b.n	80280ee <logf+0xbe>
 8028112:	bf00      	nop
 8028114:	200001f8 	.word	0x200001f8
 8028118:	0802881c 	.word	0x0802881c
 802811c:	c7efffff 	.word	0xc7efffff
 8028120:	fff00000 	.word	0xfff00000
 8028124:	08028544 	.word	0x08028544

08028128 <__ieee754_logf>:
 8028128:	b430      	push	{r4, r5}
 802812a:	b082      	sub	sp, #8
 802812c:	ed8d 0a01 	vstr	s0, [sp, #4]
 8028130:	9b01      	ldr	r3, [sp, #4]
 8028132:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8028136:	d02d      	beq.n	8028194 <__ieee754_logf+0x6c>
 8028138:	2b00      	cmp	r3, #0
 802813a:	db3f      	blt.n	80281bc <__ieee754_logf+0x94>
 802813c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8028140:	da47      	bge.n	80281d2 <__ieee754_logf+0xaa>
 8028142:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8028146:	db2e      	blt.n	80281a6 <__ieee754_logf+0x7e>
 8028148:	2500      	movs	r5, #0
 802814a:	4a6e      	ldr	r2, [pc, #440]	; (8028304 <__ieee754_logf+0x1dc>)
 802814c:	f3c3 0416 	ubfx	r4, r3, #0, #23
 8028150:	4422      	add	r2, r4
 8028152:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
 8028156:	f082 507e 	eor.w	r0, r2, #1065353216	; 0x3f800000
 802815a:	15db      	asrs	r3, r3, #23
 802815c:	f104 010f 	add.w	r1, r4, #15
 8028160:	4320      	orrs	r0, r4
 8028162:	3b7f      	subs	r3, #127	; 0x7f
 8028164:	ee00 0a10 	vmov	s0, r0
 8028168:	f3c1 0116 	ubfx	r1, r1, #0, #23
 802816c:	442b      	add	r3, r5
 802816e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8028172:	290f      	cmp	r1, #15
 8028174:	eb03 53d2 	add.w	r3, r3, r2, lsr #23
 8028178:	ee30 7a47 	vsub.f32	s14, s0, s14
 802817c:	dc30      	bgt.n	80281e0 <__ieee754_logf+0xb8>
 802817e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8028182:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028186:	d16c      	bne.n	8028262 <__ieee754_logf+0x13a>
 8028188:	2b00      	cmp	r3, #0
 802818a:	f040 8096 	bne.w	80282ba <__ieee754_logf+0x192>
 802818e:	ed9f 0a5e 	vldr	s0, [pc, #376]	; 8028308 <__ieee754_logf+0x1e0>
 8028192:	e005      	b.n	80281a0 <__ieee754_logf+0x78>
 8028194:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 802830c <__ieee754_logf+0x1e4>
 8028198:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8028308 <__ieee754_logf+0x1e0>
 802819c:	ee87 0a27 	vdiv.f32	s0, s14, s15
 80281a0:	b002      	add	sp, #8
 80281a2:	bc30      	pop	{r4, r5}
 80281a4:	4770      	bx	lr
 80281a6:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8028310 <__ieee754_logf+0x1e8>
 80281aa:	ed9d 7a01 	vldr	s14, [sp, #4]
 80281ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80281b2:	f06f 0518 	mvn.w	r5, #24
 80281b6:	ee17 3a90 	vmov	r3, s15
 80281ba:	e7c6      	b.n	802814a <__ieee754_logf+0x22>
 80281bc:	eddd 7a01 	vldr	s15, [sp, #4]
 80281c0:	ee37 7ae7 	vsub.f32	s14, s15, s15
 80281c4:	eddf 7a50 	vldr	s15, [pc, #320]	; 8028308 <__ieee754_logf+0x1e0>
 80281c8:	ee87 0a27 	vdiv.f32	s0, s14, s15
 80281cc:	b002      	add	sp, #8
 80281ce:	bc30      	pop	{r4, r5}
 80281d0:	4770      	bx	lr
 80281d2:	eddd 7a01 	vldr	s15, [sp, #4]
 80281d6:	ee37 0aa7 	vadd.f32	s0, s15, s15
 80281da:	b002      	add	sp, #8
 80281dc:	bc30      	pop	{r4, r5}
 80281de:	4770      	bx	lr
 80281e0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80281e4:	ee77 6a26 	vadd.f32	s13, s14, s13
 80281e8:	ed9f 2a4a 	vldr	s4, [pc, #296]	; 8028314 <__ieee754_logf+0x1ec>
 80281ec:	ed9f 4a4a 	vldr	s8, [pc, #296]	; 8028318 <__ieee754_logf+0x1f0>
 80281f0:	ed9f 5a4a 	vldr	s10, [pc, #296]	; 802831c <__ieee754_logf+0x1f4>
 80281f4:	eddf 2a4a 	vldr	s5, [pc, #296]	; 8028320 <__ieee754_logf+0x1f8>
 80281f8:	eddf 4a4a 	vldr	s9, [pc, #296]	; 8028324 <__ieee754_logf+0x1fc>
 80281fc:	eddf 7a4a 	vldr	s15, [pc, #296]	; 8028328 <__ieee754_logf+0x200>
 8028200:	ed9f 6a4a 	vldr	s12, [pc, #296]	; 802832c <__ieee754_logf+0x204>
 8028204:	494a      	ldr	r1, [pc, #296]	; (8028330 <__ieee754_logf+0x208>)
 8028206:	eec7 3a26 	vdiv.f32	s7, s14, s13
 802820a:	f5c4 1257 	rsb	r2, r4, #3522560	; 0x35c000
 802820e:	4421      	add	r1, r4
 8028210:	f502 7222 	add.w	r2, r2, #648	; 0x288
 8028214:	430a      	orrs	r2, r1
 8028216:	2a00      	cmp	r2, #0
 8028218:	ee06 3a90 	vmov	s13, r3
 802821c:	ee63 5aa3 	vmul.f32	s11, s7, s7
 8028220:	eeb8 3ae6 	vcvt.f32.s32	s6, s13
 8028224:	ee65 6aa5 	vmul.f32	s13, s11, s11
 8028228:	eea6 4a82 	vfma.f32	s8, s13, s4
 802822c:	eee6 4aa2 	vfma.f32	s9, s13, s5
 8028230:	eea6 5a84 	vfma.f32	s10, s13, s8
 8028234:	eea6 6aa4 	vfma.f32	s12, s13, s9
 8028238:	eee6 7a85 	vfma.f32	s15, s13, s10
 802823c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8028240:	eee6 7a86 	vfma.f32	s15, s13, s12
 8028244:	dd46      	ble.n	80282d4 <__ieee754_logf+0x1ac>
 8028246:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 802824a:	ee27 0a00 	vmul.f32	s0, s14, s0
 802824e:	ee20 0a07 	vmul.f32	s0, s0, s14
 8028252:	bb0b      	cbnz	r3, 8028298 <__ieee754_logf+0x170>
 8028254:	ee77 7a80 	vadd.f32	s15, s15, s0
 8028258:	eea3 0ae7 	vfms.f32	s0, s7, s15
 802825c:	ee37 0a40 	vsub.f32	s0, s14, s0
 8028260:	e79e      	b.n	80281a0 <__ieee754_logf+0x78>
 8028262:	eddf 7a34 	vldr	s15, [pc, #208]	; 8028334 <__ieee754_logf+0x20c>
 8028266:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 802826a:	eea7 0a67 	vfms.f32	s0, s14, s15
 802826e:	ee67 7a07 	vmul.f32	s15, s14, s14
 8028272:	ee20 0a27 	vmul.f32	s0, s0, s15
 8028276:	2b00      	cmp	r3, #0
 8028278:	d0f0      	beq.n	802825c <__ieee754_logf+0x134>
 802827a:	ee07 3a90 	vmov	s15, r3
 802827e:	ed9f 6a2e 	vldr	s12, [pc, #184]	; 8028338 <__ieee754_logf+0x210>
 8028282:	eddf 6a2e 	vldr	s13, [pc, #184]	; 802833c <__ieee754_logf+0x214>
 8028286:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802828a:	eea7 0ac6 	vfms.f32	s0, s15, s12
 802828e:	ee30 0a47 	vsub.f32	s0, s0, s14
 8028292:	ee97 0aa6 	vfnms.f32	s0, s15, s13
 8028296:	e783      	b.n	80281a0 <__ieee754_logf+0x78>
 8028298:	eddf 6a27 	vldr	s13, [pc, #156]	; 8028338 <__ieee754_logf+0x210>
 802829c:	ed9f 6a27 	vldr	s12, [pc, #156]	; 802833c <__ieee754_logf+0x214>
 80282a0:	ee77 7a80 	vadd.f32	s15, s15, s0
 80282a4:	ee63 6a26 	vmul.f32	s13, s6, s13
 80282a8:	eee3 6aa7 	vfma.f32	s13, s7, s15
 80282ac:	ee30 0a66 	vsub.f32	s0, s0, s13
 80282b0:	ee30 0a47 	vsub.f32	s0, s0, s14
 80282b4:	ee93 0a06 	vfnms.f32	s0, s6, s12
 80282b8:	e772      	b.n	80281a0 <__ieee754_logf+0x78>
 80282ba:	ee07 3a90 	vmov	s15, r3
 80282be:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 8028338 <__ieee754_logf+0x210>
 80282c2:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 802833c <__ieee754_logf+0x214>
 80282c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80282ca:	ee27 0a80 	vmul.f32	s0, s15, s0
 80282ce:	eea7 0a87 	vfma.f32	s0, s15, s14
 80282d2:	e765      	b.n	80281a0 <__ieee754_logf+0x78>
 80282d4:	b173      	cbz	r3, 80282f4 <__ieee754_logf+0x1cc>
 80282d6:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8028338 <__ieee754_logf+0x210>
 80282da:	eddf 6a18 	vldr	s13, [pc, #96]	; 802833c <__ieee754_logf+0x214>
 80282de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80282e2:	ee20 0a43 	vnmul.f32	s0, s0, s6
 80282e6:	eea3 0aa7 	vfma.f32	s0, s7, s15
 80282ea:	ee30 0a47 	vsub.f32	s0, s0, s14
 80282ee:	ee93 0a26 	vfnms.f32	s0, s6, s13
 80282f2:	e755      	b.n	80281a0 <__ieee754_logf+0x78>
 80282f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80282f8:	eea3 7ae7 	vfms.f32	s14, s7, s15
 80282fc:	eeb0 0a47 	vmov.f32	s0, s14
 8028300:	e74e      	b.n	80281a0 <__ieee754_logf+0x78>
 8028302:	bf00      	nop
 8028304:	004afb20 	.word	0x004afb20
 8028308:	00000000 	.word	0x00000000
 802830c:	cc000000 	.word	0xcc000000
 8028310:	4c000000 	.word	0x4c000000
 8028314:	3e178897 	.word	0x3e178897
 8028318:	3e3a3325 	.word	0x3e3a3325
 802831c:	3e924925 	.word	0x3e924925
 8028320:	3e1cd04f 	.word	0x3e1cd04f
 8028324:	3e638e29 	.word	0x3e638e29
 8028328:	3f2aaaab 	.word	0x3f2aaaab
 802832c:	3ecccccd 	.word	0x3ecccccd
 8028330:	ffcf5c30 	.word	0xffcf5c30
 8028334:	3eaaaaab 	.word	0x3eaaaaab
 8028338:	3717f7d1 	.word	0x3717f7d1
 802833c:	3f317180 	.word	0x3f317180

08028340 <matherr>:
 8028340:	2000      	movs	r0, #0
 8028342:	4770      	bx	lr
 8028344:	0000      	movs	r0, r0
	...

08028348 <nan>:
 8028348:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8028350 <nan+0x8>
 802834c:	4770      	bx	lr
 802834e:	bf00      	nop
 8028350:	00000000 	.word	0x00000000
 8028354:	7ff80000 	.word	0x7ff80000

08028358 <_sbrk>:
 8028358:	4a04      	ldr	r2, [pc, #16]	; (802836c <_sbrk+0x14>)
 802835a:	4905      	ldr	r1, [pc, #20]	; (8028370 <_sbrk+0x18>)
 802835c:	6813      	ldr	r3, [r2, #0]
 802835e:	2b00      	cmp	r3, #0
 8028360:	bf08      	it	eq
 8028362:	460b      	moveq	r3, r1
 8028364:	4418      	add	r0, r3
 8028366:	6010      	str	r0, [r2, #0]
 8028368:	4618      	mov	r0, r3
 802836a:	4770      	bx	lr
 802836c:	2000052c 	.word	0x2000052c
 8028370:	20000a18 	.word	0x20000a18

08028374 <__errno>:
 8028374:	4b01      	ldr	r3, [pc, #4]	; (802837c <__errno+0x8>)
 8028376:	6818      	ldr	r0, [r3, #0]
 8028378:	4770      	bx	lr
 802837a:	bf00      	nop
 802837c:	20000028 	.word	0x20000028

08028380 <_init>:
 8028380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8028382:	bf00      	nop
 8028384:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8028386:	bc08      	pop	{r3}
 8028388:	469e      	mov	lr, r3
 802838a:	4770      	bx	lr

0802838c <_fini>:
 802838c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802838e:	bf00      	nop
 8028390:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8028392:	bc08      	pop	{r3}
 8028394:	469e      	mov	lr, r3
 8028396:	4770      	bx	lr

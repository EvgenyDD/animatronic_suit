
build/boot:     file format elf32-littlearm


Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000444 	.word	0x20000444
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001498 	.word	0x08001498

080001ac <frame_dummy>:
 80001ac:	4b0c      	ldr	r3, [pc, #48]	; (80001e0 <frame_dummy+0x34>)
 80001ae:	b143      	cbz	r3, 80001c2 <frame_dummy+0x16>
 80001b0:	480c      	ldr	r0, [pc, #48]	; (80001e4 <frame_dummy+0x38>)
 80001b2:	490d      	ldr	r1, [pc, #52]	; (80001e8 <frame_dummy+0x3c>)
 80001b4:	b510      	push	{r4, lr}
 80001b6:	f3af 8000 	nop.w
 80001ba:	480c      	ldr	r0, [pc, #48]	; (80001ec <frame_dummy+0x40>)
 80001bc:	6803      	ldr	r3, [r0, #0]
 80001be:	b923      	cbnz	r3, 80001ca <frame_dummy+0x1e>
 80001c0:	bd10      	pop	{r4, pc}
 80001c2:	480a      	ldr	r0, [pc, #40]	; (80001ec <frame_dummy+0x40>)
 80001c4:	6803      	ldr	r3, [r0, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <frame_dummy+0x2a>
 80001c8:	4770      	bx	lr
 80001ca:	4b09      	ldr	r3, [pc, #36]	; (80001f0 <frame_dummy+0x44>)
 80001cc:	2b00      	cmp	r3, #0
 80001ce:	d0f7      	beq.n	80001c0 <frame_dummy+0x14>
 80001d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80001d4:	4718      	bx	r3
 80001d6:	4b06      	ldr	r3, [pc, #24]	; (80001f0 <frame_dummy+0x44>)
 80001d8:	2b00      	cmp	r3, #0
 80001da:	d0f5      	beq.n	80001c8 <frame_dummy+0x1c>
 80001dc:	4718      	bx	r3
 80001de:	bf00      	nop
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08001498 	.word	0x08001498
 80001e8:	20000448 	.word	0x20000448
 80001ec:	20000444 	.word	0x20000444
 80001f0:	00000000 	.word	0x00000000

080001f4 <__aeabi_uldivmod>:
 80001f4:	b953      	cbnz	r3, 800020c <__aeabi_uldivmod+0x18>
 80001f6:	b94a      	cbnz	r2, 800020c <__aeabi_uldivmod+0x18>
 80001f8:	2900      	cmp	r1, #0
 80001fa:	bf08      	it	eq
 80001fc:	2800      	cmpeq	r0, #0
 80001fe:	bf1c      	itt	ne
 8000200:	f04f 31ff 	movne.w	r1, #4294967295
 8000204:	f04f 30ff 	movne.w	r0, #4294967295
 8000208:	f000 b97a 	b.w	8000500 <__aeabi_idiv0>
 800020c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000210:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000214:	f000 f806 	bl	8000224 <__udivmoddi4>
 8000218:	f8dd e004 	ldr.w	lr, [sp, #4]
 800021c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000220:	b004      	add	sp, #16
 8000222:	4770      	bx	lr

08000224 <__udivmoddi4>:
 8000224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000228:	468c      	mov	ip, r1
 800022a:	460d      	mov	r5, r1
 800022c:	4604      	mov	r4, r0
 800022e:	9e08      	ldr	r6, [sp, #32]
 8000230:	2b00      	cmp	r3, #0
 8000232:	d151      	bne.n	80002d8 <__udivmoddi4+0xb4>
 8000234:	428a      	cmp	r2, r1
 8000236:	4617      	mov	r7, r2
 8000238:	d96d      	bls.n	8000316 <__udivmoddi4+0xf2>
 800023a:	fab2 fe82 	clz	lr, r2
 800023e:	f1be 0f00 	cmp.w	lr, #0
 8000242:	d00b      	beq.n	800025c <__udivmoddi4+0x38>
 8000244:	f1ce 0c20 	rsb	ip, lr, #32
 8000248:	fa01 f50e 	lsl.w	r5, r1, lr
 800024c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000250:	fa02 f70e 	lsl.w	r7, r2, lr
 8000254:	ea4c 0c05 	orr.w	ip, ip, r5
 8000258:	fa00 f40e 	lsl.w	r4, r0, lr
 800025c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000260:	0c25      	lsrs	r5, r4, #16
 8000262:	fbbc f8fa 	udiv	r8, ip, sl
 8000266:	fa1f f987 	uxth.w	r9, r7
 800026a:	fb0a cc18 	mls	ip, sl, r8, ip
 800026e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000272:	fb08 f309 	mul.w	r3, r8, r9
 8000276:	42ab      	cmp	r3, r5
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x6c>
 800027a:	19ed      	adds	r5, r5, r7
 800027c:	f108 32ff 	add.w	r2, r8, #4294967295
 8000280:	f080 8123 	bcs.w	80004ca <__udivmoddi4+0x2a6>
 8000284:	42ab      	cmp	r3, r5
 8000286:	f240 8120 	bls.w	80004ca <__udivmoddi4+0x2a6>
 800028a:	f1a8 0802 	sub.w	r8, r8, #2
 800028e:	443d      	add	r5, r7
 8000290:	1aed      	subs	r5, r5, r3
 8000292:	b2a4      	uxth	r4, r4
 8000294:	fbb5 f0fa 	udiv	r0, r5, sl
 8000298:	fb0a 5510 	mls	r5, sl, r0, r5
 800029c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002a0:	fb00 f909 	mul.w	r9, r0, r9
 80002a4:	45a1      	cmp	r9, r4
 80002a6:	d909      	bls.n	80002bc <__udivmoddi4+0x98>
 80002a8:	19e4      	adds	r4, r4, r7
 80002aa:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ae:	f080 810a 	bcs.w	80004c6 <__udivmoddi4+0x2a2>
 80002b2:	45a1      	cmp	r9, r4
 80002b4:	f240 8107 	bls.w	80004c6 <__udivmoddi4+0x2a2>
 80002b8:	3802      	subs	r0, #2
 80002ba:	443c      	add	r4, r7
 80002bc:	eba4 0409 	sub.w	r4, r4, r9
 80002c0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002c4:	2100      	movs	r1, #0
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d061      	beq.n	800038e <__udivmoddi4+0x16a>
 80002ca:	fa24 f40e 	lsr.w	r4, r4, lr
 80002ce:	2300      	movs	r3, #0
 80002d0:	6034      	str	r4, [r6, #0]
 80002d2:	6073      	str	r3, [r6, #4]
 80002d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xc8>
 80002dc:	2e00      	cmp	r6, #0
 80002de:	d054      	beq.n	800038a <__udivmoddi4+0x166>
 80002e0:	2100      	movs	r1, #0
 80002e2:	e886 0021 	stmia.w	r6, {r0, r5}
 80002e6:	4608      	mov	r0, r1
 80002e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ec:	fab3 f183 	clz	r1, r3
 80002f0:	2900      	cmp	r1, #0
 80002f2:	f040 808e 	bne.w	8000412 <__udivmoddi4+0x1ee>
 80002f6:	42ab      	cmp	r3, r5
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xdc>
 80002fa:	4282      	cmp	r2, r0
 80002fc:	f200 80fa 	bhi.w	80004f4 <__udivmoddi4+0x2d0>
 8000300:	1a84      	subs	r4, r0, r2
 8000302:	eb65 0503 	sbc.w	r5, r5, r3
 8000306:	2001      	movs	r0, #1
 8000308:	46ac      	mov	ip, r5
 800030a:	2e00      	cmp	r6, #0
 800030c:	d03f      	beq.n	800038e <__udivmoddi4+0x16a>
 800030e:	e886 1010 	stmia.w	r6, {r4, ip}
 8000312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000316:	b912      	cbnz	r2, 800031e <__udivmoddi4+0xfa>
 8000318:	2701      	movs	r7, #1
 800031a:	fbb7 f7f2 	udiv	r7, r7, r2
 800031e:	fab7 fe87 	clz	lr, r7
 8000322:	f1be 0f00 	cmp.w	lr, #0
 8000326:	d134      	bne.n	8000392 <__udivmoddi4+0x16e>
 8000328:	1beb      	subs	r3, r5, r7
 800032a:	0c3a      	lsrs	r2, r7, #16
 800032c:	fa1f fc87 	uxth.w	ip, r7
 8000330:	2101      	movs	r1, #1
 8000332:	fbb3 f8f2 	udiv	r8, r3, r2
 8000336:	0c25      	lsrs	r5, r4, #16
 8000338:	fb02 3318 	mls	r3, r2, r8, r3
 800033c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000340:	fb0c f308 	mul.w	r3, ip, r8
 8000344:	42ab      	cmp	r3, r5
 8000346:	d907      	bls.n	8000358 <__udivmoddi4+0x134>
 8000348:	19ed      	adds	r5, r5, r7
 800034a:	f108 30ff 	add.w	r0, r8, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x132>
 8000350:	42ab      	cmp	r3, r5
 8000352:	f200 80d1 	bhi.w	80004f8 <__udivmoddi4+0x2d4>
 8000356:	4680      	mov	r8, r0
 8000358:	1aed      	subs	r5, r5, r3
 800035a:	b2a3      	uxth	r3, r4
 800035c:	fbb5 f0f2 	udiv	r0, r5, r2
 8000360:	fb02 5510 	mls	r5, r2, r0, r5
 8000364:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000368:	fb0c fc00 	mul.w	ip, ip, r0
 800036c:	45a4      	cmp	ip, r4
 800036e:	d907      	bls.n	8000380 <__udivmoddi4+0x15c>
 8000370:	19e4      	adds	r4, r4, r7
 8000372:	f100 33ff 	add.w	r3, r0, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x15a>
 8000378:	45a4      	cmp	ip, r4
 800037a:	f200 80b8 	bhi.w	80004ee <__udivmoddi4+0x2ca>
 800037e:	4618      	mov	r0, r3
 8000380:	eba4 040c 	sub.w	r4, r4, ip
 8000384:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000388:	e79d      	b.n	80002c6 <__udivmoddi4+0xa2>
 800038a:	4631      	mov	r1, r6
 800038c:	4630      	mov	r0, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	f1ce 0420 	rsb	r4, lr, #32
 8000396:	fa05 f30e 	lsl.w	r3, r5, lr
 800039a:	fa07 f70e 	lsl.w	r7, r7, lr
 800039e:	fa20 f804 	lsr.w	r8, r0, r4
 80003a2:	0c3a      	lsrs	r2, r7, #16
 80003a4:	fa25 f404 	lsr.w	r4, r5, r4
 80003a8:	ea48 0803 	orr.w	r8, r8, r3
 80003ac:	fbb4 f1f2 	udiv	r1, r4, r2
 80003b0:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003b4:	fb02 4411 	mls	r4, r2, r1, r4
 80003b8:	fa1f fc87 	uxth.w	ip, r7
 80003bc:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003c0:	fb01 f30c 	mul.w	r3, r1, ip
 80003c4:	42ab      	cmp	r3, r5
 80003c6:	fa00 f40e 	lsl.w	r4, r0, lr
 80003ca:	d909      	bls.n	80003e0 <__udivmoddi4+0x1bc>
 80003cc:	19ed      	adds	r5, r5, r7
 80003ce:	f101 30ff 	add.w	r0, r1, #4294967295
 80003d2:	f080 808a 	bcs.w	80004ea <__udivmoddi4+0x2c6>
 80003d6:	42ab      	cmp	r3, r5
 80003d8:	f240 8087 	bls.w	80004ea <__udivmoddi4+0x2c6>
 80003dc:	3902      	subs	r1, #2
 80003de:	443d      	add	r5, r7
 80003e0:	1aeb      	subs	r3, r5, r3
 80003e2:	fa1f f588 	uxth.w	r5, r8
 80003e6:	fbb3 f0f2 	udiv	r0, r3, r2
 80003ea:	fb02 3310 	mls	r3, r2, r0, r3
 80003ee:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003f2:	fb00 f30c 	mul.w	r3, r0, ip
 80003f6:	42ab      	cmp	r3, r5
 80003f8:	d907      	bls.n	800040a <__udivmoddi4+0x1e6>
 80003fa:	19ed      	adds	r5, r5, r7
 80003fc:	f100 38ff 	add.w	r8, r0, #4294967295
 8000400:	d26f      	bcs.n	80004e2 <__udivmoddi4+0x2be>
 8000402:	42ab      	cmp	r3, r5
 8000404:	d96d      	bls.n	80004e2 <__udivmoddi4+0x2be>
 8000406:	3802      	subs	r0, #2
 8000408:	443d      	add	r5, r7
 800040a:	1aeb      	subs	r3, r5, r3
 800040c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000410:	e78f      	b.n	8000332 <__udivmoddi4+0x10e>
 8000412:	f1c1 0720 	rsb	r7, r1, #32
 8000416:	fa22 f807 	lsr.w	r8, r2, r7
 800041a:	408b      	lsls	r3, r1
 800041c:	fa05 f401 	lsl.w	r4, r5, r1
 8000420:	ea48 0303 	orr.w	r3, r8, r3
 8000424:	fa20 fe07 	lsr.w	lr, r0, r7
 8000428:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 800042c:	40fd      	lsrs	r5, r7
 800042e:	ea4e 0e04 	orr.w	lr, lr, r4
 8000432:	fbb5 f9fc 	udiv	r9, r5, ip
 8000436:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800043a:	fb0c 5519 	mls	r5, ip, r9, r5
 800043e:	fa1f f883 	uxth.w	r8, r3
 8000442:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000446:	fb09 f408 	mul.w	r4, r9, r8
 800044a:	42ac      	cmp	r4, r5
 800044c:	fa02 f201 	lsl.w	r2, r2, r1
 8000450:	fa00 fa01 	lsl.w	sl, r0, r1
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x244>
 8000456:	18ed      	adds	r5, r5, r3
 8000458:	f109 30ff 	add.w	r0, r9, #4294967295
 800045c:	d243      	bcs.n	80004e6 <__udivmoddi4+0x2c2>
 800045e:	42ac      	cmp	r4, r5
 8000460:	d941      	bls.n	80004e6 <__udivmoddi4+0x2c2>
 8000462:	f1a9 0902 	sub.w	r9, r9, #2
 8000466:	441d      	add	r5, r3
 8000468:	1b2d      	subs	r5, r5, r4
 800046a:	fa1f fe8e 	uxth.w	lr, lr
 800046e:	fbb5 f0fc 	udiv	r0, r5, ip
 8000472:	fb0c 5510 	mls	r5, ip, r0, r5
 8000476:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800047a:	fb00 f808 	mul.w	r8, r0, r8
 800047e:	45a0      	cmp	r8, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x26e>
 8000482:	18e4      	adds	r4, r4, r3
 8000484:	f100 35ff 	add.w	r5, r0, #4294967295
 8000488:	d229      	bcs.n	80004de <__udivmoddi4+0x2ba>
 800048a:	45a0      	cmp	r8, r4
 800048c:	d927      	bls.n	80004de <__udivmoddi4+0x2ba>
 800048e:	3802      	subs	r0, #2
 8000490:	441c      	add	r4, r3
 8000492:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000496:	eba4 0408 	sub.w	r4, r4, r8
 800049a:	fba0 8902 	umull	r8, r9, r0, r2
 800049e:	454c      	cmp	r4, r9
 80004a0:	46c6      	mov	lr, r8
 80004a2:	464d      	mov	r5, r9
 80004a4:	d315      	bcc.n	80004d2 <__udivmoddi4+0x2ae>
 80004a6:	d012      	beq.n	80004ce <__udivmoddi4+0x2aa>
 80004a8:	b156      	cbz	r6, 80004c0 <__udivmoddi4+0x29c>
 80004aa:	ebba 030e 	subs.w	r3, sl, lr
 80004ae:	eb64 0405 	sbc.w	r4, r4, r5
 80004b2:	fa04 f707 	lsl.w	r7, r4, r7
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431f      	orrs	r7, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	6037      	str	r7, [r6, #0]
 80004be:	6074      	str	r4, [r6, #4]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c6:	4618      	mov	r0, r3
 80004c8:	e6f8      	b.n	80002bc <__udivmoddi4+0x98>
 80004ca:	4690      	mov	r8, r2
 80004cc:	e6e0      	b.n	8000290 <__udivmoddi4+0x6c>
 80004ce:	45c2      	cmp	sl, r8
 80004d0:	d2ea      	bcs.n	80004a8 <__udivmoddi4+0x284>
 80004d2:	ebb8 0e02 	subs.w	lr, r8, r2
 80004d6:	eb69 0503 	sbc.w	r5, r9, r3
 80004da:	3801      	subs	r0, #1
 80004dc:	e7e4      	b.n	80004a8 <__udivmoddi4+0x284>
 80004de:	4628      	mov	r0, r5
 80004e0:	e7d7      	b.n	8000492 <__udivmoddi4+0x26e>
 80004e2:	4640      	mov	r0, r8
 80004e4:	e791      	b.n	800040a <__udivmoddi4+0x1e6>
 80004e6:	4681      	mov	r9, r0
 80004e8:	e7be      	b.n	8000468 <__udivmoddi4+0x244>
 80004ea:	4601      	mov	r1, r0
 80004ec:	e778      	b.n	80003e0 <__udivmoddi4+0x1bc>
 80004ee:	3802      	subs	r0, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	e745      	b.n	8000380 <__udivmoddi4+0x15c>
 80004f4:	4608      	mov	r0, r1
 80004f6:	e708      	b.n	800030a <__udivmoddi4+0xe6>
 80004f8:	f1a8 0802 	sub.w	r8, r8, #2
 80004fc:	443d      	add	r5, r7
 80004fe:	e72b      	b.n	8000358 <__udivmoddi4+0x134>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000504:	f8df d034 	ldr.w	sp, [pc, #52]	; 800053c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000508:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800050a:	e003      	b.n	8000514 <LoopCopyDataInit>

0800050c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800050c:	4b0c      	ldr	r3, [pc, #48]	; (8000540 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800050e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000510:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000512:	3104      	adds	r1, #4

08000514 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000514:	480b      	ldr	r0, [pc, #44]	; (8000544 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000516:	4b0c      	ldr	r3, [pc, #48]	; (8000548 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000518:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800051a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800051c:	d3f6      	bcc.n	800050c <CopyDataInit>
  ldr  r2, =_sbss
 800051e:	4a0b      	ldr	r2, [pc, #44]	; (800054c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000520:	e002      	b.n	8000528 <LoopFillZerobss>

08000522 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000522:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000524:	f842 3b04 	str.w	r3, [r2], #4

08000528 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000528:	4b09      	ldr	r3, [pc, #36]	; (8000550 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800052a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800052c:	d3f9      	bcc.n	8000522 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800052e:	f000 fccb 	bl	8000ec8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000532:	f000 feab 	bl	800128c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000536:	f000 fc55 	bl	8000de4 <main>
  bx  lr    
 800053a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800053c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000540:	080014d8 	.word	0x080014d8
  ldr  r0, =_sdata
 8000544:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000548:	20000444 	.word	0x20000444
  ldr  r2, =_sbss
 800054c:	20000444 	.word	0x20000444
  ldr  r3, = _ebss
 8000550:	200004a8 	.word	0x200004a8

08000554 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000554:	e7fe      	b.n	8000554 <ADC_IRQHandler>
	...

08000558 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000558:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800055a:	4a0e      	ldr	r2, [pc, #56]	; (8000594 <HAL_InitTick+0x3c>)
 800055c:	4b0e      	ldr	r3, [pc, #56]	; (8000598 <HAL_InitTick+0x40>)
{
 800055e:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000560:	7818      	ldrb	r0, [r3, #0]
 8000562:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000566:	fbb3 f3f0 	udiv	r3, r3, r0
 800056a:	6810      	ldr	r0, [r2, #0]
 800056c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000570:	f000 f888 	bl	8000684 <HAL_SYSTICK_Config>
 8000574:	4604      	mov	r4, r0
 8000576:	b958      	cbnz	r0, 8000590 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000578:	2d0f      	cmp	r5, #15
 800057a:	d809      	bhi.n	8000590 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800057c:	4602      	mov	r2, r0
 800057e:	4629      	mov	r1, r5
 8000580:	f04f 30ff 	mov.w	r0, #4294967295
 8000584:	f000 f84a 	bl	800061c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000588:	4b04      	ldr	r3, [pc, #16]	; (800059c <HAL_InitTick+0x44>)
 800058a:	4620      	mov	r0, r4
 800058c:	601d      	str	r5, [r3, #0]
 800058e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000590:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000592:	bd38      	pop	{r3, r4, r5, pc}
 8000594:	20000008 	.word	0x20000008
 8000598:	20000000 	.word	0x20000000
 800059c:	20000004 	.word	0x20000004

080005a0 <HAL_Init>:
{
 80005a0:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80005a2:	4b0b      	ldr	r3, [pc, #44]	; (80005d0 <HAL_Init+0x30>)
 80005a4:	681a      	ldr	r2, [r3, #0]
 80005a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80005aa:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80005ac:	681a      	ldr	r2, [r3, #0]
 80005ae:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80005b2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005b4:	681a      	ldr	r2, [r3, #0]
 80005b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80005ba:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005bc:	2003      	movs	r0, #3
 80005be:	f000 f81b 	bl	80005f8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80005c2:	2000      	movs	r0, #0
 80005c4:	f7ff ffc8 	bl	8000558 <HAL_InitTick>
  HAL_MspInit();
 80005c8:	f000 fcb4 	bl	8000f34 <HAL_MspInit>
}
 80005cc:	2000      	movs	r0, #0
 80005ce:	bd08      	pop	{r3, pc}
 80005d0:	40023c00 	.word	0x40023c00

080005d4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80005d4:	4a03      	ldr	r2, [pc, #12]	; (80005e4 <HAL_IncTick+0x10>)
 80005d6:	4b04      	ldr	r3, [pc, #16]	; (80005e8 <HAL_IncTick+0x14>)
 80005d8:	6811      	ldr	r1, [r2, #0]
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	440b      	add	r3, r1
 80005de:	6013      	str	r3, [r2, #0]
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop
 80005e4:	20000470 	.word	0x20000470
 80005e8:	20000000 	.word	0x20000000

080005ec <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80005ec:	4b01      	ldr	r3, [pc, #4]	; (80005f4 <HAL_GetTick+0x8>)
 80005ee:	6818      	ldr	r0, [r3, #0]
}
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop
 80005f4:	20000470 	.word	0x20000470

080005f8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005f8:	4a07      	ldr	r2, [pc, #28]	; (8000618 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80005fa:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005fc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000600:	041b      	lsls	r3, r3, #16
 8000602:	0c1b      	lsrs	r3, r3, #16
 8000604:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000608:	0200      	lsls	r0, r0, #8
 800060a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800060e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000612:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000614:	60d3      	str	r3, [r2, #12]
 8000616:	4770      	bx	lr
 8000618:	e000ed00 	.word	0xe000ed00

0800061c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800061c:	4b17      	ldr	r3, [pc, #92]	; (800067c <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	68dc      	ldr	r4, [r3, #12]
 8000622:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000626:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800062a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800062c:	2b04      	cmp	r3, #4
 800062e:	bf28      	it	cs
 8000630:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000632:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000634:	f04f 0501 	mov.w	r5, #1
 8000638:	fa05 f303 	lsl.w	r3, r5, r3
 800063c:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000640:	bf8c      	ite	hi
 8000642:	3c03      	subhi	r4, #3
 8000644:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000646:	4019      	ands	r1, r3
 8000648:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800064a:	fa05 f404 	lsl.w	r4, r5, r4
 800064e:	3c01      	subs	r4, #1
 8000650:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 8000652:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000654:	ea42 0201 	orr.w	r2, r2, r1
 8000658:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800065c:	bfad      	iteet	ge
 800065e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000662:	f000 000f 	andlt.w	r0, r0, #15
 8000666:	4b06      	ldrlt	r3, [pc, #24]	; (8000680 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000668:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800066c:	bfb5      	itete	lt
 800066e:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000670:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000672:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000674:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000678:	bd30      	pop	{r4, r5, pc}
 800067a:	bf00      	nop
 800067c:	e000ed00 	.word	0xe000ed00
 8000680:	e000ed14 	.word	0xe000ed14

08000684 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000684:	3801      	subs	r0, #1
 8000686:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800068a:	d20a      	bcs.n	80006a2 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800068c:	4b06      	ldr	r3, [pc, #24]	; (80006a8 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800068e:	4a07      	ldr	r2, [pc, #28]	; (80006ac <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000690:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000692:	21f0      	movs	r1, #240	; 0xf0
 8000694:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000698:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800069a:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800069c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800069e:	601a      	str	r2, [r3, #0]
 80006a0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80006a2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop
 80006a8:	e000e010 	.word	0xe000e010
 80006ac:	e000ed00 	.word	0xe000ed00

080006b0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80006b0:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80006b2:	4604      	mov	r4, r0
 80006b4:	b150      	cbz	r0, 80006cc <HAL_CRC_Init+0x1c>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80006b6:	7943      	ldrb	r3, [r0, #5]
 80006b8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80006bc:	b913      	cbnz	r3, 80006c4 <HAL_CRC_Init+0x14>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80006be:	7102      	strb	r2, [r0, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80006c0:	f000 fc54 	bl	8000f6c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80006c4:	2301      	movs	r3, #1
 80006c6:	7163      	strb	r3, [r4, #5]

  /* Return function status */
  return HAL_OK;
 80006c8:	2000      	movs	r0, #0
 80006ca:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80006cc:	2001      	movs	r0, #1
}
 80006ce:	bd10      	pop	{r4, pc}

080006d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80006d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006d4:	f8d1 e000 	ldr.w	lr, [r1]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80006d8:	2400      	movs	r4, #0
    ioposition = 0x01U << position;
 80006da:	2301      	movs	r3, #1
 80006dc:	40a3      	lsls	r3, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006de:	ea03 060e 	and.w	r6, r3, lr

    if(iocurrent == ioposition)
 80006e2:	42b3      	cmp	r3, r6
 80006e4:	f040 80ac 	bne.w	8000840 <HAL_GPIO_Init+0x170>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006e8:	684d      	ldr	r5, [r1, #4]
 80006ea:	f025 0c10 	bic.w	ip, r5, #16
 80006ee:	f10c 33ff 	add.w	r3, ip, #4294967295
 80006f2:	2b01      	cmp	r3, #1
 80006f4:	ea4f 0744 	mov.w	r7, r4, lsl #1
 80006f8:	d810      	bhi.n	800071c <HAL_GPIO_Init+0x4c>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80006fa:	6883      	ldr	r3, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80006fc:	2203      	movs	r2, #3
 80006fe:	40ba      	lsls	r2, r7
 8000700:	ea23 0202 	bic.w	r2, r3, r2
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000704:	68cb      	ldr	r3, [r1, #12]
 8000706:	40bb      	lsls	r3, r7
 8000708:	4313      	orrs	r3, r2
        GPIOx->OSPEEDR = temp;
 800070a:	6083      	str	r3, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800070c:	6842      	ldr	r2, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800070e:	f3c5 1300 	ubfx	r3, r5, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000712:	ea22 0206 	bic.w	r2, r2, r6
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000716:	40a3      	lsls	r3, r4
 8000718:	4313      	orrs	r3, r2
        GPIOx->OTYPER = temp;
 800071a:	6043      	str	r3, [r0, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800071c:	2303      	movs	r3, #3
      temp = GPIOx->PUPDR;
 800071e:	68c2      	ldr	r2, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000720:	40bb      	lsls	r3, r7
 8000722:	43db      	mvns	r3, r3
 8000724:	ea02 0803 	and.w	r8, r2, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000728:	688a      	ldr	r2, [r1, #8]
 800072a:	40ba      	lsls	r2, r7
 800072c:	ea42 0208 	orr.w	r2, r2, r8
      GPIOx->PUPDR = temp;

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000730:	f1bc 0f02 	cmp.w	ip, #2
      GPIOx->PUPDR = temp;
 8000734:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000736:	d116      	bne.n	8000766 <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000738:	ea4f 0cd4 	mov.w	ip, r4, lsr #3
 800073c:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000740:	f004 0807 	and.w	r8, r4, #7
        temp = GPIOx->AFR[position >> 3U];
 8000744:	f8dc 2020 	ldr.w	r2, [ip, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000748:	ea4f 0888 	mov.w	r8, r8, lsl #2
 800074c:	f04f 090f 	mov.w	r9, #15
 8000750:	fa09 f908 	lsl.w	r9, r9, r8
 8000754:	ea22 0909 	bic.w	r9, r2, r9
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000758:	690a      	ldr	r2, [r1, #16]
 800075a:	fa02 f208 	lsl.w	r2, r2, r8
 800075e:	ea42 0209 	orr.w	r2, r2, r9
        GPIOx->AFR[position >> 3U] = temp;
 8000762:	f8cc 2020 	str.w	r2, [ip, #32]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000766:	6802      	ldr	r2, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000768:	401a      	ands	r2, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800076a:	f005 0303 	and.w	r3, r5, #3
 800076e:	40bb      	lsls	r3, r7
 8000770:	4313      	orrs	r3, r2
      GPIOx->MODER = temp;
 8000772:	6003      	str	r3, [r0, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000774:	00eb      	lsls	r3, r5, #3
 8000776:	d563      	bpl.n	8000840 <HAL_GPIO_Init+0x170>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000778:	4a3b      	ldr	r2, [pc, #236]	; (8000868 <HAL_GPIO_Init+0x198>)
 800077a:	2300      	movs	r3, #0
 800077c:	9301      	str	r3, [sp, #4]
 800077e:	6c57      	ldr	r7, [r2, #68]	; 0x44
 8000780:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000784:	6457      	str	r7, [r2, #68]	; 0x44
 8000786:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000788:	f024 0703 	bic.w	r7, r4, #3
 800078c:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000790:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000794:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 8000798:	9201      	str	r2, [sp, #4]

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800079a:	f004 0c03 	and.w	ip, r4, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800079e:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 80007a0:	f8d7 8008 	ldr.w	r8, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80007a4:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80007a8:	220f      	movs	r2, #15
 80007aa:	fa02 f20c 	lsl.w	r2, r2, ip
 80007ae:	ea28 0802 	bic.w	r8, r8, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80007b2:	4a2e      	ldr	r2, [pc, #184]	; (800086c <HAL_GPIO_Init+0x19c>)
 80007b4:	4290      	cmp	r0, r2
 80007b6:	d01f      	beq.n	80007f8 <HAL_GPIO_Init+0x128>
 80007b8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80007bc:	f503 3301 	add.w	r3, r3, #132096	; 0x20400
 80007c0:	4298      	cmp	r0, r3
 80007c2:	d044      	beq.n	800084e <HAL_GPIO_Init+0x17e>
 80007c4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80007c8:	4298      	cmp	r0, r3
 80007ca:	d042      	beq.n	8000852 <HAL_GPIO_Init+0x182>
 80007cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80007d0:	4298      	cmp	r0, r3
 80007d2:	d040      	beq.n	8000856 <HAL_GPIO_Init+0x186>
 80007d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80007d8:	4298      	cmp	r0, r3
 80007da:	d03e      	beq.n	800085a <HAL_GPIO_Init+0x18a>
 80007dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80007e0:	4298      	cmp	r0, r3
 80007e2:	d03c      	beq.n	800085e <HAL_GPIO_Init+0x18e>
 80007e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80007e8:	4298      	cmp	r0, r3
 80007ea:	d03a      	beq.n	8000862 <HAL_GPIO_Init+0x192>
 80007ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80007f0:	4298      	cmp	r0, r3
 80007f2:	bf14      	ite	ne
 80007f4:	2308      	movne	r3, #8
 80007f6:	2307      	moveq	r3, #7
 80007f8:	fa03 f30c 	lsl.w	r3, r3, ip
 80007fc:	ea43 0308 	orr.w	r3, r3, r8
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000800:	60bb      	str	r3, [r7, #8]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000802:	4f1b      	ldr	r7, [pc, #108]	; (8000870 <HAL_GPIO_Init+0x1a0>)
 8000804:	683b      	ldr	r3, [r7, #0]
        temp &= ~((uint32_t)iocurrent);
 8000806:	43f2      	mvns	r2, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000808:	f415 3f80 	tst.w	r5, #65536	; 0x10000
        {
          temp |= iocurrent;
 800080c:	bf14      	ite	ne
 800080e:	4333      	orrne	r3, r6
        temp &= ~((uint32_t)iocurrent);
 8000810:	4013      	andeq	r3, r2
        }
        EXTI->IMR = temp;
 8000812:	603b      	str	r3, [r7, #0]

        temp = EXTI->EMR;
 8000814:	687b      	ldr	r3, [r7, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000816:	03af      	lsls	r7, r5, #14
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 8000818:	4f15      	ldr	r7, [pc, #84]	; (8000870 <HAL_GPIO_Init+0x1a0>)
          temp |= iocurrent;
 800081a:	bf4c      	ite	mi
 800081c:	4333      	orrmi	r3, r6
        temp &= ~((uint32_t)iocurrent);
 800081e:	4013      	andpl	r3, r2
        EXTI->EMR = temp;
 8000820:	607b      	str	r3, [r7, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000822:	68bb      	ldr	r3, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000824:	f415 1f80 	tst.w	r5, #1048576	; 0x100000
        {
          temp |= iocurrent;
 8000828:	bf14      	ite	ne
 800082a:	4333      	orrne	r3, r6
        temp &= ~((uint32_t)iocurrent);
 800082c:	4013      	andeq	r3, r2
        }
        EXTI->RTSR = temp;
 800082e:	60bb      	str	r3, [r7, #8]

        temp = EXTI->FTSR;
 8000830:	68fb      	ldr	r3, [r7, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000832:	02ad      	lsls	r5, r5, #10
        temp &= ~((uint32_t)iocurrent);
 8000834:	bf54      	ite	pl
 8000836:	ea02 0603 	andpl.w	r6, r2, r3
        {
          temp |= iocurrent;
 800083a:	431e      	orrmi	r6, r3
        }
        EXTI->FTSR = temp;
 800083c:	4b0c      	ldr	r3, [pc, #48]	; (8000870 <HAL_GPIO_Init+0x1a0>)
 800083e:	60de      	str	r6, [r3, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000840:	3401      	adds	r4, #1
 8000842:	2c10      	cmp	r4, #16
 8000844:	f47f af49 	bne.w	80006da <HAL_GPIO_Init+0xa>
      }
    }
  }
}
 8000848:	b003      	add	sp, #12
 800084a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800084e:	2301      	movs	r3, #1
 8000850:	e7d2      	b.n	80007f8 <HAL_GPIO_Init+0x128>
 8000852:	2302      	movs	r3, #2
 8000854:	e7d0      	b.n	80007f8 <HAL_GPIO_Init+0x128>
 8000856:	2303      	movs	r3, #3
 8000858:	e7ce      	b.n	80007f8 <HAL_GPIO_Init+0x128>
 800085a:	2304      	movs	r3, #4
 800085c:	e7cc      	b.n	80007f8 <HAL_GPIO_Init+0x128>
 800085e:	2305      	movs	r3, #5
 8000860:	e7ca      	b.n	80007f8 <HAL_GPIO_Init+0x128>
 8000862:	2306      	movs	r3, #6
 8000864:	e7c8      	b.n	80007f8 <HAL_GPIO_Init+0x128>
 8000866:	bf00      	nop
 8000868:	40023800 	.word	0x40023800
 800086c:	40020000 	.word	0x40020000
 8000870:	40013c00 	.word	0x40013c00

08000874 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000874:	b10a      	cbz	r2, 800087a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000876:	6181      	str	r1, [r0, #24]
 8000878:	4770      	bx	lr
 800087a:	0409      	lsls	r1, r1, #16
 800087c:	e7fb      	b.n	8000876 <HAL_GPIO_WritePin+0x2>
	...

08000880 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000880:	b573      	push	{r0, r1, r4, r5, r6, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000882:	4604      	mov	r4, r0
 8000884:	b908      	cbnz	r0, 800088a <HAL_RCC_OscConfig+0xa>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 8000886:	2001      	movs	r0, #1
 8000888:	e03f      	b.n	800090a <HAL_RCC_OscConfig+0x8a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800088a:	6803      	ldr	r3, [r0, #0]
 800088c:	07d8      	lsls	r0, r3, #31
 800088e:	d410      	bmi.n	80008b2 <HAL_RCC_OscConfig+0x32>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000890:	6823      	ldr	r3, [r4, #0]
 8000892:	0799      	lsls	r1, r3, #30
 8000894:	d45a      	bmi.n	800094c <HAL_RCC_OscConfig+0xcc>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000896:	6823      	ldr	r3, [r4, #0]
 8000898:	0719      	lsls	r1, r3, #28
 800089a:	f100 809c 	bmi.w	80009d6 <HAL_RCC_OscConfig+0x156>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800089e:	6823      	ldr	r3, [r4, #0]
 80008a0:	075a      	lsls	r2, r3, #29
 80008a2:	f100 80ba 	bmi.w	8000a1a <HAL_RCC_OscConfig+0x19a>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80008a6:	69a0      	ldr	r0, [r4, #24]
 80008a8:	2800      	cmp	r0, #0
 80008aa:	f040 8125 	bne.w	8000af8 <HAL_RCC_OscConfig+0x278>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80008ae:	2000      	movs	r0, #0
 80008b0:	e02b      	b.n	800090a <HAL_RCC_OscConfig+0x8a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80008b2:	4b8d      	ldr	r3, [pc, #564]	; (8000ae8 <HAL_RCC_OscConfig+0x268>)
 80008b4:	689a      	ldr	r2, [r3, #8]
 80008b6:	f002 020c 	and.w	r2, r2, #12
 80008ba:	2a04      	cmp	r2, #4
 80008bc:	d007      	beq.n	80008ce <HAL_RCC_OscConfig+0x4e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80008be:	689a      	ldr	r2, [r3, #8]
 80008c0:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80008c4:	2a08      	cmp	r2, #8
 80008c6:	d10a      	bne.n	80008de <HAL_RCC_OscConfig+0x5e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80008c8:	685b      	ldr	r3, [r3, #4]
 80008ca:	025a      	lsls	r2, r3, #9
 80008cc:	d507      	bpl.n	80008de <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80008ce:	4b86      	ldr	r3, [pc, #536]	; (8000ae8 <HAL_RCC_OscConfig+0x268>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	039b      	lsls	r3, r3, #14
 80008d4:	d5dc      	bpl.n	8000890 <HAL_RCC_OscConfig+0x10>
 80008d6:	6863      	ldr	r3, [r4, #4]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d1d9      	bne.n	8000890 <HAL_RCC_OscConfig+0x10>
 80008dc:	e7d3      	b.n	8000886 <HAL_RCC_OscConfig+0x6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80008de:	6862      	ldr	r2, [r4, #4]
 80008e0:	4b81      	ldr	r3, [pc, #516]	; (8000ae8 <HAL_RCC_OscConfig+0x268>)
 80008e2:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80008e6:	d112      	bne.n	800090e <HAL_RCC_OscConfig+0x8e>
 80008e8:	681a      	ldr	r2, [r3, #0]
 80008ea:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80008ee:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80008f0:	f7ff fe7c 	bl	80005ec <HAL_GetTick>
 80008f4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008f6:	4b7c      	ldr	r3, [pc, #496]	; (8000ae8 <HAL_RCC_OscConfig+0x268>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	039e      	lsls	r6, r3, #14
 80008fc:	d4c8      	bmi.n	8000890 <HAL_RCC_OscConfig+0x10>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80008fe:	f7ff fe75 	bl	80005ec <HAL_GetTick>
 8000902:	1b40      	subs	r0, r0, r5
 8000904:	2864      	cmp	r0, #100	; 0x64
 8000906:	d9f6      	bls.n	80008f6 <HAL_RCC_OscConfig+0x76>
            return HAL_TIMEOUT;
 8000908:	2003      	movs	r0, #3
}
 800090a:	b002      	add	sp, #8
 800090c:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800090e:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8000912:	d104      	bne.n	800091e <HAL_RCC_OscConfig+0x9e>
 8000914:	681a      	ldr	r2, [r3, #0]
 8000916:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800091a:	601a      	str	r2, [r3, #0]
 800091c:	e7e4      	b.n	80008e8 <HAL_RCC_OscConfig+0x68>
 800091e:	6819      	ldr	r1, [r3, #0]
 8000920:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8000924:	6019      	str	r1, [r3, #0]
 8000926:	6819      	ldr	r1, [r3, #0]
 8000928:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 800092c:	6019      	str	r1, [r3, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800092e:	2a00      	cmp	r2, #0
 8000930:	d1de      	bne.n	80008f0 <HAL_RCC_OscConfig+0x70>
        tickstart = HAL_GetTick();
 8000932:	f7ff fe5b 	bl	80005ec <HAL_GetTick>
 8000936:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000938:	4b6b      	ldr	r3, [pc, #428]	; (8000ae8 <HAL_RCC_OscConfig+0x268>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	0398      	lsls	r0, r3, #14
 800093e:	d5a7      	bpl.n	8000890 <HAL_RCC_OscConfig+0x10>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000940:	f7ff fe54 	bl	80005ec <HAL_GetTick>
 8000944:	1b40      	subs	r0, r0, r5
 8000946:	2864      	cmp	r0, #100	; 0x64
 8000948:	d9f6      	bls.n	8000938 <HAL_RCC_OscConfig+0xb8>
 800094a:	e7dd      	b.n	8000908 <HAL_RCC_OscConfig+0x88>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800094c:	4b66      	ldr	r3, [pc, #408]	; (8000ae8 <HAL_RCC_OscConfig+0x268>)
 800094e:	689a      	ldr	r2, [r3, #8]
 8000950:	f012 0f0c 	tst.w	r2, #12
 8000954:	d007      	beq.n	8000966 <HAL_RCC_OscConfig+0xe6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000956:	689a      	ldr	r2, [r3, #8]
 8000958:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800095c:	2a08      	cmp	r2, #8
 800095e:	d111      	bne.n	8000984 <HAL_RCC_OscConfig+0x104>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000960:	685b      	ldr	r3, [r3, #4]
 8000962:	0259      	lsls	r1, r3, #9
 8000964:	d40e      	bmi.n	8000984 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000966:	4b60      	ldr	r3, [pc, #384]	; (8000ae8 <HAL_RCC_OscConfig+0x268>)
 8000968:	681a      	ldr	r2, [r3, #0]
 800096a:	0792      	lsls	r2, r2, #30
 800096c:	d502      	bpl.n	8000974 <HAL_RCC_OscConfig+0xf4>
 800096e:	68e2      	ldr	r2, [r4, #12]
 8000970:	2a01      	cmp	r2, #1
 8000972:	d188      	bne.n	8000886 <HAL_RCC_OscConfig+0x6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000974:	681a      	ldr	r2, [r3, #0]
 8000976:	6921      	ldr	r1, [r4, #16]
 8000978:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800097c:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8000980:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000982:	e788      	b.n	8000896 <HAL_RCC_OscConfig+0x16>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000984:	68e2      	ldr	r2, [r4, #12]
 8000986:	4b59      	ldr	r3, [pc, #356]	; (8000aec <HAL_RCC_OscConfig+0x26c>)
 8000988:	b1b2      	cbz	r2, 80009b8 <HAL_RCC_OscConfig+0x138>
        __HAL_RCC_HSI_ENABLE();
 800098a:	2201      	movs	r2, #1
 800098c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800098e:	f7ff fe2d 	bl	80005ec <HAL_GetTick>
 8000992:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000994:	4a54      	ldr	r2, [pc, #336]	; (8000ae8 <HAL_RCC_OscConfig+0x268>)
 8000996:	6813      	ldr	r3, [r2, #0]
 8000998:	079e      	lsls	r6, r3, #30
 800099a:	d507      	bpl.n	80009ac <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800099c:	6813      	ldr	r3, [r2, #0]
 800099e:	6921      	ldr	r1, [r4, #16]
 80009a0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80009a4:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80009a8:	6013      	str	r3, [r2, #0]
 80009aa:	e774      	b.n	8000896 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80009ac:	f7ff fe1e 	bl	80005ec <HAL_GetTick>
 80009b0:	1b40      	subs	r0, r0, r5
 80009b2:	2802      	cmp	r0, #2
 80009b4:	d9ee      	bls.n	8000994 <HAL_RCC_OscConfig+0x114>
 80009b6:	e7a7      	b.n	8000908 <HAL_RCC_OscConfig+0x88>
        __HAL_RCC_HSI_DISABLE();
 80009b8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80009ba:	f7ff fe17 	bl	80005ec <HAL_GetTick>
 80009be:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80009c0:	4b49      	ldr	r3, [pc, #292]	; (8000ae8 <HAL_RCC_OscConfig+0x268>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	0798      	lsls	r0, r3, #30
 80009c6:	f57f af66 	bpl.w	8000896 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80009ca:	f7ff fe0f 	bl	80005ec <HAL_GetTick>
 80009ce:	1b40      	subs	r0, r0, r5
 80009d0:	2802      	cmp	r0, #2
 80009d2:	d9f5      	bls.n	80009c0 <HAL_RCC_OscConfig+0x140>
 80009d4:	e798      	b.n	8000908 <HAL_RCC_OscConfig+0x88>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80009d6:	6962      	ldr	r2, [r4, #20]
 80009d8:	4b45      	ldr	r3, [pc, #276]	; (8000af0 <HAL_RCC_OscConfig+0x270>)
 80009da:	b17a      	cbz	r2, 80009fc <HAL_RCC_OscConfig+0x17c>
      __HAL_RCC_LSI_ENABLE();
 80009dc:	2201      	movs	r2, #1
 80009de:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80009e0:	f7ff fe04 	bl	80005ec <HAL_GetTick>
 80009e4:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80009e6:	4b40      	ldr	r3, [pc, #256]	; (8000ae8 <HAL_RCC_OscConfig+0x268>)
 80009e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80009ea:	079b      	lsls	r3, r3, #30
 80009ec:	f53f af57 	bmi.w	800089e <HAL_RCC_OscConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80009f0:	f7ff fdfc 	bl	80005ec <HAL_GetTick>
 80009f4:	1b40      	subs	r0, r0, r5
 80009f6:	2802      	cmp	r0, #2
 80009f8:	d9f5      	bls.n	80009e6 <HAL_RCC_OscConfig+0x166>
 80009fa:	e785      	b.n	8000908 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_LSI_DISABLE();
 80009fc:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80009fe:	f7ff fdf5 	bl	80005ec <HAL_GetTick>
 8000a02:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a04:	4b38      	ldr	r3, [pc, #224]	; (8000ae8 <HAL_RCC_OscConfig+0x268>)
 8000a06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000a08:	079e      	lsls	r6, r3, #30
 8000a0a:	f57f af48 	bpl.w	800089e <HAL_RCC_OscConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a0e:	f7ff fded 	bl	80005ec <HAL_GetTick>
 8000a12:	1b40      	subs	r0, r0, r5
 8000a14:	2802      	cmp	r0, #2
 8000a16:	d9f5      	bls.n	8000a04 <HAL_RCC_OscConfig+0x184>
 8000a18:	e776      	b.n	8000908 <HAL_RCC_OscConfig+0x88>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000a1a:	4b33      	ldr	r3, [pc, #204]	; (8000ae8 <HAL_RCC_OscConfig+0x268>)
 8000a1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a1e:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8000a22:	d126      	bne.n	8000a72 <HAL_RCC_OscConfig+0x1f2>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000a24:	9201      	str	r2, [sp, #4]
 8000a26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a28:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000a2c:	641a      	str	r2, [r3, #64]	; 0x40
 8000a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a34:	9301      	str	r3, [sp, #4]
 8000a36:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000a38:	2501      	movs	r5, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a3a:	4b2e      	ldr	r3, [pc, #184]	; (8000af4 <HAL_RCC_OscConfig+0x274>)
 8000a3c:	681a      	ldr	r2, [r3, #0]
 8000a3e:	05d0      	lsls	r0, r2, #23
 8000a40:	d519      	bpl.n	8000a76 <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a42:	68a2      	ldr	r2, [r4, #8]
 8000a44:	4b28      	ldr	r3, [pc, #160]	; (8000ae8 <HAL_RCC_OscConfig+0x268>)
 8000a46:	2a01      	cmp	r2, #1
 8000a48:	d126      	bne.n	8000a98 <HAL_RCC_OscConfig+0x218>
 8000a4a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000a4c:	f042 0201 	orr.w	r2, r2, #1
 8000a50:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000a52:	f7ff fdcb 	bl	80005ec <HAL_GetTick>
 8000a56:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000a58:	4b23      	ldr	r3, [pc, #140]	; (8000ae8 <HAL_RCC_OscConfig+0x268>)
 8000a5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000a5c:	079a      	lsls	r2, r3, #30
 8000a5e:	d53b      	bpl.n	8000ad8 <HAL_RCC_OscConfig+0x258>
    if(pwrclkchanged == SET)
 8000a60:	2d00      	cmp	r5, #0
 8000a62:	f43f af20 	beq.w	80008a6 <HAL_RCC_OscConfig+0x26>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000a66:	4a20      	ldr	r2, [pc, #128]	; (8000ae8 <HAL_RCC_OscConfig+0x268>)
 8000a68:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000a6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000a6e:	6413      	str	r3, [r2, #64]	; 0x40
 8000a70:	e719      	b.n	80008a6 <HAL_RCC_OscConfig+0x26>
    FlagStatus       pwrclkchanged = RESET;
 8000a72:	2500      	movs	r5, #0
 8000a74:	e7e1      	b.n	8000a3a <HAL_RCC_OscConfig+0x1ba>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000a76:	681a      	ldr	r2, [r3, #0]
 8000a78:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000a7c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000a7e:	f7ff fdb5 	bl	80005ec <HAL_GetTick>
 8000a82:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a84:	4b1b      	ldr	r3, [pc, #108]	; (8000af4 <HAL_RCC_OscConfig+0x274>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	05d9      	lsls	r1, r3, #23
 8000a8a:	d4da      	bmi.n	8000a42 <HAL_RCC_OscConfig+0x1c2>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000a8c:	f7ff fdae 	bl	80005ec <HAL_GetTick>
 8000a90:	1b80      	subs	r0, r0, r6
 8000a92:	2802      	cmp	r0, #2
 8000a94:	d9f6      	bls.n	8000a84 <HAL_RCC_OscConfig+0x204>
 8000a96:	e737      	b.n	8000908 <HAL_RCC_OscConfig+0x88>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a98:	2a05      	cmp	r2, #5
 8000a9a:	d104      	bne.n	8000aa6 <HAL_RCC_OscConfig+0x226>
 8000a9c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000a9e:	f042 0204 	orr.w	r2, r2, #4
 8000aa2:	671a      	str	r2, [r3, #112]	; 0x70
 8000aa4:	e7d1      	b.n	8000a4a <HAL_RCC_OscConfig+0x1ca>
 8000aa6:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8000aa8:	f021 0101 	bic.w	r1, r1, #1
 8000aac:	6719      	str	r1, [r3, #112]	; 0x70
 8000aae:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8000ab0:	f021 0104 	bic.w	r1, r1, #4
 8000ab4:	6719      	str	r1, [r3, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000ab6:	2a00      	cmp	r2, #0
 8000ab8:	d1cb      	bne.n	8000a52 <HAL_RCC_OscConfig+0x1d2>
      tickstart = HAL_GetTick();
 8000aba:	f7ff fd97 	bl	80005ec <HAL_GetTick>
 8000abe:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ac0:	4b09      	ldr	r3, [pc, #36]	; (8000ae8 <HAL_RCC_OscConfig+0x268>)
 8000ac2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ac4:	079b      	lsls	r3, r3, #30
 8000ac6:	d5cb      	bpl.n	8000a60 <HAL_RCC_OscConfig+0x1e0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ac8:	f7ff fd90 	bl	80005ec <HAL_GetTick>
 8000acc:	f241 3388 	movw	r3, #5000	; 0x1388
 8000ad0:	1b80      	subs	r0, r0, r6
 8000ad2:	4298      	cmp	r0, r3
 8000ad4:	d9f4      	bls.n	8000ac0 <HAL_RCC_OscConfig+0x240>
 8000ad6:	e717      	b.n	8000908 <HAL_RCC_OscConfig+0x88>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ad8:	f7ff fd88 	bl	80005ec <HAL_GetTick>
 8000adc:	f241 3388 	movw	r3, #5000	; 0x1388
 8000ae0:	1b80      	subs	r0, r0, r6
 8000ae2:	4298      	cmp	r0, r3
 8000ae4:	d9b8      	bls.n	8000a58 <HAL_RCC_OscConfig+0x1d8>
 8000ae6:	e70f      	b.n	8000908 <HAL_RCC_OscConfig+0x88>
 8000ae8:	40023800 	.word	0x40023800
 8000aec:	42470000 	.word	0x42470000
 8000af0:	42470e80 	.word	0x42470e80
 8000af4:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000af8:	4a34      	ldr	r2, [pc, #208]	; (8000bcc <HAL_RCC_OscConfig+0x34c>)
 8000afa:	6893      	ldr	r3, [r2, #8]
 8000afc:	f003 030c 	and.w	r3, r3, #12
 8000b00:	2b08      	cmp	r3, #8
 8000b02:	d03e      	beq.n	8000b82 <HAL_RCC_OscConfig+0x302>
 8000b04:	4d32      	ldr	r5, [pc, #200]	; (8000bd0 <HAL_RCC_OscConfig+0x350>)
 8000b06:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b08:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8000b0a:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b0c:	d12b      	bne.n	8000b66 <HAL_RCC_OscConfig+0x2e6>
        tickstart = HAL_GetTick();
 8000b0e:	f7ff fd6d 	bl	80005ec <HAL_GetTick>
 8000b12:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000b14:	492d      	ldr	r1, [pc, #180]	; (8000bcc <HAL_RCC_OscConfig+0x34c>)
 8000b16:	680b      	ldr	r3, [r1, #0]
 8000b18:	0198      	lsls	r0, r3, #6
 8000b1a:	d41e      	bmi.n	8000b5a <HAL_RCC_OscConfig+0x2da>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000b1c:	6a22      	ldr	r2, [r4, #32]
 8000b1e:	69e3      	ldr	r3, [r4, #28]
 8000b20:	4313      	orrs	r3, r2
 8000b22:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000b24:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000b28:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000b2a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000b2e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000b30:	0852      	lsrs	r2, r2, #1
 8000b32:	3a01      	subs	r2, #1
 8000b34:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b38:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000b3e:	f7ff fd55 	bl	80005ec <HAL_GetTick>
 8000b42:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000b44:	4b21      	ldr	r3, [pc, #132]	; (8000bcc <HAL_RCC_OscConfig+0x34c>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	019a      	lsls	r2, r3, #6
 8000b4a:	f53f aeb0 	bmi.w	80008ae <HAL_RCC_OscConfig+0x2e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b4e:	f7ff fd4d 	bl	80005ec <HAL_GetTick>
 8000b52:	1b00      	subs	r0, r0, r4
 8000b54:	2802      	cmp	r0, #2
 8000b56:	d9f5      	bls.n	8000b44 <HAL_RCC_OscConfig+0x2c4>
 8000b58:	e6d6      	b.n	8000908 <HAL_RCC_OscConfig+0x88>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b5a:	f7ff fd47 	bl	80005ec <HAL_GetTick>
 8000b5e:	1b80      	subs	r0, r0, r6
 8000b60:	2802      	cmp	r0, #2
 8000b62:	d9d7      	bls.n	8000b14 <HAL_RCC_OscConfig+0x294>
 8000b64:	e6d0      	b.n	8000908 <HAL_RCC_OscConfig+0x88>
        tickstart = HAL_GetTick();
 8000b66:	f7ff fd41 	bl	80005ec <HAL_GetTick>
 8000b6a:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000b6c:	4b17      	ldr	r3, [pc, #92]	; (8000bcc <HAL_RCC_OscConfig+0x34c>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	019b      	lsls	r3, r3, #6
 8000b72:	f57f ae9c 	bpl.w	80008ae <HAL_RCC_OscConfig+0x2e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b76:	f7ff fd39 	bl	80005ec <HAL_GetTick>
 8000b7a:	1b00      	subs	r0, r0, r4
 8000b7c:	2802      	cmp	r0, #2
 8000b7e:	d9f5      	bls.n	8000b6c <HAL_RCC_OscConfig+0x2ec>
 8000b80:	e6c2      	b.n	8000908 <HAL_RCC_OscConfig+0x88>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000b82:	2801      	cmp	r0, #1
 8000b84:	f43f aec1 	beq.w	800090a <HAL_RCC_OscConfig+0x8a>
        pll_config = RCC->CFGR;
 8000b88:	6890      	ldr	r0, [r2, #8]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000b8a:	69e3      	ldr	r3, [r4, #28]
 8000b8c:	f400 0280 	and.w	r2, r0, #4194304	; 0x400000
 8000b90:	429a      	cmp	r2, r3
 8000b92:	f47f ae78 	bne.w	8000886 <HAL_RCC_OscConfig+0x6>
 8000b96:	6a22      	ldr	r2, [r4, #32]
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000b98:	f000 033f 	and.w	r3, r0, #63	; 0x3f
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000b9c:	4293      	cmp	r3, r2
 8000b9e:	f47f ae72 	bne.w	8000886 <HAL_RCC_OscConfig+0x6>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000ba2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000ba4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8000ba8:	4003      	ands	r3, r0
 8000baa:	4293      	cmp	r3, r2
 8000bac:	f47f ae6b 	bne.w	8000886 <HAL_RCC_OscConfig+0x6>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8000bb0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000bb2:	f400 3340 	and.w	r3, r0, #196608	; 0x30000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	f47f ae65 	bne.w	8000886 <HAL_RCC_OscConfig+0x6>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000bbc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8000bbe:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
    return HAL_ERROR;
 8000bc2:	1ac0      	subs	r0, r0, r3
 8000bc4:	bf18      	it	ne
 8000bc6:	2001      	movne	r0, #1
 8000bc8:	e69f      	b.n	800090a <HAL_RCC_OscConfig+0x8a>
 8000bca:	bf00      	nop
 8000bcc:	40023800 	.word	0x40023800
 8000bd0:	42470060 	.word	0x42470060

08000bd4 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000bd4:	4913      	ldr	r1, [pc, #76]	; (8000c24 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8000bd6:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000bd8:	688b      	ldr	r3, [r1, #8]
 8000bda:	f003 030c 	and.w	r3, r3, #12
 8000bde:	2b04      	cmp	r3, #4
 8000be0:	d003      	beq.n	8000bea <HAL_RCC_GetSysClockFreq+0x16>
 8000be2:	2b08      	cmp	r3, #8
 8000be4:	d003      	beq.n	8000bee <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000be6:	4810      	ldr	r0, [pc, #64]	; (8000c28 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000be8:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8000bea:	4810      	ldr	r0, [pc, #64]	; (8000c2c <HAL_RCC_GetSysClockFreq+0x58>)
 8000bec:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000bee:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000bf0:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000bf2:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000bf4:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000bf8:	bf14      	ite	ne
 8000bfa:	480c      	ldrne	r0, [pc, #48]	; (8000c2c <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000bfc:	480a      	ldreq	r0, [pc, #40]	; (8000c28 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000bfe:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000c02:	bf18      	it	ne
 8000c04:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000c06:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c0a:	fba1 0100 	umull	r0, r1, r1, r0
 8000c0e:	f7ff faf1 	bl	80001f4 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000c12:	4b04      	ldr	r3, [pc, #16]	; (8000c24 <HAL_RCC_GetSysClockFreq+0x50>)
 8000c14:	685b      	ldr	r3, [r3, #4]
 8000c16:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000c1a:	3301      	adds	r3, #1
 8000c1c:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8000c1e:	fbb0 f0f3 	udiv	r0, r0, r3
 8000c22:	bd08      	pop	{r3, pc}
 8000c24:	40023800 	.word	0x40023800
 8000c28:	00f42400 	.word	0x00f42400
 8000c2c:	017d7840 	.word	0x017d7840

08000c30 <HAL_RCC_ClockConfig>:
{
 8000c30:	b570      	push	{r4, r5, r6, lr}
 8000c32:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000c34:	4604      	mov	r4, r0
 8000c36:	b908      	cbnz	r0, 8000c3c <HAL_RCC_ClockConfig+0xc>
    return HAL_ERROR;
 8000c38:	2001      	movs	r0, #1
 8000c3a:	bd70      	pop	{r4, r5, r6, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000c3c:	4b44      	ldr	r3, [pc, #272]	; (8000d50 <HAL_RCC_ClockConfig+0x120>)
 8000c3e:	681a      	ldr	r2, [r3, #0]
 8000c40:	f002 020f 	and.w	r2, r2, #15
 8000c44:	428a      	cmp	r2, r1
 8000c46:	d328      	bcc.n	8000c9a <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000c48:	6821      	ldr	r1, [r4, #0]
 8000c4a:	078b      	lsls	r3, r1, #30
 8000c4c:	d42d      	bmi.n	8000caa <HAL_RCC_ClockConfig+0x7a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000c4e:	07c8      	lsls	r0, r1, #31
 8000c50:	d440      	bmi.n	8000cd4 <HAL_RCC_ClockConfig+0xa4>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000c52:	4b3f      	ldr	r3, [pc, #252]	; (8000d50 <HAL_RCC_ClockConfig+0x120>)
 8000c54:	681a      	ldr	r2, [r3, #0]
 8000c56:	f002 020f 	and.w	r2, r2, #15
 8000c5a:	4295      	cmp	r5, r2
 8000c5c:	d366      	bcc.n	8000d2c <HAL_RCC_ClockConfig+0xfc>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000c5e:	6822      	ldr	r2, [r4, #0]
 8000c60:	0751      	lsls	r1, r2, #29
 8000c62:	d46c      	bmi.n	8000d3e <HAL_RCC_ClockConfig+0x10e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000c64:	0713      	lsls	r3, r2, #28
 8000c66:	d507      	bpl.n	8000c78 <HAL_RCC_ClockConfig+0x48>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000c68:	4a3a      	ldr	r2, [pc, #232]	; (8000d54 <HAL_RCC_ClockConfig+0x124>)
 8000c6a:	6921      	ldr	r1, [r4, #16]
 8000c6c:	6893      	ldr	r3, [r2, #8]
 8000c6e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000c72:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000c76:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000c78:	f7ff ffac 	bl	8000bd4 <HAL_RCC_GetSysClockFreq>
 8000c7c:	4b35      	ldr	r3, [pc, #212]	; (8000d54 <HAL_RCC_ClockConfig+0x124>)
 8000c7e:	4a36      	ldr	r2, [pc, #216]	; (8000d58 <HAL_RCC_ClockConfig+0x128>)
 8000c80:	689b      	ldr	r3, [r3, #8]
 8000c82:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000c86:	5cd3      	ldrb	r3, [r2, r3]
 8000c88:	40d8      	lsrs	r0, r3
 8000c8a:	4b34      	ldr	r3, [pc, #208]	; (8000d5c <HAL_RCC_ClockConfig+0x12c>)
 8000c8c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8000c8e:	4b34      	ldr	r3, [pc, #208]	; (8000d60 <HAL_RCC_ClockConfig+0x130>)
 8000c90:	6818      	ldr	r0, [r3, #0]
 8000c92:	f7ff fc61 	bl	8000558 <HAL_InitTick>
  return HAL_OK;
 8000c96:	2000      	movs	r0, #0
 8000c98:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c9a:	b2ca      	uxtb	r2, r1
 8000c9c:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	f003 030f 	and.w	r3, r3, #15
 8000ca4:	4299      	cmp	r1, r3
 8000ca6:	d1c7      	bne.n	8000c38 <HAL_RCC_ClockConfig+0x8>
 8000ca8:	e7ce      	b.n	8000c48 <HAL_RCC_ClockConfig+0x18>
 8000caa:	4b2a      	ldr	r3, [pc, #168]	; (8000d54 <HAL_RCC_ClockConfig+0x124>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000cac:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000cb0:	bf1e      	ittt	ne
 8000cb2:	689a      	ldrne	r2, [r3, #8]
 8000cb4:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8000cb8:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000cba:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000cbc:	bf42      	ittt	mi
 8000cbe:	689a      	ldrmi	r2, [r3, #8]
 8000cc0:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8000cc4:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000cc6:	689a      	ldr	r2, [r3, #8]
 8000cc8:	68a0      	ldr	r0, [r4, #8]
 8000cca:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000cce:	4302      	orrs	r2, r0
 8000cd0:	609a      	str	r2, [r3, #8]
 8000cd2:	e7bc      	b.n	8000c4e <HAL_RCC_ClockConfig+0x1e>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000cd4:	6862      	ldr	r2, [r4, #4]
 8000cd6:	4b1f      	ldr	r3, [pc, #124]	; (8000d54 <HAL_RCC_ClockConfig+0x124>)
 8000cd8:	2a01      	cmp	r2, #1
 8000cda:	d11d      	bne.n	8000d18 <HAL_RCC_ClockConfig+0xe8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ce2:	d0a9      	beq.n	8000c38 <HAL_RCC_ClockConfig+0x8>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000ce4:	491b      	ldr	r1, [pc, #108]	; (8000d54 <HAL_RCC_ClockConfig+0x124>)
 8000ce6:	688b      	ldr	r3, [r1, #8]
 8000ce8:	f023 0303 	bic.w	r3, r3, #3
 8000cec:	4313      	orrs	r3, r2
 8000cee:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8000cf0:	f7ff fc7c 	bl	80005ec <HAL_GetTick>
 8000cf4:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000cf6:	4b17      	ldr	r3, [pc, #92]	; (8000d54 <HAL_RCC_ClockConfig+0x124>)
 8000cf8:	6862      	ldr	r2, [r4, #4]
 8000cfa:	689b      	ldr	r3, [r3, #8]
 8000cfc:	f003 030c 	and.w	r3, r3, #12
 8000d00:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000d04:	d0a5      	beq.n	8000c52 <HAL_RCC_ClockConfig+0x22>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d06:	f7ff fc71 	bl	80005ec <HAL_GetTick>
 8000d0a:	f241 3388 	movw	r3, #5000	; 0x1388
 8000d0e:	1b80      	subs	r0, r0, r6
 8000d10:	4298      	cmp	r0, r3
 8000d12:	d9f0      	bls.n	8000cf6 <HAL_RCC_ClockConfig+0xc6>
        return HAL_TIMEOUT;
 8000d14:	2003      	movs	r0, #3
}
 8000d16:	bd70      	pop	{r4, r5, r6, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000d18:	1e91      	subs	r1, r2, #2
 8000d1a:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d1c:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000d1e:	d802      	bhi.n	8000d26 <HAL_RCC_ClockConfig+0xf6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d20:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000d24:	e7dd      	b.n	8000ce2 <HAL_RCC_ClockConfig+0xb2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d26:	f013 0f02 	tst.w	r3, #2
 8000d2a:	e7da      	b.n	8000ce2 <HAL_RCC_ClockConfig+0xb2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d2c:	b2ea      	uxtb	r2, r5
 8000d2e:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f003 030f 	and.w	r3, r3, #15
 8000d36:	429d      	cmp	r5, r3
 8000d38:	f47f af7e 	bne.w	8000c38 <HAL_RCC_ClockConfig+0x8>
 8000d3c:	e78f      	b.n	8000c5e <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000d3e:	4905      	ldr	r1, [pc, #20]	; (8000d54 <HAL_RCC_ClockConfig+0x124>)
 8000d40:	68e0      	ldr	r0, [r4, #12]
 8000d42:	688b      	ldr	r3, [r1, #8]
 8000d44:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000d48:	4303      	orrs	r3, r0
 8000d4a:	608b      	str	r3, [r1, #8]
 8000d4c:	e78a      	b.n	8000c64 <HAL_RCC_ClockConfig+0x34>
 8000d4e:	bf00      	nop
 8000d50:	40023c00 	.word	0x40023c00
 8000d54:	40023800 	.word	0x40023800
 8000d58:	080014b0 	.word	0x080014b0
 8000d5c:	20000008 	.word	0x20000008
 8000d60:	20000004 	.word	0x20000004

08000d64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d64:	b510      	push	{r4, lr}
 8000d66:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d68:	2230      	movs	r2, #48	; 0x30
 8000d6a:	2100      	movs	r1, #0
 8000d6c:	a808      	add	r0, sp, #32
 8000d6e:	f000 fab5 	bl	80012dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d72:	2100      	movs	r1, #0
 8000d74:	2214      	movs	r2, #20
 8000d76:	a803      	add	r0, sp, #12
 8000d78:	f000 fab0 	bl	80012dc <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d7c:	2400      	movs	r4, #0
 8000d7e:	4b17      	ldr	r3, [pc, #92]	; (8000ddc <SystemClock_Config+0x78>)
 8000d80:	9401      	str	r4, [sp, #4]
 8000d82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d84:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000d88:	641a      	str	r2, [r3, #64]	; 0x40
 8000d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d90:	9301      	str	r3, [sp, #4]
 8000d92:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d94:	4b12      	ldr	r3, [pc, #72]	; (8000de0 <SystemClock_Config+0x7c>)
 8000d96:	9402      	str	r4, [sp, #8]
 8000d98:	681a      	ldr	r2, [r3, #0]
 8000d9a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000d9e:	601a      	str	r2, [r3, #0]
 8000da0:	681b      	ldr	r3, [r3, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000da2:	940e      	str	r4, [sp, #56]	; 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000da4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000da8:	9302      	str	r3, [sp, #8]
 8000daa:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000dac:	2302      	movs	r3, #2
 8000dae:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000db0:	2301      	movs	r3, #1
 8000db2:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000db4:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000db6:	2310      	movs	r3, #16
 8000db8:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dba:	f7ff fd61 	bl	8000880 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dbe:	230f      	movs	r3, #15
 8000dc0:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000dc2:	4621      	mov	r1, r4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000dc4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000dc8:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000dca:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dcc:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000dce:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8000dd0:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000dd2:	f7ff ff2d 	bl	8000c30 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8000dd6:	b014      	add	sp, #80	; 0x50
 8000dd8:	bd10      	pop	{r4, pc}
 8000dda:	bf00      	nop
 8000ddc:	40023800 	.word	0x40023800
 8000de0:	40007000 	.word	0x40007000

08000de4 <main>:
{
 8000de4:	b500      	push	{lr}
 8000de6:	b089      	sub	sp, #36	; 0x24
  HAL_Init();
 8000de8:	f7ff fbda 	bl	80005a0 <HAL_Init>
  SystemClock_Config();
 8000dec:	f7ff ffba 	bl	8000d64 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df0:	2214      	movs	r2, #20
 8000df2:	2100      	movs	r1, #0
 8000df4:	a803      	add	r0, sp, #12
 8000df6:	f000 fa71 	bl	80012dc <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dfa:	2400      	movs	r4, #0
 8000dfc:	4b2c      	ldr	r3, [pc, #176]	; (8000eb0 <main+0xcc>)
 8000dfe:	9400      	str	r4, [sp, #0]
 8000e00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_Pin|GPIO_PIN_10, GPIO_PIN_RESET);
 8000e02:	482c      	ldr	r0, [pc, #176]	; (8000eb4 <main+0xd0>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e04:	f042 0204 	orr.w	r2, r2, #4
 8000e08:	631a      	str	r2, [r3, #48]	; 0x30
 8000e0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e0c:	f002 0204 	and.w	r2, r2, #4
 8000e10:	9200      	str	r2, [sp, #0]
 8000e12:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e14:	9401      	str	r4, [sp, #4]
 8000e16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e18:	f042 0202 	orr.w	r2, r2, #2
 8000e1c:	631a      	str	r2, [r3, #48]	; 0x30
 8000e1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e20:	f002 0202 	and.w	r2, r2, #2
 8000e24:	9201      	str	r2, [sp, #4]
 8000e26:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e28:	9402      	str	r4, [sp, #8]
 8000e2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e2c:	f042 0201 	orr.w	r2, r2, #1
 8000e30:	631a      	str	r2, [r3, #48]	; 0x30
 8000e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e34:	f003 0301 	and.w	r3, r3, #1
 8000e38:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOC, LED_Pin|GPIO_PIN_10, GPIO_PIN_RESET);
 8000e3a:	4622      	mov	r2, r4
 8000e3c:	f240 4101 	movw	r1, #1025	; 0x401
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e40:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOC, LED_Pin|GPIO_PIN_10, GPIO_PIN_RESET);
 8000e42:	f7ff fd17 	bl	8000874 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_15 
 8000e46:	4622      	mov	r2, r4
 8000e48:	f64c 51c0 	movw	r1, #52672	; 0xcdc0
 8000e4c:	481a      	ldr	r0, [pc, #104]	; (8000eb8 <main+0xd4>)
 8000e4e:	f7ff fd11 	bl	8000874 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PWR_EN_GPIO_Port, PWR_EN_Pin, GPIO_PIN_SET);
 8000e52:	2201      	movs	r2, #1
 8000e54:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e58:	4817      	ldr	r0, [pc, #92]	; (8000eb8 <main+0xd4>)
 8000e5a:	f7ff fd0b 	bl	8000874 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_Pin PC10 */
  GPIO_InitStruct.Pin = LED_Pin|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e5e:	2501      	movs	r5, #1
  GPIO_InitStruct.Pin = LED_Pin|GPIO_PIN_10;
 8000e60:	f240 4301 	movw	r3, #1025	; 0x401
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e64:	a903      	add	r1, sp, #12
 8000e66:	4813      	ldr	r0, [pc, #76]	; (8000eb4 <main+0xd0>)
  GPIO_InitStruct.Pin = LED_Pin|GPIO_PIN_10;
 8000e68:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e6a:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6c:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6e:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e70:	f7ff fc2e 	bl	80006d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 PWR_EN_Pin PB14 
                           PB15 PB6 PB7 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|PWR_EN_Pin|GPIO_PIN_14 
 8000e74:	f64d 53c0 	movw	r3, #56768	; 0xddc0
                          |GPIO_PIN_15|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e78:	a903      	add	r1, sp, #12
 8000e7a:	480f      	ldr	r0, [pc, #60]	; (8000eb8 <main+0xd4>)
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|PWR_EN_Pin|GPIO_PIN_14 
 8000e7c:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e7e:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e80:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e82:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e84:	f7ff fc24 	bl	80006d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_SNS_Pin */
  GPIO_InitStruct.Pin = BTN_SNS_Pin;
 8000e88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(BTN_SNS_GPIO_Port, &GPIO_InitStruct);
 8000e8c:	a903      	add	r1, sp, #12
 8000e8e:	480b      	ldr	r0, [pc, #44]	; (8000ebc <main+0xd8>)
  GPIO_InitStruct.Pin = BTN_SNS_Pin;
 8000e90:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e92:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e94:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(BTN_SNS_GPIO_Port, &GPIO_InitStruct);
 8000e96:	f7ff fc1b 	bl	80006d0 <HAL_GPIO_Init>
  hcrc.Instance = CRC;
 8000e9a:	4809      	ldr	r0, [pc, #36]	; (8000ec0 <main+0xdc>)
 8000e9c:	4b09      	ldr	r3, [pc, #36]	; (8000ec4 <main+0xe0>)
 8000e9e:	6003      	str	r3, [r0, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000ea0:	f7ff fc06 	bl	80006b0 <HAL_CRC_Init>
  init();
 8000ea4:	f000 f900 	bl	80010a8 <init>
      loop();
 8000ea8:	f000 f95a 	bl	8001160 <loop>
 8000eac:	e7fc      	b.n	8000ea8 <main+0xc4>
 8000eae:	bf00      	nop
 8000eb0:	40023800 	.word	0x40023800
 8000eb4:	40020800 	.word	0x40020800
 8000eb8:	40020400 	.word	0x40020400
 8000ebc:	40020000 	.word	0x40020000
 8000ec0:	20000474 	.word	0x20000474
 8000ec4:	40023000 	.word	0x40023000

08000ec8 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ec8:	490f      	ldr	r1, [pc, #60]	; (8000f08 <SystemInit+0x40>)
 8000eca:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8000ece:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ed2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000ed6:	4b0d      	ldr	r3, [pc, #52]	; (8000f0c <SystemInit+0x44>)
 8000ed8:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000eda:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8000edc:	f042 0201 	orr.w	r2, r2, #1
 8000ee0:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8000ee2:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000ee4:	681a      	ldr	r2, [r3, #0]
 8000ee6:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8000eea:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000eee:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000ef0:	4a07      	ldr	r2, [pc, #28]	; (8000f10 <SystemInit+0x48>)
 8000ef2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000ef4:	681a      	ldr	r2, [r3, #0]
 8000ef6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000efa:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000efc:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000efe:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000f02:	608b      	str	r3, [r1, #8]
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	e000ed00 	.word	0xe000ed00
 8000f0c:	40023800 	.word	0x40023800
 8000f10:	24003010 	.word	0x24003010

08000f14 <NMI_Handler>:
 8000f14:	4770      	bx	lr

08000f16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f16:	e7fe      	b.n	8000f16 <HardFault_Handler>

08000f18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f18:	e7fe      	b.n	8000f18 <MemManage_Handler>

08000f1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f1a:	e7fe      	b.n	8000f1a <BusFault_Handler>

08000f1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f1c:	e7fe      	b.n	8000f1c <UsageFault_Handler>

08000f1e <SVC_Handler>:
 8000f1e:	4770      	bx	lr

08000f20 <DebugMon_Handler>:
 8000f20:	4770      	bx	lr

08000f22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f22:	4770      	bx	lr

08000f24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f24:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */
    
    systick_callback();
 8000f26:	f000 f893 	bl	8001050 <systick_callback>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f2a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_IncTick();
 8000f2e:	f7ff bb51 	b.w	80005d4 <HAL_IncTick>
	...

08000f34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f34:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f36:	4b0c      	ldr	r3, [pc, #48]	; (8000f68 <HAL_MspInit+0x34>)
 8000f38:	2100      	movs	r1, #0
 8000f3a:	9100      	str	r1, [sp, #0]
 8000f3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000f3e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000f42:	645a      	str	r2, [r3, #68]	; 0x44
 8000f44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000f46:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000f4a:	9200      	str	r2, [sp, #0]
 8000f4c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f4e:	9101      	str	r1, [sp, #4]
 8000f50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f52:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000f56:	641a      	str	r2, [r3, #64]	; 0x40
 8000f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f5e:	9301      	str	r3, [sp, #4]
 8000f60:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f62:	b002      	add	sp, #8
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	40023800 	.word	0x40023800

08000f6c <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 8000f6c:	6802      	ldr	r2, [r0, #0]
 8000f6e:	4b09      	ldr	r3, [pc, #36]	; (8000f94 <HAL_CRC_MspInit+0x28>)
 8000f70:	429a      	cmp	r2, r3
{
 8000f72:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 8000f74:	d10b      	bne.n	8000f8e <HAL_CRC_MspInit+0x22>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000f76:	2300      	movs	r3, #0
 8000f78:	9301      	str	r3, [sp, #4]
 8000f7a:	4b07      	ldr	r3, [pc, #28]	; (8000f98 <HAL_CRC_MspInit+0x2c>)
 8000f7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f7e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000f82:	631a      	str	r2, [r3, #48]	; 0x30
 8000f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f86:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f8a:	9301      	str	r3, [sp, #4]
 8000f8c:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000f8e:	b002      	add	sp, #8
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	40023000 	.word	0x40023000
 8000f98:	40023800 	.word	0x40023800

08000f9c <goto_app>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f9c:	b672      	cpsid	i
uint32_t countdown_turn_off = 10000;

static void goto_app(void)
{
    __disable_irq();
    LED_GPIO_Port->ODR |= LED_Pin;
 8000f9e:	4a06      	ldr	r2, [pc, #24]	; (8000fb8 <goto_app+0x1c>)
 8000fa0:	6953      	ldr	r3, [r2, #20]
 8000fa2:	f043 0301 	orr.w	r3, r3, #1
 8000fa6:	6153      	str	r3, [r2, #20]

    typedef void (*app_entry_t)(void);
    app_entry_t app = (app_entry_t)(*(uint32_t *)(ADDR_APP));
 8000fa8:	4a04      	ldr	r2, [pc, #16]	; (8000fbc <goto_app+0x20>)
 8000faa:	6813      	ldr	r3, [r2, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000fac:	f383 8808 	msr	MSP, r3

    __set_MSP(*(uint32_t *)(ADDR_APP));
    SCB->VTOR = ADDR_APP;
 8000fb0:	4903      	ldr	r1, [pc, #12]	; (8000fc0 <goto_app+0x24>)
 8000fb2:	608a      	str	r2, [r1, #8]
    app();
 8000fb4:	4718      	bx	r3
 8000fb6:	bf00      	nop
 8000fb8:	40020800 	.word	0x40020800
 8000fbc:	08020000 	.word	0x08020000
 8000fc0:	e000ed00 	.word	0xe000ed00

08000fc4 <copy_image>:
    }
    return true;
}

static void copy_image(void)
{
 8000fc4:	b508      	push	{r3, lr}
    FLASH_Unlock();
 8000fc6:	f000 f8e7 	bl	8001198 <FLASH_Unlock>
    FLASH_ClearFlag(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR);
 8000fca:	20f3      	movs	r0, #243	; 0xf3
 8000fcc:	f000 f8f2 	bl	80011b4 <FLASH_ClearFlag>
    FLASH_EraseSector(FLASH_Sector_5, VoltageRange_1);
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	2028      	movs	r0, #40	; 0x28
 8000fd4:	f000 f924 	bl	8001220 <FLASH_EraseSector>
    FLASH_EraseSector(FLASH_Sector_6, VoltageRange_1);
 8000fd8:	2100      	movs	r1, #0
 8000fda:	2030      	movs	r0, #48	; 0x30
 8000fdc:	f000 f920 	bl	8001220 <FLASH_EraseSector>

    FLASH_ClearFlag(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR);
 8000fe0:	20f3      	movs	r0, #243	; 0xf3
    // const uint8_t *data = (uint8_t *)ADDR_APP_IMAGE;
    // for(uint32_t i = ADDR_APP_IMAGE; i <= app_image_end; i++)
    // {
    //     FLASH_ProgramByte(ADDR_APP + i, data[i]);
    // }
}
 8000fe2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    FLASH_ClearFlag(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR);
 8000fe6:	f000 b8e5 	b.w	80011b4 <FLASH_ClearFlag>
	...

08000fec <flash_led.constprop.0>:

static void flash_led(uint32_t count, uint32_t period_flash)
{
    flash_fast = false;
 8000fec:	4a15      	ldr	r2, [pc, #84]	; (8001044 <flash_led.constprop.0+0x58>)

    for(flash_counter = 0; flash_counter < count * period_flash * 2;)
 8000fee:	4b16      	ldr	r3, [pc, #88]	; (8001048 <flash_led.constprop.0+0x5c>)
    flash_fast = false;
 8000ff0:	2100      	movs	r1, #0
static void flash_led(uint32_t count, uint32_t period_flash)
 8000ff2:	b530      	push	{r4, r5, lr}
    flash_fast = false;
 8000ff4:	7011      	strb	r1, [r2, #0]
    for(flash_counter = 0; flash_counter < count * period_flash * 2;)
 8000ff6:	6019      	str	r1, [r3, #0]
 8000ff8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000ffc:	4348      	muls	r0, r1
 8000ffe:	6819      	ldr	r1, [r3, #0]
 8001000:	4288      	cmp	r0, r1
 8001002:	d802      	bhi.n	800100a <flash_led.constprop.0+0x1e>
        {
            asm("nop");
        }
    }

    flash_fast = true;
 8001004:	2301      	movs	r3, #1
 8001006:	7013      	strb	r3, [r2, #0]
 8001008:	bd30      	pop	{r4, r5, pc}
        if((flash_counter % (2 * period_flash)) == 0)
 800100a:	681d      	ldr	r5, [r3, #0]
 800100c:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8001010:	fbb5 f1f4 	udiv	r1, r5, r4
 8001014:	fb04 5111 	mls	r1, r4, r1, r5
 8001018:	b929      	cbnz	r1, 8001026 <flash_led.constprop.0+0x3a>
            LED_GPIO_Port->ODR |= LED_Pin;
 800101a:	4c0c      	ldr	r4, [pc, #48]	; (800104c <flash_led.constprop.0+0x60>)
 800101c:	6961      	ldr	r1, [r4, #20]
 800101e:	f041 0101 	orr.w	r1, r1, #1
            LED_GPIO_Port->ODR &= (uint32_t) ~(LED_Pin);
 8001022:	6161      	str	r1, [r4, #20]
 8001024:	e7eb      	b.n	8000ffe <flash_led.constprop.0+0x12>
        else if((flash_counter % period_flash) == 0)
 8001026:	681d      	ldr	r5, [r3, #0]
 8001028:	f44f 74fa 	mov.w	r4, #500	; 0x1f4
 800102c:	fbb5 f1f4 	udiv	r1, r5, r4
 8001030:	fb04 5111 	mls	r1, r4, r1, r5
 8001034:	b921      	cbnz	r1, 8001040 <flash_led.constprop.0+0x54>
            LED_GPIO_Port->ODR &= (uint32_t) ~(LED_Pin);
 8001036:	4c05      	ldr	r4, [pc, #20]	; (800104c <flash_led.constprop.0+0x60>)
 8001038:	6961      	ldr	r1, [r4, #20]
 800103a:	f021 0101 	bic.w	r1, r1, #1
 800103e:	e7f0      	b.n	8001022 <flash_led.constprop.0+0x36>
            asm("nop");
 8001040:	bf00      	nop
 8001042:	e7dc      	b.n	8000ffe <flash_led.constprop.0+0x12>
 8001044:	20000010 	.word	0x20000010
 8001048:	20000464 	.word	0x20000464
 800104c:	40020800 	.word	0x40020800

08001050 <systick_callback>:
    time_up_ms++;
 8001050:	4a0f      	ldr	r2, [pc, #60]	; (8001090 <systick_callback+0x40>)
 8001052:	6813      	ldr	r3, [r2, #0]
 8001054:	3301      	adds	r3, #1
 8001056:	6013      	str	r3, [r2, #0]
    flash_counter++;
 8001058:	4a0e      	ldr	r2, [pc, #56]	; (8001094 <systick_callback+0x44>)
 800105a:	6813      	ldr	r3, [r2, #0]
 800105c:	3301      	adds	r3, #1
 800105e:	6013      	str	r3, [r2, #0]
    if(flash_fast)
 8001060:	4b0d      	ldr	r3, [pc, #52]	; (8001098 <systick_callback+0x48>)
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	b193      	cbz	r3, 800108c <systick_callback+0x3c>
        prev_tick++;
 8001066:	4a0d      	ldr	r2, [pc, #52]	; (800109c <systick_callback+0x4c>)
 8001068:	6813      	ldr	r3, [r2, #0]
 800106a:	3301      	adds	r3, #1
 800106c:	6013      	str	r3, [r2, #0]
        if((prev_tick % period) < 5)
 800106e:	4a0c      	ldr	r2, [pc, #48]	; (80010a0 <systick_callback+0x50>)
 8001070:	6811      	ldr	r1, [r2, #0]
 8001072:	fbb3 f2f1 	udiv	r2, r3, r1
 8001076:	fb01 3312 	mls	r3, r1, r2, r3
 800107a:	2b04      	cmp	r3, #4
 800107c:	4b09      	ldr	r3, [pc, #36]	; (80010a4 <systick_callback+0x54>)
            LED_GPIO_Port->ODR |= LED_Pin;
 800107e:	695a      	ldr	r2, [r3, #20]
 8001080:	bf94      	ite	ls
 8001082:	f042 0201 	orrls.w	r2, r2, #1
            LED_GPIO_Port->ODR &= (uint32_t) ~(LED_Pin);
 8001086:	f022 0201 	bichi.w	r2, r2, #1
 800108a:	615a      	str	r2, [r3, #20]
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	2000046c 	.word	0x2000046c
 8001094:	20000464 	.word	0x20000464
 8001098:	20000010 	.word	0x20000010
 800109c:	20000468 	.word	0x20000468
 80010a0:	20000014 	.word	0x20000014
 80010a4:	40020800 	.word	0x40020800

080010a8 <init>:
}

void init(void)
{
 80010a8:	b538      	push	{r3, r4, r5, lr}
 80010aa:	4924      	ldr	r1, [pc, #144]	; (800113c <init+0x94>)
        if(*_end != 0xFF) return (uint32_t)_end;
 80010ac:	780a      	ldrb	r2, [r1, #0]
 80010ae:	2aff      	cmp	r2, #255	; 0xff
 80010b0:	f101 33ff 	add.w	r3, r1, #4294967295
 80010b4:	d103      	bne.n	80010be <init+0x16>
 80010b6:	4619      	mov	r1, r3
    for(; _end > _start; _end--)
 80010b8:	4b21      	ldr	r3, [pc, #132]	; (8001140 <init+0x98>)
 80010ba:	4299      	cmp	r1, r3
 80010bc:	d1f6      	bne.n	80010ac <init+0x4>
    app_end = seek_flash_start(ADDR_APP, ADDR_APP + LEN_APP - 1);
 80010be:	4b21      	ldr	r3, [pc, #132]	; (8001144 <init+0x9c>)
    app_present = app_end != ADDR_APP;
 80010c0:	4a21      	ldr	r2, [pc, #132]	; (8001148 <init+0xa0>)
    app_end = seek_flash_start(ADDR_APP, ADDR_APP + LEN_APP - 1);
 80010c2:	6019      	str	r1, [r3, #0]
    app_present = app_end != ADDR_APP;
 80010c4:	4b1e      	ldr	r3, [pc, #120]	; (8001140 <init+0x98>)
 80010c6:	1acb      	subs	r3, r1, r3
 80010c8:	bf18      	it	ne
 80010ca:	2301      	movne	r3, #1
 80010cc:	7013      	strb	r3, [r2, #0]
 80010ce:	4b1f      	ldr	r3, [pc, #124]	; (800114c <init+0xa4>)
        if(*_end != 0xFF) return (uint32_t)_end;
 80010d0:	7818      	ldrb	r0, [r3, #0]
 80010d2:	28ff      	cmp	r0, #255	; 0xff
 80010d4:	f103 32ff 	add.w	r2, r3, #4294967295
 80010d8:	d103      	bne.n	80010e2 <init+0x3a>
 80010da:	4613      	mov	r3, r2
    for(; _end > _start; _end--)
 80010dc:	4a1c      	ldr	r2, [pc, #112]	; (8001150 <init+0xa8>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d1f6      	bne.n	80010d0 <init+0x28>

    app_image_end = seek_flash_start(ADDR_APP_IMAGE, ADDR_APP_IMAGE + LEN_APP_IMAGE - 1);
 80010e2:	4a1c      	ldr	r2, [pc, #112]	; (8001154 <init+0xac>)
    app_image_present = app_image_end != ADDR_APP_IMAGE;
 80010e4:	481c      	ldr	r0, [pc, #112]	; (8001158 <init+0xb0>)
    app_image_end = seek_flash_start(ADDR_APP_IMAGE, ADDR_APP_IMAGE + LEN_APP_IMAGE - 1);
 80010e6:	6013      	str	r3, [r2, #0]
    app_image_present = app_image_end != ADDR_APP_IMAGE;
 80010e8:	4a19      	ldr	r2, [pc, #100]	; (8001150 <init+0xa8>)
 80010ea:	1a9c      	subs	r4, r3, r2
 80010ec:	bf18      	it	ne
 80010ee:	2401      	movne	r4, #1
 80010f0:	7004      	strb	r4, [r0, #0]

    if(app_present == false && app_image_present == false)
 80010f2:	4813      	ldr	r0, [pc, #76]	; (8001140 <init+0x98>)
 80010f4:	4281      	cmp	r1, r0
 80010f6:	d106      	bne.n	8001106 <init+0x5e>
 80010f8:	4293      	cmp	r3, r2
 80010fa:	d115      	bne.n	8001128 <init+0x80>
    {
        countdown_turn_off = 2000;
 80010fc:	4b17      	ldr	r3, [pc, #92]	; (800115c <init+0xb4>)
 80010fe:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001102:	601a      	str	r2, [r3, #0]
 8001104:	bd38      	pop	{r3, r4, r5, pc}
    }

    else if(app_present && app_image_present == false)
 8001106:	4293      	cmp	r3, r2
 8001108:	d109      	bne.n	800111e <init+0x76>
    {
        copy_image();
        flash_led(3, 500);
        goto_app();
    }
}
 800110a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        goto_app();
 800110e:	f7ff bf45 	b.w	8000f9c <goto_app>
        if(*(uint8_t *)i != *(uint8_t *)j) return false;
 8001112:	f810 5b01 	ldrb.w	r5, [r0], #1
 8001116:	f812 4b01 	ldrb.w	r4, [r2], #1
 800111a:	42a5      	cmp	r5, r4
 800111c:	d10a      	bne.n	8001134 <init+0x8c>
    for(uint32_t i = ADDR_APP, j = ADDR_APP_IMAGE; i <= app_end || j < app_image_end; i++, j++)
 800111e:	4281      	cmp	r1, r0
 8001120:	d2f7      	bcs.n	8001112 <init+0x6a>
 8001122:	4293      	cmp	r3, r2
 8001124:	d8f5      	bhi.n	8001112 <init+0x6a>
 8001126:	e7f0      	b.n	800110a <init+0x62>
        copy_image();
 8001128:	f7ff ff4c 	bl	8000fc4 <copy_image>
        flash_led(3, 500);
 800112c:	2003      	movs	r0, #3
 800112e:	f7ff ff5d 	bl	8000fec <flash_led.constprop.0>
 8001132:	e7ea      	b.n	800110a <init+0x62>
            copy_image();
 8001134:	f7ff ff46 	bl	8000fc4 <copy_image>
            flash_led(2, 500);
 8001138:	2002      	movs	r0, #2
 800113a:	e7f8      	b.n	800112e <init+0x86>
 800113c:	0805ffff 	.word	0x0805ffff
 8001140:	08020000 	.word	0x08020000
 8001144:	2000047c 	.word	0x2000047c
 8001148:	20000461 	.word	0x20000461
 800114c:	0809ffff 	.word	0x0809ffff
 8001150:	08060000 	.word	0x08060000
 8001154:	20000480 	.word	0x20000480
 8001158:	20000460 	.word	0x20000460
 800115c:	2000000c 	.word	0x2000000c

08001160 <loop>:

void loop(void)
{
 8001160:	b508      	push	{r3, lr}
    if(time_up_ms > countdown_turn_off)
 8001162:	4b09      	ldr	r3, [pc, #36]	; (8001188 <loop+0x28>)
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	4b09      	ldr	r3, [pc, #36]	; (800118c <loop+0x2c>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	429a      	cmp	r2, r3
 800116c:	d90a      	bls.n	8001184 <loop+0x24>
    {
        flash_led(2, 500);
 800116e:	2002      	movs	r0, #2
 8001170:	f7ff ff3c 	bl	8000fec <flash_led.constprop.0>
        PWR_EN_GPIO_Port->ODR &= (uint32_t) ~(PWR_EN_Pin);
 8001174:	4a06      	ldr	r2, [pc, #24]	; (8001190 <loop+0x30>)
 8001176:	6953      	ldr	r3, [r2, #20]
 8001178:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800117c:	6153      	str	r3, [r2, #20]
        period = 200;
 800117e:	4b05      	ldr	r3, [pc, #20]	; (8001194 <loop+0x34>)
 8001180:	22c8      	movs	r2, #200	; 0xc8
 8001182:	601a      	str	r2, [r3, #0]
 8001184:	bd08      	pop	{r3, pc}
 8001186:	bf00      	nop
 8001188:	2000046c 	.word	0x2000046c
 800118c:	2000000c 	.word	0x2000000c
 8001190:	40020400 	.word	0x40020400
 8001194:	20000014 	.word	0x20000014

08001198 <FLASH_Unlock>:
#define SECTOR_MASK ((uint32_t)0xFFFFFF07)
#define FLASH_FLAG_RDERR ((uint32_t)0x00000100) /*!< Read Protection error flag (PCROP)        */

void FLASH_Unlock(void)
{
    if((FLASH->CR & FLASH_CR_LOCK) != RESET)
 8001198:	4b04      	ldr	r3, [pc, #16]	; (80011ac <FLASH_Unlock+0x14>)
 800119a:	691a      	ldr	r2, [r3, #16]
 800119c:	2a00      	cmp	r2, #0
    {
        /* Authorize the FLASH Registers access */
        FLASH->KEYR = FLASH_KEY1;
 800119e:	bfbf      	itttt	lt
 80011a0:	4a03      	ldrlt	r2, [pc, #12]	; (80011b0 <FLASH_Unlock+0x18>)
 80011a2:	605a      	strlt	r2, [r3, #4]
        FLASH->KEYR = FLASH_KEY2;
 80011a4:	f102 3288 	addlt.w	r2, r2, #2290649224	; 0x88888888
 80011a8:	605a      	strlt	r2, [r3, #4]
 80011aa:	4770      	bx	lr
 80011ac:	40023c00 	.word	0x40023c00
 80011b0:	45670123 	.word	0x45670123

080011b4 <FLASH_ClearFlag>:
}


void FLASH_Lock(void) { FLASH->CR |= FLASH_CR_LOCK; }

void FLASH_ClearFlag(uint32_t FLASH_FLAG) { FLASH->SR = FLASH_FLAG; }
 80011b4:	4b01      	ldr	r3, [pc, #4]	; (80011bc <FLASH_ClearFlag+0x8>)
 80011b6:	60d8      	str	r0, [r3, #12]
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	40023c00 	.word	0x40023c00

080011c0 <FLASH_GetStatus>:

FLASH_Status FLASH_GetStatus(void)
{
    FLASH_Status flashstatus = FLASH_COMPLETE;

    if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY)
 80011c0:	4b0d      	ldr	r3, [pc, #52]	; (80011f8 <FLASH_GetStatus+0x38>)
 80011c2:	68da      	ldr	r2, [r3, #12]
 80011c4:	03d2      	lsls	r2, r2, #15
 80011c6:	d412      	bmi.n	80011ee <FLASH_GetStatus+0x2e>
    {
        flashstatus = FLASH_BUSY;
    }
    else
    {
        if((FLASH->SR & FLASH_FLAG_WRPERR) != (uint32_t)0x00)
 80011c8:	68da      	ldr	r2, [r3, #12]
 80011ca:	06d1      	lsls	r1, r2, #27
 80011cc:	d40d      	bmi.n	80011ea <FLASH_GetStatus+0x2a>
        {
            flashstatus = FLASH_ERROR_WRP;
        }
        else
        {
            if((FLASH->SR & FLASH_FLAG_RDERR) != (uint32_t)0x00)
 80011ce:	68da      	ldr	r2, [r3, #12]
 80011d0:	05d2      	lsls	r2, r2, #23
 80011d2:	d40c      	bmi.n	80011ee <FLASH_GetStatus+0x2e>
            {
                flashstatus = FLASH_ERROR_RD;
            }
            else
            {
                if((FLASH->SR & (uint32_t)0xE0) != (uint32_t)0x00)
 80011d4:	68da      	ldr	r2, [r3, #12]
 80011d6:	f012 0fe0 	tst.w	r2, #224	; 0xe0
 80011da:	d10a      	bne.n	80011f2 <FLASH_GetStatus+0x32>
                {
                    flashstatus = FLASH_ERROR_PROGRAM;
                }
                else
                {
                    if((FLASH->SR & FLASH_FLAG_OPERR) != (uint32_t)0x00)
 80011dc:	68db      	ldr	r3, [r3, #12]
 80011de:	f013 0f02 	tst.w	r3, #2
                    {
                        flashstatus = FLASH_ERROR_OPERATION;
                    }
                    else
                    {
                        flashstatus = FLASH_COMPLETE;
 80011e2:	bf14      	ite	ne
 80011e4:	2020      	movne	r0, #32
 80011e6:	2009      	moveq	r0, #9
 80011e8:	4770      	bx	lr
            flashstatus = FLASH_ERROR_WRP;
 80011ea:	2010      	movs	r0, #16
 80011ec:	4770      	bx	lr
        flashstatus = FLASH_BUSY;
 80011ee:	2001      	movs	r0, #1
 80011f0:	4770      	bx	lr
                    flashstatus = FLASH_ERROR_PROGRAM;
 80011f2:	2007      	movs	r0, #7
            }
        }
    }
    /* Return the FLASH Status */
    return flashstatus;
}
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	40023c00 	.word	0x40023c00

080011fc <_FLASH_WaitForLastOperation>:

FLASH_Status _FLASH_WaitForLastOperation(void)
{ 
 80011fc:	b507      	push	{r0, r1, r2, lr}
  __IO FLASH_Status status = FLASH_COMPLETE;
 80011fe:	2309      	movs	r3, #9
 8001200:	f88d 3007 	strb.w	r3, [sp, #7]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while(status == FLASH_BUSY)
  {
    status = FLASH_GetStatus();
 8001204:	f7ff ffdc 	bl	80011c0 <FLASH_GetStatus>
 8001208:	f88d 0007 	strb.w	r0, [sp, #7]
  while(status == FLASH_BUSY)
 800120c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001210:	2b01      	cmp	r3, #1
 8001212:	d0f7      	beq.n	8001204 <_FLASH_WaitForLastOperation+0x8>
  }
  /* Return the operation status */
  return status;
 8001214:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8001218:	b003      	add	sp, #12
 800121a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08001220 <FLASH_EraseSector>:

FLASH_Status FLASH_EraseSector(uint32_t FLASH_Sector, uint8_t VoltageRange)
{
 8001220:	b570      	push	{r4, r5, r6, lr}
 8001222:	4606      	mov	r6, r0
    uint32_t tmp_psize = 0x0;

    if(VoltageRange == VoltageRange_1)
 8001224:	b359      	cbz	r1, 800127e <FLASH_EraseSector+0x5e>
    {
        tmp_psize = FLASH_PSIZE_BYTE;
    }
    else if(VoltageRange == VoltageRange_2)
 8001226:	2901      	cmp	r1, #1
 8001228:	d02b      	beq.n	8001282 <FLASH_EraseSector+0x62>
    {
        tmp_psize = FLASH_PSIZE_HALF_WORD;
    }
    else if(VoltageRange == VoltageRange_3)
 800122a:	2902      	cmp	r1, #2
    {
        tmp_psize = FLASH_PSIZE_WORD;
    }
    else
    {
        tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800122c:	bf0c      	ite	eq
 800122e:	f44f 7500 	moveq.w	r5, #512	; 0x200
 8001232:	f44f 7540 	movne.w	r5, #768	; 0x300
    }
    /* Wait for last operation to be completed */
    FLASH_Status status = _FLASH_WaitForLastOperation();
 8001236:	f7ff ffe1 	bl	80011fc <_FLASH_WaitForLastOperation>

    if(status == FLASH_COMPLETE)
 800123a:	2809      	cmp	r0, #9
 800123c:	d11e      	bne.n	800127c <FLASH_EraseSector+0x5c>
    {
        /* if the previous operation is completed, proceed to erase the sector */
        FLASH->CR &= CR_PSIZE_MASK;
 800123e:	4c12      	ldr	r4, [pc, #72]	; (8001288 <FLASH_EraseSector+0x68>)
 8001240:	6923      	ldr	r3, [r4, #16]
 8001242:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001246:	6123      	str	r3, [r4, #16]
        FLASH->CR |= tmp_psize;
 8001248:	6921      	ldr	r1, [r4, #16]
 800124a:	4329      	orrs	r1, r5
 800124c:	6121      	str	r1, [r4, #16]
        FLASH->CR &= SECTOR_MASK;
 800124e:	6923      	ldr	r3, [r4, #16]
 8001250:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001254:	6123      	str	r3, [r4, #16]
        FLASH->CR |= FLASH_CR_SER | FLASH_Sector;
 8001256:	6920      	ldr	r0, [r4, #16]
 8001258:	f040 0002 	orr.w	r0, r0, #2
 800125c:	4330      	orrs	r0, r6
 800125e:	6120      	str	r0, [r4, #16]
        FLASH->CR |= FLASH_CR_STRT;
 8001260:	6923      	ldr	r3, [r4, #16]
 8001262:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001266:	6123      	str	r3, [r4, #16]

        status = _FLASH_WaitForLastOperation();
 8001268:	f7ff ffc8 	bl	80011fc <_FLASH_WaitForLastOperation>

        /* if the erase operation is completed, disable the SER Bit */
        FLASH->CR &= (~FLASH_CR_SER);
 800126c:	6923      	ldr	r3, [r4, #16]
 800126e:	f023 0302 	bic.w	r3, r3, #2
 8001272:	6123      	str	r3, [r4, #16]
        FLASH->CR &= SECTOR_MASK;
 8001274:	6923      	ldr	r3, [r4, #16]
 8001276:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800127a:	6123      	str	r3, [r4, #16]
    }

    return status;
}
 800127c:	bd70      	pop	{r4, r5, r6, pc}
        tmp_psize = FLASH_PSIZE_BYTE;
 800127e:	460d      	mov	r5, r1
 8001280:	e7d9      	b.n	8001236 <FLASH_EraseSector+0x16>
        tmp_psize = FLASH_PSIZE_HALF_WORD;
 8001282:	f44f 7580 	mov.w	r5, #256	; 0x100
 8001286:	e7d6      	b.n	8001236 <FLASH_EraseSector+0x16>
 8001288:	40023c00 	.word	0x40023c00

0800128c <__libc_init_array>:
 800128c:	b570      	push	{r4, r5, r6, lr}
 800128e:	4e0f      	ldr	r6, [pc, #60]	; (80012cc <__libc_init_array+0x40>)
 8001290:	4d0f      	ldr	r5, [pc, #60]	; (80012d0 <__libc_init_array+0x44>)
 8001292:	1b76      	subs	r6, r6, r5
 8001294:	10b6      	asrs	r6, r6, #2
 8001296:	bf18      	it	ne
 8001298:	2400      	movne	r4, #0
 800129a:	d005      	beq.n	80012a8 <__libc_init_array+0x1c>
 800129c:	3401      	adds	r4, #1
 800129e:	f855 3b04 	ldr.w	r3, [r5], #4
 80012a2:	4798      	blx	r3
 80012a4:	42a6      	cmp	r6, r4
 80012a6:	d1f9      	bne.n	800129c <__libc_init_array+0x10>
 80012a8:	4e0a      	ldr	r6, [pc, #40]	; (80012d4 <__libc_init_array+0x48>)
 80012aa:	4d0b      	ldr	r5, [pc, #44]	; (80012d8 <__libc_init_array+0x4c>)
 80012ac:	1b76      	subs	r6, r6, r5
 80012ae:	f000 f8f3 	bl	8001498 <_init>
 80012b2:	10b6      	asrs	r6, r6, #2
 80012b4:	bf18      	it	ne
 80012b6:	2400      	movne	r4, #0
 80012b8:	d006      	beq.n	80012c8 <__libc_init_array+0x3c>
 80012ba:	3401      	adds	r4, #1
 80012bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80012c0:	4798      	blx	r3
 80012c2:	42a6      	cmp	r6, r4
 80012c4:	d1f9      	bne.n	80012ba <__libc_init_array+0x2e>
 80012c6:	bd70      	pop	{r4, r5, r6, pc}
 80012c8:	bd70      	pop	{r4, r5, r6, pc}
 80012ca:	bf00      	nop
 80012cc:	080014cc 	.word	0x080014cc
 80012d0:	080014cc 	.word	0x080014cc
 80012d4:	080014d4 	.word	0x080014d4
 80012d8:	080014cc 	.word	0x080014cc

080012dc <memset>:
 80012dc:	b470      	push	{r4, r5, r6}
 80012de:	0786      	lsls	r6, r0, #30
 80012e0:	d046      	beq.n	8001370 <memset+0x94>
 80012e2:	1e54      	subs	r4, r2, #1
 80012e4:	2a00      	cmp	r2, #0
 80012e6:	d041      	beq.n	800136c <memset+0x90>
 80012e8:	b2ca      	uxtb	r2, r1
 80012ea:	4603      	mov	r3, r0
 80012ec:	e002      	b.n	80012f4 <memset+0x18>
 80012ee:	f114 34ff 	adds.w	r4, r4, #4294967295
 80012f2:	d33b      	bcc.n	800136c <memset+0x90>
 80012f4:	f803 2b01 	strb.w	r2, [r3], #1
 80012f8:	079d      	lsls	r5, r3, #30
 80012fa:	d1f8      	bne.n	80012ee <memset+0x12>
 80012fc:	2c03      	cmp	r4, #3
 80012fe:	d92e      	bls.n	800135e <memset+0x82>
 8001300:	b2cd      	uxtb	r5, r1
 8001302:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8001306:	2c0f      	cmp	r4, #15
 8001308:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 800130c:	d919      	bls.n	8001342 <memset+0x66>
 800130e:	f103 0210 	add.w	r2, r3, #16
 8001312:	4626      	mov	r6, r4
 8001314:	3e10      	subs	r6, #16
 8001316:	2e0f      	cmp	r6, #15
 8001318:	f842 5c10 	str.w	r5, [r2, #-16]
 800131c:	f842 5c0c 	str.w	r5, [r2, #-12]
 8001320:	f842 5c08 	str.w	r5, [r2, #-8]
 8001324:	f842 5c04 	str.w	r5, [r2, #-4]
 8001328:	f102 0210 	add.w	r2, r2, #16
 800132c:	d8f2      	bhi.n	8001314 <memset+0x38>
 800132e:	f1a4 0210 	sub.w	r2, r4, #16
 8001332:	f022 020f 	bic.w	r2, r2, #15
 8001336:	f004 040f 	and.w	r4, r4, #15
 800133a:	3210      	adds	r2, #16
 800133c:	2c03      	cmp	r4, #3
 800133e:	4413      	add	r3, r2
 8001340:	d90d      	bls.n	800135e <memset+0x82>
 8001342:	461e      	mov	r6, r3
 8001344:	4622      	mov	r2, r4
 8001346:	3a04      	subs	r2, #4
 8001348:	2a03      	cmp	r2, #3
 800134a:	f846 5b04 	str.w	r5, [r6], #4
 800134e:	d8fa      	bhi.n	8001346 <memset+0x6a>
 8001350:	1f22      	subs	r2, r4, #4
 8001352:	f022 0203 	bic.w	r2, r2, #3
 8001356:	3204      	adds	r2, #4
 8001358:	4413      	add	r3, r2
 800135a:	f004 0403 	and.w	r4, r4, #3
 800135e:	b12c      	cbz	r4, 800136c <memset+0x90>
 8001360:	b2c9      	uxtb	r1, r1
 8001362:	441c      	add	r4, r3
 8001364:	f803 1b01 	strb.w	r1, [r3], #1
 8001368:	429c      	cmp	r4, r3
 800136a:	d1fb      	bne.n	8001364 <memset+0x88>
 800136c:	bc70      	pop	{r4, r5, r6}
 800136e:	4770      	bx	lr
 8001370:	4614      	mov	r4, r2
 8001372:	4603      	mov	r3, r0
 8001374:	e7c2      	b.n	80012fc <memset+0x20>
 8001376:	bf00      	nop

08001378 <register_fini>:
 8001378:	4b02      	ldr	r3, [pc, #8]	; (8001384 <register_fini+0xc>)
 800137a:	b113      	cbz	r3, 8001382 <register_fini+0xa>
 800137c:	4802      	ldr	r0, [pc, #8]	; (8001388 <register_fini+0x10>)
 800137e:	f000 b805 	b.w	800138c <atexit>
 8001382:	4770      	bx	lr
 8001384:	00000000 	.word	0x00000000
 8001388:	08001399 	.word	0x08001399

0800138c <atexit>:
 800138c:	2300      	movs	r3, #0
 800138e:	4601      	mov	r1, r0
 8001390:	461a      	mov	r2, r3
 8001392:	4618      	mov	r0, r3
 8001394:	f000 b81e 	b.w	80013d4 <__register_exitproc>

08001398 <__libc_fini_array>:
 8001398:	b538      	push	{r3, r4, r5, lr}
 800139a:	4c0a      	ldr	r4, [pc, #40]	; (80013c4 <__libc_fini_array+0x2c>)
 800139c:	4d0a      	ldr	r5, [pc, #40]	; (80013c8 <__libc_fini_array+0x30>)
 800139e:	1b64      	subs	r4, r4, r5
 80013a0:	10a4      	asrs	r4, r4, #2
 80013a2:	d00a      	beq.n	80013ba <__libc_fini_array+0x22>
 80013a4:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
 80013a8:	3b01      	subs	r3, #1
 80013aa:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 80013ae:	3c01      	subs	r4, #1
 80013b0:	f855 3904 	ldr.w	r3, [r5], #-4
 80013b4:	4798      	blx	r3
 80013b6:	2c00      	cmp	r4, #0
 80013b8:	d1f9      	bne.n	80013ae <__libc_fini_array+0x16>
 80013ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80013be:	f000 b871 	b.w	80014a4 <_fini>
 80013c2:	bf00      	nop
 80013c4:	080014d8 	.word	0x080014d8
 80013c8:	080014d4 	.word	0x080014d4

080013cc <__retarget_lock_acquire_recursive>:
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop

080013d0 <__retarget_lock_release_recursive>:
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop

080013d4 <__register_exitproc>:
 80013d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80013d8:	4d2c      	ldr	r5, [pc, #176]	; (800148c <__register_exitproc+0xb8>)
 80013da:	4606      	mov	r6, r0
 80013dc:	6828      	ldr	r0, [r5, #0]
 80013de:	4698      	mov	r8, r3
 80013e0:	460f      	mov	r7, r1
 80013e2:	4691      	mov	r9, r2
 80013e4:	f7ff fff2 	bl	80013cc <__retarget_lock_acquire_recursive>
 80013e8:	4b29      	ldr	r3, [pc, #164]	; (8001490 <__register_exitproc+0xbc>)
 80013ea:	681c      	ldr	r4, [r3, #0]
 80013ec:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d03e      	beq.n	8001472 <__register_exitproc+0x9e>
 80013f4:	685a      	ldr	r2, [r3, #4]
 80013f6:	2a1f      	cmp	r2, #31
 80013f8:	dc1c      	bgt.n	8001434 <__register_exitproc+0x60>
 80013fa:	f102 0e01 	add.w	lr, r2, #1
 80013fe:	b176      	cbz	r6, 800141e <__register_exitproc+0x4a>
 8001400:	eb03 0182 	add.w	r1, r3, r2, lsl #2
 8001404:	2401      	movs	r4, #1
 8001406:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 800140a:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
 800140e:	4094      	lsls	r4, r2
 8001410:	4320      	orrs	r0, r4
 8001412:	2e02      	cmp	r6, #2
 8001414:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
 8001418:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 800141c:	d023      	beq.n	8001466 <__register_exitproc+0x92>
 800141e:	3202      	adds	r2, #2
 8001420:	f8c3 e004 	str.w	lr, [r3, #4]
 8001424:	6828      	ldr	r0, [r5, #0]
 8001426:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
 800142a:	f7ff ffd1 	bl	80013d0 <__retarget_lock_release_recursive>
 800142e:	2000      	movs	r0, #0
 8001430:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001434:	4b17      	ldr	r3, [pc, #92]	; (8001494 <__register_exitproc+0xc0>)
 8001436:	b30b      	cbz	r3, 800147c <__register_exitproc+0xa8>
 8001438:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800143c:	f3af 8000 	nop.w
 8001440:	4603      	mov	r3, r0
 8001442:	b1d8      	cbz	r0, 800147c <__register_exitproc+0xa8>
 8001444:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
 8001448:	6002      	str	r2, [r0, #0]
 800144a:	2100      	movs	r1, #0
 800144c:	6041      	str	r1, [r0, #4]
 800144e:	460a      	mov	r2, r1
 8001450:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
 8001454:	f04f 0e01 	mov.w	lr, #1
 8001458:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
 800145c:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
 8001460:	2e00      	cmp	r6, #0
 8001462:	d0dc      	beq.n	800141e <__register_exitproc+0x4a>
 8001464:	e7cc      	b.n	8001400 <__register_exitproc+0x2c>
 8001466:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
 800146a:	430c      	orrs	r4, r1
 800146c:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
 8001470:	e7d5      	b.n	800141e <__register_exitproc+0x4a>
 8001472:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
 8001476:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
 800147a:	e7bb      	b.n	80013f4 <__register_exitproc+0x20>
 800147c:	6828      	ldr	r0, [r5, #0]
 800147e:	f7ff ffa7 	bl	80013d0 <__retarget_lock_release_recursive>
 8001482:	f04f 30ff 	mov.w	r0, #4294967295
 8001486:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800148a:	bf00      	nop
 800148c:	20000440 	.word	0x20000440
 8001490:	080014c0 	.word	0x080014c0
 8001494:	00000000 	.word	0x00000000

08001498 <_init>:
 8001498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800149a:	bf00      	nop
 800149c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800149e:	bc08      	pop	{r3}
 80014a0:	469e      	mov	lr, r3
 80014a2:	4770      	bx	lr

080014a4 <_fini>:
 80014a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014a6:	bf00      	nop
 80014a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80014aa:	bc08      	pop	{r3}
 80014ac:	469e      	mov	lr, r3
 80014ae:	4770      	bx	lr
